




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphics on K-State CC 120 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/index.html</link>
    <description>Recent content in Graphics on K-State CC 120 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cc120/7-graphics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/01-introduction/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/01-introduction/index.html</guid>
      <description>In computer graphics, we have two primary approaches to representing graphical information, raster and vector representations.
Raster graphics take their name from the scan pattern of a cathode-ray tube, such as was used in older television sets and computer monitors. These, as well as modern monitors, rely on a regular grid of pixels composed of three colors of light (red, green, and blue) that are mixed at different intensities to create all colors of the visible spectrum.</description>
    </item>
    <item>
      <title>Raster Graphic Files</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/02-raster-graphic-files/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/02-raster-graphic-files/index.html</guid>
      <description>Unsurprisingly, graphic files that store their data in a raster format borrow heavily from the representations discussed previously . Typically, a graphic file consists of two parts, a head and a body. This is very much like how the &amp;lt;head&amp;gt; of a HTML file provides metadata about the page and the &amp;lt;body&amp;gt; contains the actual page contents. For a raster graphic file, the head of the file contains metadata describing the image itself - the color format, along with the width and height of the image.</description>
    </item>
    <item>
      <title>HTML Raster Graphics</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/03-html-raster-graphics/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/03-html-raster-graphics/index.html</guid>
      <description>The most obvious use of raster graphics in HTML is the &amp;lt;img&amp;gt; element, a HTML element that embodies a single raster graphic image. It is defined with the an img tag:
&amp;lt;img src=&amp;#34;&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;The src attribute is a relative or absolute url of an image file, and the alt attribute provides a textual description of what the image portrays. It is what the browser displays if the image file does not load, and is also important for screen readers (as discussed in Chapter 6 ).</description>
    </item>
    <item>
      <title>The Canvas Element</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/04-the-canvas-element/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/04-the-canvas-element/index.html</guid>
      <description>The &amp;lt;canvas&amp;gt; element represents a raster graphic, much like the &amp;lt;img&amp;gt; element. But instead of representing an existing image file, the &amp;lt;canvas&amp;gt; is a blank slate - a grid of pixels on which you can draw using JavaScript. Becuase a canvas doesn&amp;rsquo;t determine its size from an image file, you need to always declare it with a width and height attribute (otherwise, it has a width and height of 0):</description>
    </item>
    <item>
      <title>The Pen Metaphor</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/05-the-pen-metaphor/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/05-the-pen-metaphor/index.html</guid>
      <description>Most 2D graphics libraries adopt a &amp;ldquo;pen&amp;rdquo; metaphor to model how they interact with the graphics they draw. Think of an imaginary pen that you use to draw on the screen. When you put the pen down and move it across the screen you draw a line - the stroke. When you lift the pen, you no longer make a mark. The movements of the pen across the canvas also define a path.</description>
    </item>
    <item>
      <title>Stroke and Fill</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/06-stroke-and-fill/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/06-stroke-and-fill/index.html</guid>
      <description>The stroke and fill work with the current path of the context, defining how the outline and interior of a shape defined by the path are drawn.
Stroke The stroke() draws all of the path segments where the pen was &amp;ldquo;down&amp;rdquo;. The appearance of the stroke can be altered with specific properties of the canvas:
strokeStyle allows you to set the color of the stroke, i.e. ctx.strokeStyle = &#39;orange&#39;;. You can use one of the named colors, i.</description>
    </item>
    <item>
      <title>Shape Functions</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/07-shape-functions/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/07-shape-functions/index.html</guid>
      <description>For ease of use, the context also supplies a number of functions for drawing shapes. Some of these just define the shape as a series of subpaths to be used with the stroke() and fill() functions.
Arcs and Circles Of these, we&amp;rsquo;ve already seen the arc(x, y, radius, startAngle, endAngle) function. It can be used to draw an arc, or when filled, a wedge - like a pie slice. When a startAngle of 0 and endAngle of 2 * Math.</description>
    </item>
    <item>
      <title>Canvas Text</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/08-canvas-text/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/08-canvas-text/index.html</guid>
      <description>While the canvas is primarily used to draw graphics, there are times we want to use text as well. We have two methods to draw text: fillText(text, x, y) and strokeText(text, x, y). The text parameter is the text to render, and the x and y are the upper left corner of the text.
As with the fillRect() and strokeRect() functions, fillText() and strokeText() fill and stroke the text, respectively, and the text does not affect the current path.</description>
    </item>
    <item>
      <title>Canvas and Images</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/09-canvas-images/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/09-canvas-images/index.html</guid>
      <description>The &amp;lt;canvas&amp;gt; and &amp;lt;img&amp;gt; elements are both raster representations of graphics, which introduces an interesting possibility - copying the data of an image into the canvas. This can be done with the drawImage() family of functions.
The first of these is drawImage(image, x, y). This copies the entire image held in the image variable onto the canvas, starting at (x, y).
&amp;lt;canvas id=&amp;#34;image-example-1&amp;#34; width=&amp;#34;500&amp;#34; height=&amp;#34;300&amp;#34;&amp;gt;&amp;lt;/canvas&amp;gt; &amp;lt;script&amp;gt; var canvas1 = document.getElementById(&amp;#39;image-example-1&amp;#39;); var ctx1 = canvas1.</description>
    </item>
    <item>
      <title>Transforms and State</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/10-canvas-transforms/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/10-canvas-transforms/index.html</guid>
      <description>Much like we can use CSS to apply transformations to HTML elements, we can use transforms to change how we draw into a canvas. The rendering context has a transformation matrix much like those we discussed in the CSS chapter, and it applies this transform to any point it is tasked with drawing.
We can replace the current transformation matrix with the setTransform() function, or multiply it by a new transformation (effectively combining the current transformation with the new one) by calling transform().</description>
    </item>
    <item>
      <title>Animation</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/11-canvas-animation/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/11-canvas-animation/index.html</guid>
      <description>The canvas element provides a powerful tool for creating animations by allowing us to erase and re-draw its contents over and over. Ideally, we only want to redraw the canvas contents only as quickly as the screen is updated (typically every 1/30th or 1/60th of a second). The window.requestAnimationFrame(callback) provides an approach for doing this - it triggers the supplied callback every time the monitor refreshes.
Inside that callback, we want to erase the canvas and then draw the updated scene.</description>
    </item>
    <item>
      <title>Vector Graphics</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/12-vector-graphics/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/12-vector-graphics/index.html</guid>
      <description>Up to this point, we&amp;rsquo;ve been discussing raster graphics, which are represented by a grid of pixels. In contrast, vector graphics are stored as a series of instructions to re-create the graphic. For most vector approaches, these instructions look similar to those we issued to our JavaScript rendering context when working with the &amp;lt;canvas&amp;gt; element - including the idea of paths, stroke, and fill.
The vector approach has its own benefits and drawbacks when compared to raster graphics.</description>
    </item>
    <item>
      <title>SVG</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/13-svg/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/13-svg/index.html</guid>
      <description>The Scalable Vector Graphics (SVG) image format is a file format for creating a vector graphic. It uses the same ideas about path, stroke, and fill and coordinate that we discussed with the canvas. It also is a text format based on XML, as was HTML. So the contents of a XML file will look familiar to you. Here is an example:
&amp;lt;svg viewBox=&amp;#34;0 0 500 200&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34;&amp;gt; &amp;lt;path d=&amp;#34;M 100 50 L 100 150 L 300 150 Z&amp;#34; stroke=&amp;#34;black&amp;#34; fill=&amp;#34;#dd3333&amp;#34;/&amp;gt; &amp;lt;/svg&amp;gt;Let&amp;rsquo;s take a close look at the file format.</description>
    </item>
    <item>
      <title>SVG Paths</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/14-svg-paths/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/14-svg-paths/index.html</guid>
      <description>SVGs use the same pen metaphor we saw with the &amp;lt;canvas&amp;gt; and one of the most basic approaches to drawing in an SVG is the &amp;lt;path&amp;gt; element. Each &amp;lt;path&amp;gt; should contain a d attribute, which holds the commands used to draw the path. These are very similar to the commands we used with the &amp;lt;canvas&amp;gt; and the CanvasRenderingContext2D we used earlier, but instead of being written as a function call, they are written as a capital letter (indicating what command to carry out) followed by numbers specifying the action.</description>
    </item>
    <item>
      <title>SVG Shapes</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/15-svg-shapes/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/15-svg-shapes/index.html</guid>
      <description>Much like the CanvasRenderingContext2d we used with the &amp;lt;canvas&amp;gt; earlier allowed us to render rectangles outside of the path, the SVG format also provides mechanisms for rendering common shapes. These are specified using their own tags (like HTML elements), and there are a wide variety of shapes available:
Rectangle The &amp;lt;rect&amp;gt; element defines a rectangle, specified by the now-familiar x, y,, width and height attributes, and with optional rounded corners with radius specified by the rx attribute.</description>
    </item>
    <item>
      <title>SVG Animation</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/17-svg-animation/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/17-svg-animation/index.html</guid>
      <description>SVG has several build-in approaches to add animation to a drawing, the &amp;lt;animate&amp;gt; and &amp;lt;animateMotion&amp;gt; elements.
The &amp;lt;animate&amp;gt; Element The &amp;lt;animate&amp;gt; element is used to animate the attributes of an element over time. It must be declared as a child of the element it will animate, i.e.:
&amp;lt;svg viewBox=&amp;#34;0 0 100 100&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt; &amp;lt;circle cx=&amp;#34;50&amp;#34; cy=&amp;#34;50&amp;#34; r=&amp;#34;50&amp;#34; fill=&amp;#34;cornflowerblue&amp;#34;&amp;gt; &amp;lt;animate attributeName=&amp;#34;r&amp;#34; values=&amp;#34;10;50;20;50;10&amp;#34; dur=&amp;#34;10s&amp;#34; repeatCount=&amp;#34;indefinite&amp;#34;/&amp;gt; &amp;lt;/circle&amp;gt; &amp;lt;/svg&amp;gt;Here we have a 10 second duration repeating animation that alters the radius of a circle between a number of different values.</description>
    </item>
    <item>
      <title>SVG Transforms</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/16-svg-transforms/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/16-svg-transforms/index.html</guid>
      <description>As with CSS and the canvas, SVGs also support transformations. In an SVG, these are specified by the transform attribute and thus apply to a specific element. For example, to rotate our ellipse from the previous section by 15 degrees around its center, we would use:
&amp;lt;svg viewBox=&amp;#34;0 0 200 100&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt; &amp;lt;ellipse cx=&amp;#34;100&amp;#34; cy=&amp;#34;50&amp;#34; rx=&amp;#34;100&amp;#34; ry=&amp;#34;50&amp;#34; fill=&amp;#34;cornflowerblue&amp;#34; transform=&amp;#34;rotate(15 100 50)&amp;#34;/&amp;gt; &amp;lt;/svg&amp;gt;Notice how the ellipse is clipped at the view box - this is another important role the view box plays.</description>
    </item>
    <item>
      <title>SVG and CSS</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/19-svg-and-css/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/19-svg-and-css/index.html</guid>
      <description>When using inline SVG, you can apply CSS to the SVG using any of the methods we&amp;rsquo;ve used with HTML - inline styles, the &amp;lt;style&amp;gt; element, or a CSS file. The rules work exactly the same - you select a SVG element using a CSS selector, and apply style rules. SVG elements have tag name, and can also specify id and class attributes just like HTML. For example:
&amp;lt;style&amp;gt; rect { fill: purple; stroke: black; stroke-width: 5; } #my-circle { fill: violet; stroke: #333; } &amp;lt;/style&amp;gt; &amp;lt;svg viewBox=&amp;#34;0 0 300 100&amp;#34; xmlns=&amp;#34;http://www.</description>
    </item>
    <item>
      <title>SVG and HTML</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/18-svg-and-html/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/18-svg-and-html/index.html</guid>
      <description>As described earlier, SVG is an image file format. Thus, it can be used as the src for an &amp;lt;img&amp;gt; element in HTML:
&amp;lt;img src=&amp;#34;/images/triangle.svg&amp;#34; alt=&amp;#34;A triangle&amp;#34;&amp;gt;However, the SVG itself is just text. And that text shares a lot of characteristics with HTML, as both are derived from XML. As SVG became more commonplace, the W3C added support for inline SVGs - placing SVG code directly in a HTML document:</description>
    </item>
    <item>
      <title>SVG and JavaScript</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/7-graphics/20-svg-and-js/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/7-graphics/20-svg-and-js/index.html</guid>
      <description>Likewise, inline SVG elements are part of the DOM tree, and can be manipulated with JavaScript in almost the same way as any HTML element. You can retrieve a SVG node with the various query methods: document.getElementsByName(name), document.getElementById(id), document.getElementsByClassName(className), document.querySelector(), and document.querySelectorAll(selector). This works just like it does with HTML elements.
However, to work with the attributes of a SVG element, you must use the setAttributeNS(ns, attr) and getAttributeNS(ns, attr) respectively, as the SVG attributes are part of the SVG namespace, not the HTML (default) namespace.</description>
    </item>
  </channel>
</rss>