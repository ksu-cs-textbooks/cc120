




	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hyper-Text Transfer Protocol on K-State CC 120 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc120/2-http/index.html</link>
    <description>Recent content in Hyper-Text Transfer Protocol on K-State CC 120 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Jul 2022 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cc120/2-http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/2-http/01-introduction/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/2-http/01-introduction/index.html</guid>
      <description>At the heart of the world wide web is the Hyper-Text Transfer Protocol (HTTP). This is a protocol defining how HTTP servers (which host web pages) interact with HTTP clients (which display web pages).
It starts with a request initiated from the web browser or other client. This request is sent over the Internet using the TCP protocol to a web server. Once the web server receives the request, it must decide the appropriate response - ideally sending the requested resource back to the browser to be displayed.</description>
    </item>
    <item>
      <title>URIs and URLs</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/2-http/02-uris-and-urls/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/2-http/02-uris-and-urls/index.html</guid>
      <description>Before a web request can be made, the browser needs to know where the resource requested can be found. This is the role that a Universal Resource Locator (a URL) plays. A URL is a specific kind of Universal Resource Indicator (URI) that specifies how a specific resource can be retrieved.
Info URLs and URIs The terms URL and URI are often used interchangeably in practice. However, a URL is a specific subset of URIs that indicate how to retrieve a resource over a network; while a URI identifies a unique resource, it does not necessarily indicate how to retrieve it.</description>
    </item>
    <item>
      <title>Developer Tools Network Panel</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/2-http/03-network-panel/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/2-http/03-network-panel/index.html</guid>
      <description>Now that we&amp;rsquo;ve discussed the request-response pattern and address resolution, let&amp;rsquo;s turn our attention to how requests are processed in the browser. The following tutorial from Google describes the network panel in Chrome:
YouTube Video Also, open the Get Started Demo page it references.
Or, if you prefer you can work through the written version of the tutorial
Similar developer tools exist in other browsers:
Firefox Safari Edge </description>
    </item>
    <item>
      <title>Browser Requests</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/2-http/04-browser-requests/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/2-http/04-browser-requests/index.html</guid>
      <description>Now that you are familiar with the network panel, let&amp;rsquo;s explore the primary kind of request you&amp;rsquo;re already used to making - requests originating from a browser. Every time you use a browser to browse the Internet, you are creating a series of HTTP (or HTTPS) requests that travel across the networks between you and a web server, which responds to your requests.
When you type in an address in your browser (or click a hyperlink), this initiates a HTTP request against the server located at that address.</description>
    </item>
    <item>
      <title>Status Codes</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/2-http/05-status-codes/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/2-http/05-status-codes/index.html</guid>
      <description>A HTTP response includes a status code - a numeric code and a human-readable description. The codes themselves are 3-digit numbers, with the first number indicating a general category the response status falls into. Essentially, the status code indicates that the request is being fulfilled, or the reason it cannot be.
1XX Status Codes Codes falling in the 100&amp;rsquo;s provide some kind of information, often in response to a HEAD or upgrade request.</description>
    </item>
    <item>
      <title>Request Methods</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/2-http/06-request-methods/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/2-http/06-request-methods/index.html</guid>
      <description>When a web client like a browser makes a request, it must specify the request method, indicating what kind of request this is (sometimes we refer to the method as a HTTP Verb).
The two most common are GET and POST requests, as these are typically the only kinds supported by browsers. Other request methods include PUT, PATCH, and DELETE, which are typically used by other kinds of web clients. We&amp;rsquo;ll focus on just GET and POST requests here.</description>
    </item>
    <item>
      <title>Request Headers</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/2-http/07-request-headers/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc120/2-http/07-request-headers/index.html</guid>
      <description>Request headers take the form of key-value pairs, and represent specific aspects of the request. For example:
Accept-Encoding: gzipIndicates that the browser knows how to accepted content compressed in the Gzip format .
Note that request headers are a subset of message headers that apply specifically to requests. There are also message headers that apply only to HTTP responses, and some that apply to both.
As HTTP is intended as an extensible protocol, there are a lot of potential headers.</description>
    </item>
  </channel>
</rss>