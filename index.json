[
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/0-forward/",
	"title": "Course Information",
	"tags": [],
	"description": "",
	"content": "Forward CC 120 Course Information Getting Oriented\nWeb Only\nThis textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/1-www/",
	"title": "The World-Wide-Web",
	"tags": [],
	"description": "",
	"content": "The World-Wide-Web Proudly serving resources since 1991\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/2-http/",
	"title": "Hyper-Text Transfer Protocol",
	"tags": [],
	"description": "",
	"content": "Hyper-Text Transfer Protocol Responding to requests since 1991\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/3-html/",
	"title": "Hyper-Text Markup Language",
	"tags": [],
	"description": "",
	"content": "Hyper-Text Markup Language Providing structured content to the web since 1993\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/",
	"title": "Cascading Style Sheets",
	"tags": [],
	"description": "",
	"content": "Cascading Style Sheets Bringing style to the web since 1998\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/",
	"title": "JavaScript",
	"tags": [],
	"description": "",
	"content": "JavaScript Bringing interaction to web pages since 1995.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/6-accessibility/",
	"title": "Accessibility",
	"tags": [],
	"description": "",
	"content": "Accessibility Making the web useable for all people.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/0-forward/01-introduction/",
	"title": "Course Introduction",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nCourse Resources Syllabus Textbook Welcome Message Hello students, and welcome to CC 120 - Web Page Development. My name is Nathan Bean, and I will be your instructor for this course.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/1-www/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " While working for CERN (the European Organization for Nuclear Research), Tim Burners-Lee proposed bringing the ideas of hyper-text documents together with emerging Internet technologies like the Transmission Control Protocol (TCP) and the Domain Name System (DNS) to create the World-Wide Web. He defined the Hyper Text Transfer Protocol (HTTP), the first web server, and the first web browser, in 1990 demonstrating the feasibility of the idea. Since that time, the web has grown to contain around 1.7 billion webpages1.\nThe web is more a social creation than a technical one. I designed it for a social effect — to help people work together — and not as a technical toy. The ultimate goal of the Web is to support and improve our weblike existence in the world. We clump into families, associations, and companies. We develop trust across the miles and distrust around the corner. -Sir Tim Berners-Lee\nTim Burners-Lee went on to found the World Wide Web Consortium (W3C) to continue developing and maintaining web standards. He has been the recipient of numerous prestigious international awards and was knighted by Queen Elizabeth in 2004 for his contributions to society.\nSee https://siteefy.com/how-many-websites-are-there/ for a current estimate.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/2-http/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "At the heart of the world wide web is the Hyper-Text Transfer Protocol (HTTP). This is a protocol defining how HTTP servers (which host web pages) interact with HTTP clients (which display web pages).\nIt starts with a request initiated from the web browser or other client. This request is sent over the Internet using the TCP protocol to a web server. Once the web server receives the request, it must decide the appropriate response - ideally sending the requested resource back to the browser to be displayed. The following diagram displays this typical request-response pattern.\nThis HTTP request-response pattern is at the core of how all web applications communicate. Even those that use websockets begin with an HTTP request.\nNote\nThe HTTP standard, along with many other web technologies, is maintained by the World-Wide-Web Consortium (abbrivated W3C), stakeholders who create and maintain web standards. The full description of the Hyper-Text Transfer Protocol can be found here w3c\u0026rsquo;s protocols page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/3-html/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Hyper-Text Markup Language (HTML) alongside Hyper-Text Transfer Protocol (HTTP) formed the core of Sir Tim Berners-Lee\u0026rsquo;s world-wide web. As the name implies, HTTP is a markup language, one that combines the text of what is being said with instructions on how to display it.\nThe other aspect of HTML is its hyper-text nature. Hyper-text refers to text that links to additional resources - primarily the links in the document, but also embedded multimedia.\nThis ability to author structured pages that linked to other structured pages with a single mouse click is at the heart of the World-Wide-Web.\nNote\nThe HTML standard, along with many other web technologies, is maintained by the World-Wide-Web Consortium (abbrivated W3C), stakeholders who create and maintain web standards. The full description of the Hyper-Text Markup Language can be found here w3c\u0026rsquo;s HTML page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Style sheets are collections of rules for modifying how a SGML document appears. Cascading Style Sheets (CSS) are the specific implementation adopted by the W3C for HTML.\nThe core concept of CSS is that defines rules altering the appearance of HTML elements that can be selectively applied. These rules are held in a document (the style sheet) and are applied in a well-defined priority order (the cascading part of CSS).\nAs of CSS Version 3, CSS technologies were split into separate modules allowing them to be revised and maintained separately. Each module adds or extends features to those defined in CSS Version 2, in order to maintain backwards compatibility.\nInfo\nThe CSS standards, along with many other web technologies, are maintained by the World-Wide-Web Consortium (abbreviated W3C), stakeholders who create and maintain web standards. The full drafts of the Cascading Style Sheets standards can be found here w3c\u0026rsquo;s CSS page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "As the World Wide Web was gaining popularity in the mid-nineties, browser manufacturers started experimenting with interpreting program scripts embedded within webpages. By far the most successful of these was JavaScript, initially developed by Brandon Eich for Netscape.\nBrandon Eich was hired to integrate the Scheme programming language into the Netscape browser. But when Netscape cut a deal with Sun Microsystems to bring Java Applets to their browser, his mission was altered to create a more Java-like language. He developed a prototype in only ten days, that blended Java syntax, the Self object-orientation approach, and Scheme functionality.\nNetscape eventually submitted JavaScript to ECMA International, resulting in the ECMAScript standard, and opening the door for other browsers to adopt JavaScript. Currently all major browsers support the full ECMAScript 5 standard, and large chunks of ECMAScript 6 and some parts of later versions as well. Moreover, transpilation can be utilized to make newer ECMAScript-compliant code run on older browser versions.\nInfo\nThe ECMA standard is maintained by ECMA International, not the W3C. However, its development process is very similar, involving stakeholders developing proposals for new and improved features.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/6-accessibility/01-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "An important consideration when designing a website is how people will work with it. We want to design our websites in a way that they are useable by everyone in our anticipated audience - bet that everyone in the world, university students, employees at our company, or customers of our business. But there is a segment of each of these audiences that is often overlooked - those with disabilities.\nThe power of the Web is in its universality. Access by everyone regardless of disability is an essential aspect. - Sir Tim Berners-Lee\nGlobally, about 15% of the world\u0026rsquo;s population experiences some form of disability. The UN Convention on the Rights of Persons with DIsabilities recognizes access to the Web, and the information it makes available, as a basic human right. Many countries have followed suit, even codifying accessibility requirements into laws like the Americans with Disabilities Act.\nIn short, it is vital when you author a website, you consider how those with disabilities will interact with it. Moreover, building your website to be accessible will also make your website more usable for all users.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/0-forward/02-navigating-canvas-codio/",
	"title": "Navigating Canvas &amp; Codio",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nResources Codio Documentation Video Script This course makes extensive use of several features of Canvas which you may or may not have worked with before. To give you the best experience in this course, this video will briefly describe those features and the best way to access them.\nWhen you first access the course on Canvas, you will be shown this homepage. It contains quick links to the course syllabus. This is handy if you just need to jump to a particular area.\nLet\u0026rsquo;s walk through the options in the main menu to the left. The first section is Modules, which is where you\u0026rsquo;ll primarily interact with the course. You\u0026rsquo;ll notice that I\u0026rsquo;ve disabled several of the common menu items in this course, such as Files and Assignments. This is to simplify things for you as students, so you remember that all the course content is available in one place.\nWhen you first arrive at the Modules section, you\u0026rsquo;ll see all of the content in the course laid out in order. If you like, you can minimize the modules you aren\u0026rsquo;t working on by clicking the arrow to the left of the module name. I\u0026rsquo;ll do so, leaving the introductory module open.\nAs you look at each module, you\u0026rsquo;ll see that it gives quite a bit of information about the course. At the top of each module is an item telling you what parts of the module you must complete to continue. In this case, it says \u0026ldquo;Complete All Items.\u0026rdquo; Likewise, the following modules may list a number of prerequisite modules, which you must complete before you can access it.\nWithin each module is a set of items, which must be completed in listed order. Under each item you\u0026rsquo;ll see information about what you must do in order to complete that item. For many of them, it will simply say view, which means you must view the item at least once to continue. Others may say contribute, submit, or give a minimum score required to continue. For assignments, it also helpfully gives the number of points available, and the due date.\nLet\u0026rsquo;s click on the first item, Course Introduction, to get started. You\u0026rsquo;ve already been to this page by this point. Many course pages will consist of an embedded video, followed by links to any resources used or referenced in the video, including the slides and a downloadable version of the video. Finally, a rough video script will be posted on the page for your quick reference.\nWhen you are ready to move to the next step in a module, click the Next button at the bottom of the page. Canvas will automatically add Next and Previous buttons to each piece of content which is accessed through the Modules section, which makes it very easy to work through the course content. I\u0026rsquo;ll click through a couple of items here.\nAt any point, you may click on the Modules link in the menu to the left to return to the Modules section of the site. You\u0026rsquo;ll notice that I\u0026rsquo;ve viewed the first few items in the first module, so I can access more items here. This is handy if you want to go back and review the content you\u0026rsquo;ve already seen, or if you leave and want to resume where you left off. Canvas will put green checkmarks to the right of items you\u0026rsquo;ve completed.\nContinuing down the menu to the left, you\u0026rsquo;ll find the usual Canvas links to view your grades in the course, as well as a list of fellow students taking the course.\n===\nNow, let\u0026rsquo;s go back to Canvas and load up one of the Codio projects. To load the first Codio projects, click the Next button at the bottom of this page to go to the next part of this module, which is the Codio Introduction tutorial. On that page, there will be a button to click, which opens Codio in a new browser window or tab.\nOnce Codio loads, it should give you the option to start the Guide for that module. You\u0026rsquo;ll definitely want to select that option whenever you load a Codio project for the first time.\nFrom there, you can follow the steps in that guide to learn more about the Codio interface.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/6-accessibility/02-standards/",
	"title": "Accessibility Standards",
	"tags": [],
	"description": "",
	"content": "The W3C has crafted a number of accessibility standards, as introduced in the following video Introduction to Web Accessibility and W3C Standards created by the Web Accessibility Initiative:\nThe specific W3C standards covering web accessibility are:\nWeb Content Accessibility Guidelines (WCAG) The WACG is built around four principles for content delivered through the web. It should be 1:\nPerceivable - Information and user interface components must be presentable to users in ways they can perceive. This means that users must be able to perceive the information being presented (it can\u0026rsquo;t be invisible to all of their senses).\nOperable - User interface components and navigation must be operable. This means that users must be able to operate the interface (the interface cannot require interaction that a user cannot perform)\nUnderstandable - Information and the operation of user interface must be understandable. This means that users must be able to understand the information as well as the operation of the user interface (the content or operation cannot be beyond their understanding)\nRobust - Content must be robust enough that it can be interpreted reliably by a wide variety of user agents, including assistive technologies. This means that users must be able to access the content as technologies advance (as technologies and user agents evolve, the content should remain accessible)\nA discussion of the WCAG standards and the standards themselves can be found on the W3C WCAG page.\nAuthoring Tool Accessibility Guidelines (ATAG) These guidelines apply to software tools made to help people author web content (i.e. wikis, content management systems, and web publishing tools). Increasingly, these are web apps that people use to author websites and other web apps. A discussion of the WCAG standards and the standards themselves can be found on the W3C ATAG page.\nUser Agent Accessibility Guidelines (UAAG) These guidelines apply to user agents - software that consumes and displays information from the web. The best-known of these are web browsers and media players. A discussion of the WCAG standards and the standards themselves can be found on the W3C ATAG page.\nThe WCAG principles as described are reprinted from Introduction to Understanding WCAG\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/02-basic-syntax/",
	"title": "Basic Syntax",
	"tags": [],
	"description": "",
	"content": " CONSOLE Because Netscape was adopting Java at the same time they were developing what would become JavaScript, there was a push to make the syntax stay somewhat consistent between the two languages. As a result, JavaScript has much of the look and feel of an imperative language like C, C#, or Java.\nHowever, this similarity can be deceptive, because how JavaScript operates can be quite different than those languages. This can lead to frustration for imperative programmers learning JavaScript. As we go over the basics of the language, I will strive to call out these tricky differences.\nTo assist you in learning JavaScript syntax, we\u0026rsquo;ve added an interactive console to this textbook where you can type in arbitrary JavaScript code and see the result of its execution, much like the console that Developer Tools provide. You can click the word \u0026ldquo;Console\u0026rdquo; on the purple tab below to expand it, and click it again to minimize it.\nInterpreted Language JavaScript is an interpreted language, which means instead of being compiled into machine code, it is interpreted by a special program - an interpreter. Each browser has its own interpreter implementation.\nLet\u0026rsquo;s start with a traditional example:\nconsole.log(\u0026#34;hello world\u0026#34;); Copy/paste or type this code into the console provided at the bottom of the page. What is the output?\nAs you might expect, this prints the string \u0026ldquo;hello world\u0026rdquo; to standard output. Notice we didn\u0026rsquo;t need to put this code into a main function - JavaScript code is executed as it is encountered by the interpreter.\nTerminating Lines of Code Also, the semicolon is an optional way to end an expression. A new line is other way to do so, so these two programs:\nconsole.log(\u0026#34;Hello\u0026#34;) console.log(\u0026#34;World\u0026#34;) and\nconsole.log(\u0026#34;Hello\u0026#34;);console.log(\u0026#34;World\u0026#34;); are equivalent. We can also use both a semicolon and a new line (as in the first example). A common technique for making JavaScript files smaller, known as minifying takes advantage of this fact to write an entire program in a single line! We\u0026rsquo;ll discuss how and when to do so later.\nData Types Like any programming language, JavaScript has a number of predefined data types. We can also query the data type of a value at runtime, using the typeof keyword. Try typing some of these lines into the console:\ntypeof 5; typeof 1.3; typeof \u0026#34;Hello\u0026#34;; typeof true; Numbers Numbers include integers and floats, though JavaScript mostly uses the distinction for how a value is stored in memory and presents the programmer with the number type. This category also includes some special values, like NaN (not a number) and Infinity. We can perform all the standard arithmetic operations on any number (+, -, *, /).\nThese operations are also \u0026ldquo;safe\u0026rdquo; in the sense that they will not throw an error. For example, try typing 4/0 in the terminal below. The value you see as a result is still a number!\nThe JavaScript interpreter will switch between an integer and float representation internally as it makes sense to. For example, type 4.0 and you\u0026rsquo;ll see the console echoes 4 to you, showing it is storing the number as an integer. Try typing 4.1, and you\u0026rsquo;ll see it stores it as a float.\nStrings The string type in JavaScript can be declared literally using single (') or double (\u0026quot;) quotes, and as of ES6, tick marks (`).\nDouble and single-quoted strings work exactly the same. They must be on the same line, though you can add newline characters to both using \\n. The backslash is used as an escape character, so to include it in a string you must use a double-backslash instead \\\\. Finally, in a single-quoted string you can escape a single quote, i.e. 'Bob\\'s Diner', and similarly for double-quotes: \u0026quot;\\\u0026quot;That's funny,\\\u0026quot; she said.\u0026quot; Judicious choices of single-or double-quoted strings can avoid much of this complication.\nYou can also directly reference unicode characters with \\u[ref number]. Try typing the sequence \u0026quot;\\u1F63C\u0026quot;.\nFinally, strings enclosed with tick marks (`) are template literals that have a few special properties. First, they can span multiple lines, i.e.:\n`This is a multiline string example` The line breaks will be interpreted as new line characters. Secondly, you can embed arbitrary JavaScript inside of them using ${}. Give it a try:\n`The sum of 2 and 3 is ${2 + 3}` Info\nIn JavaScript there is no character type. In practice, the role characters normally play in programs is filled by strings of length one.\nBooleans JavaScript also has the boolean literals true and false. It also implements the boolean logical operators \u0026amp;\u0026amp; (logical and) || (logical or), and ! (logical not).\nUndefined JavaScript has a special value undefined that means a value hasn\u0026rsquo;t been set. You probably saw it when you entered the console.log(\u0026quot;Hello World\u0026quot;) example above, which spit out:\n\u0026gt; Hello World! \u0026lt;· undefined As the console echoes the value of the prior line, it was printing the return value of console.log(). Since console.log() doesn\u0026rsquo;t return a value, this results in undefined.\nNull JavaScript also defines a null type, even though undefined fills many of the roles null fills in other languages. However, the programmer must explicitly supply a null value. So if a variable is null, you know it was done intentionally, if it is undefined, it may be that it was accidentally not initialized.\nObjects The object type is used to store more than one value, and functions much like a dictionary in other languages. Objects can be declared literally with curly braces, i.e.:\n{ first: \u0026#34;Jim\u0026#34;, last: \u0026#34;Hawkins\u0026#34;, age: 16 } An object is essentially a collection of key/value pairs, known as properties. We\u0026rsquo;ll discuss objects in more depth in the Objects and Classes section.\nSymbols Finally, the symbol type is a kind of identifier. We\u0026rsquo;ll discuss it more later.\nVariables JavaScript uses dynamic typing. This means the type of a variable is not declared in source code, rather it is determined at runtime. Thus, all variables in JavaScript are declared with the var keyword, regardless of type:\nvar a = \u0026#34;A string\u0026#34;; // A string var b = 2; // A number var c = true; // A boolean In addition, the type of a variable can be changed at any point in the code, i.e. the statements:\nvar a = \u0026#34;A string\u0026#34;; a = true; is perfectly legal and workable. The type of a, changes from a string to a float when its value is changed.\nIn addition to the var keyword, constants are declared with const. Constants must have a value assigned with their declaration and cannot be changed.\nFinally, ECMA6 introduced the let keyword, which operates similar to var but is locally scoped (see the discussion of functional scope for details).\nType Conversions JavaScript does its best to use the specified variable, which may result in a type conversion. For example:\n\u0026#34;foo\u0026#34; + 3 Will result in the string 'foo3', as the + operator means concatenation for strings. However, / has no override for strings, so\n\u0026#34;foo\u0026#34; / 3 Will result in NaN (not a number).\nAdditionally, when you attempt to use a different data type as a boolean, JavaScript will interpret its \u0026rsquo;truthiness\u0026rsquo;. The values null, undefined, and 0 are considered false. All other values will be interpreted as true.\nControl Structures JavaScript implements many of the familiar control structures of conditionals and loops.\nWarning\nBe aware that variables declared within a block of code using var are subject to function scope, and exist outside of the conditional branch/loop body. This can lead to unexpected behavior.\nIf Else Statements The JavaScript if and if else statements look just like their Java counterparts:\nif(\u0026lt;logical test\u0026gt;) { \u0026lt;true branch\u0026gt; } if(\u0026lt;logical test\u0026gt;) { \u0026lt;true branch\u0026gt; } else { \u0026lt;false branch\u0026gt; } Loops As do while and do while loops:\nwhile(\u0026lt;logical test\u0026gt;) { \u0026lt;loop body\u0026gt; } do { \u0026lt;loop body\u0026gt; }(\u0026lt;logical test\u0026gt;); And for loops:\nfor(var i = 0; i \u0026lt; 10; i++) { \u0026lt;loop body\u0026gt; } JavaScript also introduces a for ... in loop, which loops over properties within an object. I.e.:\nvar jim = { first: \u0026#34;Jim\u0026#34;, last: \u0026#34;Hawkins\u0026#34;, age: 16 } for(key in jim) { console.log(`The property ${key} has value ${jim[key]}`); } and the for ... of which does the same for arrays and other iterables:\nvar fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;pear\u0026#34;]; for(value of fruits) { console.log(`The fruit is a ${value}`); } Try writing some control structures to conditionally log messages to the console!\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/02-css-rule-format/",
	"title": "CSS Rules",
	"tags": [],
	"description": "",
	"content": "CSS properties consist of key-value pairs separated by a colon (:). For example:\ncolor: red\nindicates that the styled HTML elements should be given a red color.\nMultiple properties are separated by semicolons (;), i.e.:\ncolor: red; background-color: green; Rules are CSS properties grouped within curly braces ({}) and proceeded by a CSS selector to identify the HTML element(s) they should be applied to:\np { color: red; background-color: green; } In this example, all paragraph elements (\u0026lt;p\u0026gt;) should have red text on a green background (how festive!).\nAnd difficult to read! Short Forms Some properties have multiple forms allowing for some abbreviation. For example, the CSS property:\nborder: 1px solid black\nis a short form for three separate border-related properties:\nborder-width: 1px; border-style: solid; border-color: black; Experimental Features and Prefixes As new features are considered for inclusion in CSS, browsers may adopt experimental implementations. To separate these from potentially differing future interpretations, these experimental properties are typically prefixed with a browser-specific code:\n-webkit- Webkit Browsers (Chrome, Safari, newer Opera versions, and iOS) -moz- Mozilla -ms- Microsoft browsers (IE, Edge) -o- Older Opera versions For example, most browsers adopted the box-shadow property before it achieved candidate status, so to use it in the Mozilla browser at that point you would use:\n-moz-box-shadow: black 2px 2px 2px\nTo make it work for multiple browsers, and future browsers when it was officially adopted, you might use:\n-webkit-box-shadow: black 2px 2px 2px; -moz-box-shadow: black 2px 2px 2px; -ms-box-shadow: black 2px 2px 2px; box-shadow: black 2px 2px 2px; The browser will ignore any properties it does not recognize, hence in Chrome 4, the -webkit-box-shadow will be used and the rest ignored, while in Chrome 10+ the box-shadow property will be used.\nNote\nYou should always place the not-prefixed version last, to override the prefixed version if the browser supports the official property.\nTip\nThe Mozilla Developer Network maintains a wiki of comprehensive descriptions of CSS properties and at the bottom of each property\u0026rsquo;s page is a table of detailed browser support. For example, the box-shadow property description can be found at: https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow. By combining the css property name and the keyword mdn in a Google search, you can quickly reach the appropriate page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/3-html/02-element-structure/",
	"title": "HTML Element Structure",
	"tags": [],
	"description": "",
	"content": "HTML was built from the SGML (Structured Generalized Markup Language) standard, which provides the concept of \u0026ldquo;tags\u0026rdquo; to provide markup and structure within a text document. Each element in HTML is defined by a unique opening and closing tag, which in turn are surrounded by angle brackets (\u0026lt;\u0026gt;).\nFor example, a top-level heading in HTML would be written:\n\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\nAnd render:\nHello World The \u0026lt;h1\u0026gt; is the opening tag and the \u0026lt;/h1\u0026gt; is the closing tag. The name of the tag appears immediately within the \u0026lt;\u0026gt; of the opening tag, and within the closing tag proceeded by a forward slash (/). Between the opening tag and closing tag is the content of the element. This can be text (as in the case above) or it can be another HTML element.\nFor example:\n\u0026lt;h1\u0026gt;Hello \u0026lt;i\u0026gt;World\u0026lt;/i\u0026gt;!\u0026lt;/h1\u0026gt;\nRenders:\nHello World Nesting Elements An element nested inside another element in this way is called a child of the element it is nested in. The containing element is a parent. If more than one tag is contained within the parent, the children are referred to as siblings of one another. Finally, a element nested several layers deep inside another element is called a descendant of that element, and that element is called an ancestor.\nMatching Tags Every opening tag must have a matching closing tag. Moreover, nested tags must be matched in order, much like when you use parenthesis and curly braces in programming. While whitespace is ignored by HTML interpreters, best developer practices use indentation to indicate nesting, i.e.:\n\u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; This is a paragraph, followed by an unordered list... \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;List item #1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;List item #2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;List item #3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; Getting tags out of order results in invalid HTML, which may be rendered unpredictably in different browsers.\nVoid Elements Also, some elements are not allowed to contain content, and should not be written with an end tag, like the break character:\n\u0026lt;br\u0026gt;\nHowever, there is a more strict version of HTML called XHTML which is based on XML (another SGML extension). In XHTML void tags are self-closing, and must include a / before the last \u0026gt;, i.e.:\n\u0026lt;br/\u0026gt;\nIn practice, most browsers will interpret \u0026lt;br\u0026gt; and \u0026lt;br/\u0026gt; interchangeably, and you will see many websites and even textbooks use one or the other strategy (sometimes both on the same page). But as a computer scientist, you should strive to use the appropriate form based type of document you are creating.\nTag Name Case Similarly, by the standards, HTML is case-insensitive when evaluating tag names, but the W3C recommends using lowercase characters. In XHTML tag names must be in lowercase, and React\u0026rsquo;s JSX format uses lowercase to distinguish between HTML elements and React components. Thus, it makes sense to always use lowercase tag names.\nInfo\nXHTML is intended to allow HTML to be interpreted by XML parsers, hence the more strict formatting. While it is nearly identical to HTML, there are important structural differences that need to be followed for it to be valid. And since the point of XHTML is to make it more easily parsed by machines, these must be followed to meet that goal. Like HTML, the XHTML standard is maintained by W3C: https://www.w3.org/TR/xhtml11/.\nAttributes In addition to the tag name, tags can have attributes embedded within them. These are key-value pairs that can modify the corresponding HTML element in some way. For example, an image tag must have a src (source) attribute that provides a URL where the image data to display can be found:\n\u0026lt;img src=\u0026quot;/images/Light_Bulb_or_Idea_Flat_Icon_Vector.svg\u0026quot; alt=\u0026quot;Light Bulb\u0026quot;\u0026gt;\nThis allows the image to be downloaded and displayed within the browser:\nNote that the \u0026lt;img\u0026gt; element is another void tag. Also, \u0026lt;img\u0026gt; elements should always have an alt attribute set - this is text that is displayed if the image cannot be downloaded, and is also read by a screen reader when viewed by the visually impaired.\nAttributes come in the form of key-value pairs, with the key and value separated by an equal sign (=) and the individual attributes and the tag name separated by whitespace. Attributes can only appear in an opening or void tag. Some attributes (like readonly) do not need a value.\nThere should be no spaces between the attribute key, the equal sign (=), and the attribute value. Attribute values should be quoted using single or double quotes if they contain a space character, single quote, or double quote character.\nAdditionally, while there are specific attributes defined within the HTML standard that browsers know how to interpret, specific technologies like Angular and React add their own, custom attributes. Any attribute a browser does not know is simply ignored by the browser.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/1-www/02-the-technologies-of-the-web/",
	"title": "The Vision of Sir Tim Berners Lee",
	"tags": [],
	"description": "",
	"content": "When Tim-Berners Lee presented his original ideas for the World-Wide Web, it consisted of a protocol for requesting web documents - HTTP, and a markup language those documents could be written in - HTML. These initial technologies continue to be the foundation of the world-wide web, and have been enhanced by additional languages to style webpages - CSS - and modify them - JavaScript.\nEach of these technologies has continued to evolve under the guidance of the W3C. As of this writing, HTTP is in its 2nd version, HTML is in its 5th, CSS is in its 4th, and JavaScript is in its 7th. Each of these technologies is explored in its own chapter of the book.\nThe full standards for each can be found in the World Wide Web Consortium (W3C) organization\u0026rsquo;s website www.w3c.org, with the exception of JavaScript, which uses the ECMAScript standard maintained by ECMA International.\nGreat developer support is offered on each through the Mozilla Developer Network developer.mozilla.org. While originally the official documentation for Mozilla\u0026rsquo;s Firefox browser, Microsoft partnered with MDN as the official documentation source for their Edge browser. Additionally, MDN documents how the Safari, Opera, and IE browsers support the web standards, making it a great reference for a web developer.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/2-http/02-uris-and-urls/",
	"title": "URIs and URLs",
	"tags": [],
	"description": "",
	"content": "Before a web request can be made, the browser needs to know where the resource requested can be found. This is the role that a Universal Resource Locator (a URL) plays. A URL is a specific kind of Universal Resource Indicator (URI) that specifies how a specific resource can be retrieved.\nInfo\nURLs and URIs The terms URL and URI are often used interchangeably in practice. However, a URL is a specific subset of URIs that indicate how to retrieve a resource over a network; while a URI identifies a unique resource, it does not necessarily indicate how to retrieve it. For example, a book\u0026rsquo;s ISBN can be represented as a URI in the form urn:isbn:0130224189. But this URI cannot be put into a browser\u0026rsquo;s Location to retrieve the associated book.\nA URI consists of several parts, according to the definition (elements in brackets are optional):\nURI = scheme:[//[userinfo@]host[:port]]path[?query][#fragment]\nLet\u0026rsquo;s break this down into individual parts:\nscheme: The scheme refers to the resource is identified and (potentially) accessed. For web development, the primary schemes we deal with are http (hyper-text transfer protocol), https (secure hyper-text transfer protocol), and file (indicating a file opened from the local computer).\nuserinfo: The userinfo is used to identify a specific user. It consists of a username optionally followed by a colon (:) and password. We will discuss its use in the section on HTTP authentication, but note that this approach is rarely used today, and carries potential security risks.\nhost: The host consists of either a fully quantified domain name (i.e. google.com, cs.ksu.edu, or gdc.ksu.edu) or an ip address (i.e. 172.217.1.142 or [2607:f8b0:4004:803::200e]). IPv4 addresses must be separated by periods, and IPv6 addresses must be closed in brackets. Additionally, web developers will often use the loopback host, localhost, which refers to the local machine rather than a location on the network.\nport: The port refers to the port number on the host machine. If it is not specified (which is typical), the default port for the scheme is assumed: port 80 for HTTP, and port 443 for HTTPS.\npath: The path refers to the path to the desired resource on the server. It consists of segments separated by forward slashes (/).\nquery: The query consists of optional collection of key-value pairs (expressed as key:value), separated by ampersands (\u0026amp;), and proceeded by a question mark (?). The query string is used to supply modifiers to the requested resource (for example, applying a filter or searching for a term).\nfragment: The fragment is an optional string proceeded by a hashtag (#). It identifies a portion of the resource to retrieve. It is most often used to auto-scroll to a section of an HTML document, and also for navigation in some single-page web applications.\nThus, the URL https://google.com indicates we want to use the secure HTTP scheme to access the server at google.com using its port 443. This should retrieve Google\u0026rsquo;s main page.\nSimilarly, the url https://google.com/search?q=HTML will open a Google search result page for the term HTML (Google uses the key q to identify search terms).\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/03-css-selectors/",
	"title": "CSS Selectors",
	"tags": [],
	"description": "",
	"content": "In the example from the previous section, we saw:\np { color: red; background-color: green; } Here the p is a CSS Selector, which tells us what elements on the page the CSS rules should be applied to.\nSimple Selectors The most basic CSS selectors come in several flavors, which we\u0026rsquo;ll take a look at next. Simple selectors are a string composed of alphanumeric characters, dashes (-), and underscores (_). Certain selectors also use additional special characters.\nType Selector Type selectors apply to a specific type of HTML element. The p in our example is a type selector matching the paragraph element.\nA type selector is simply the name of the HTML element it applies to - the tag name from our discussion of HTML element structure.\nClass Selector A class selector is a proceeded by a period (.), and applies to any HTML element that has a matching class attribute. For example, the CSS rule:\n.danger { color: red; } would apply to both the paragraph and button elements:\n\u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;danger\u0026#34;\u0026gt;You are in danger\u0026lt;/p\u0026gt; \u0026lt;button class=\u0026#34;danger\u0026#34;\u0026gt;Don\u0026#39;t click me!\u0026lt;/button\u0026gt; as both have the class danger. A HTML element can have multiple classes applied, just separate each class name with a space:\n\u0026lt;p class=\u0026#34;danger big-text\u0026#34;\u0026gt;I have two classes!\u0026lt;/p\u0026gt; ID Selector An ID selector is proceeded by a hash (#) and applies to the HTML element that has a matching id attribute. Hence:\n\u0026lt;p id=\u0026#34;lead\u0026#34;\u0026gt;This paragraph has an id of \u0026#34;lead\u0026#34;\u0026lt;/p\u0026gt; would be matched by:\n#lead { font-size: 16pt; } It is important to note that the id attribute should be unique within the page. If you give the same id to multiple elements, the results will be unpredictable (and doing so is invalid HTML).\nUniversal Selector The asterisk (*) is the universal selector, and applies to all elements. It is often used as part of a reset - CSS rules appearing at the beginning of a CSS document to remove browser-specific styles before applying a site\u0026rsquo;s specific ones. For example:\n* { margin: 0; padding: 0; } sets all element margins and paddings to 0 instead of a browser default. Later rules can then apply specific margins and padding.\nAttribute Selector The attribute selector is wrapped in square brackets ([]) and selects HTML elements with matching attribute values, i.e.:\n[readonly] { color: gray; } will make any element with a readonly attribute have gray text. The value can also be specified exactly, i.e.\n[href=\u0026#34;www.k-state.edu\u0026#34;] or partially. See MDN\u0026rsquo;s documentation for details.\nCompound Selectors Simple selectors can be used in conjunction for greater specificity. For example, a.external-link selects all \u0026lt;a\u0026gt; elements with a class of external-link, and input[type=checkbox] selects all \u0026lt;input\u0026gt; elements with an attribute type set to checkbox.\nPseudo-Class Pseudo-class selectors are proceeded with a single colon (:), and refer to the state of the element they modify. Pseudo-classes must therefore be appended to a selector.\nThe most commonly used pseudo-class is :hover, which is applied to an element that the mouse is currently over. Moving the mouse off the element will make this selector no longer apply. For example, a:hover applies only to \u0026lt;a\u0026gt; elements with the mouse directly over them.\nAnother extremely useful pseudo-class is :nth-child(), which applies to the nth child (specify as an argument), i.e. ul:nth-child(2) will apply to the second child of any unordered list. Additionally, tr:nth-child(odd) will apply to the odd-numbered rows of a table.\nAdditional pseudo-classes can be found in the MDN documentation\nCombinators Combinators can be used to combine both simple and compound selectors using an operator.\nAdjacent Sibling Combinator The plus symbol (+) can be used to select an adjacent sibling HTML element. To be siblings, the first element must be followed by the second, and both must be children of a shared parent. I.e.:\nh1 + p { font-weight: bold; } will bold all paragraphs that directly follow a first-level header.\nGeneral Sibling Combinator The tilde symbol (~) also selects a sibling, but they do not need to be adjacent, just children of the same parent. The first element must still appear before the second (just not immediately after).\nChild Combinator The greater than symbol (\u0026gt;) selects elements that are direct children of the first element. For example:\np \u0026gt; a { font-weight: bold; } Will bold all anchor elements that are direct children of a paragraph element.\nDescendant Combinator A space ( ) selects elements that are descendants of the first element.\nMultiple Selectors Finally, we can apply the same rules to a collection of selectors by separating the selectors with commas, i.e.:\na, p, span { font-family: \u0026#34;Comic Sans\u0026#34;, sans-serif; } Applies Comic Sans as the font for all \u0026lt;a\u0026gt;, \u0026lt;p\u0026gt;, and \u0026lt;span\u0026gt; elements.\nPseudo-Elements An interesting newer development in CSS is the development of psuedo-elements, selectors that go beyond the elements included in the HTML of the page. They are proceeded by two colons (::). For example, the ::first-letter selector allows you to change the first letter of a HTML element. Thus:\np:first-child::first-letter { font-size: 20px; font-weight: bold; float: left; } creates drop caps for all initial paragraphs.\nA second use of pseudo-elements is to create new elements around existing ones with ::before or ::after. For example:\na.external-link::after { content: url(external-link-icon.png); } Would add the external-link-icon.png image after any \u0026lt;a\u0026gt; elements with the external-link class.\nMore information can be found in the MDN Documentation.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/2-http/03-network-panel/",
	"title": "Developer Tools Network Panel",
	"tags": [],
	"description": "",
	"content": "Now that we\u0026rsquo;ve discussed the request-response pattern and address resolution, let\u0026rsquo;s turn our attention to how requests are processed in the browser. The following tutorial from Google describes the network panel in Chrome:\nAlso, open the Get Started Demo page it references.\nOr, if you prefer you can work through the written version of the tutorial\nSimilar developer tools exist in other browsers:\nFirefox Safari Edge "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/3-html/03-document-structure/",
	"title": "HTML Document Structure",
	"tags": [],
	"description": "",
	"content": "When authoring an HTML page, HTML elements should be organized into an HTML Document. This format is defined in the HTML standard. HTML that does not follow this format are technically invalid, and may not be interpreted and rendered correctly by all browsers. Accordingly, it is important to follow the standard.\nThe basic structure of a valid HTML5 document is:\n\u0026lt;!doctype HTML\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Page Title Goes Here\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Page body and tags go here...\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; We\u0026rsquo;ll walk through each section of the page in detail.\nDoctype The SGML standard that HTML is based on requires a !doctype tag to appear as the first tag on the page. The doctype indicates what kind of document the file represents. For HTML5, the doctype is simply HTML. Note the doctype is not an element - it has no closing tag and is not self-closing.\nInfo\nFor SGML, the doctype normally includes a URL pointing at a definition for the specific type of document. For example, in HTML4, it would have been \u0026lt;!DOCTYPE HTML PUBLIC \u0026quot;-//W3C//DTD HTML 4.01//EN\u0026quot; \u0026quot;http://www.w3.org/TR/html4/strict.dtd\u0026quot;\u0026gt;. HTML5 broke with the standard by only requiring HTML be included, making the doctype much easier to remember and type.\nHTML Element The next element should be an \u0026lt;html\u0026gt; element. It should include all other elements in the document, and its closing tag should be the last tag on the page. It is best practice to include a lang attribute to indicate what language is used in the document - here we used \u0026quot;en\u0026quot; for English. The \u0026lt;html\u0026gt; element should only contain two children - a \u0026lt;head\u0026gt; and \u0026lt;body\u0026gt; tag in that order.\nInfo\nThe list of valid langauge subtags are maintained by the Internet Assigned Numbers Authority (IANA), which also oversees domains and IP addresses. The full list can be reached here.\nThe Head Element The next element is the \u0026lt;head\u0026gt; element. A valid HTML document will only have one head element, and it will always be the first child of the \u0026lt;html\u0026gt; element. The head section contains metadata about the document - information about the document that is not rendered in the document itself. This typically consists of meta and link elements, as well as a \u0026lt;title\u0026gt;. Traditionally, \u0026lt;script\u0026gt; elements would also appear here, though current best practice places them as the last children of the \u0026lt;body\u0026gt; tag.\nThe Title Element The \u0026lt;head\u0026gt; element should always have exactly one child \u0026lt;title\u0026gt; element, which contains the title of the page (as text; the \u0026lt;title\u0026gt; element should never contain other HTML elements). This title is typically displayed in the browser tab.\nThe Body Element The next element is the \u0026lt;body\u0026gt; element. A valid HTML document will only have one body element, and it will always be the second child of the \u0026lt;html\u0026gt; element. The \u0026lt;body\u0026gt; tag contains all the HTML elements that make up the page. It can be empty, though that makes for a very boring page.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/03-functions/",
	"title": "JavaScript Functions",
	"tags": [],
	"description": "",
	"content": " CONSOLE While JavaScript may look like an imperative language on the surface, much of how it behaves is based on functional languages like Scheme. This leads to some of the common sources of confusion for programmers new to the language. Let\u0026rsquo;s explore just what its functional roots mean.\nJavaScript implements first-class functions, which means they can be assigned to a variable, passed as function arguments, returned from other functions, and even nested inside other functions. Most of these uses are not possible in a traditional imperative language, though C# and Java have been adding more functional-type behavior.\nDefining Functions Functions in JavaScript are traditionally declared using the function keyword, followed by an identifier, followed by parenthesized arguments, and a body enclosed in curly braces, i.e.:\nfunction doSomething(arg1, arg2, arg3) { // Do something here... } Alternatively, the name can be omitted, resulting in an anonymous function:\nfunction (arg1, arg2, arg3) { // Do something here... } Finally ES6 introduced the arrow function syntax, a more compact way of writing anonymous functions, similar to the lambda syntax of C#:\n(arg1, arg2, arg3) =\u0026gt; { // Do something here... } However, arrow function syntax also has special implications for scope, which we will discuss shortly.\nInvoking Functions Functions are invoked with a parenthetical set of arguments, i.e.\nfunction sayHello(name) { console.log(`Hello, ${name}`); } Go ahead and define this function by typing the definition into your console.\nOnce you\u0026rsquo;ve done so, it can be invoked with sayHello(\u0026quot;Bob\u0026quot;), and would print Hello, Bob to the console. Give it a try:\nFunctions can also be invoked using two methods defined for all functions, call() and apply().\nFunction Arguments One of the bigger differences between JavaScript and imperative languages is in how JavaScript handles arguments. Consider the hello() function we defined above. What happens if we invoke it with no arguments? Or if we invoke it with two arguments?\nGive it a try:\nsayHello() sayHello(\u0026#34;Mary\u0026#34;, \u0026#34;Bob\u0026#34;); What are we seeing here? In JavaScript, the number of arguments supplied to a function when it is invoked is irrelevant. The same function will be invoked regardless of the arity (number) or type of arguments. The supplied arguments will be assigned to the defined argument names within the function\u0026rsquo;s scope, according to the order. If there are less supplied arguments than defined ones, the missing ones are assigned the value undefined. And if there are extra arguments supplied, they are not assigned to a value.\nCan we access those extra arguments? Yes, because JavaScript places them in a variable arguments accessible within the function body. Let\u0026rsquo;s modify our sayHello() method to take advantage of this knowledge, using the for .. of loop we saw in the last section:\nfunction sayHello() { for(name of arguments) { console.log(`Hello, ${name}`); } } And try invoking it with an arbtrary number of names:\nsayHello(\u0026#34;Mike\u0026#34;, \u0026#34;Mary\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Sue\u0026#34;); Warning\nJavaScript does not have a mechanism for function overloading like C# and Java do. In JavaScript, if you declare a second \u0026ldquo;version\u0026rdquo; of a function that has different named arguments, you are not creating an overloaded version - you\u0026rsquo;re replacing the original function!\nThus, when we entered our second sayHello() definition in the console, we overwrote the original one. Each function name will only reference a single definition at a time within a single scope, and just like with variables, we can change its value at any point.\nFinally, because JavaScript has first-order functions, we can pass a function as an argument. For example, we could create a new function, greet() that takes the greeter\u0026rsquo;s name, a function to use to greet others, and uses the arguments to greet an arbitrary number of people:\nfunction greet(name, greetingFn) { for(var i = 2; i \u0026lt; arguments.length; i++) { greetingFn(arguments[i]); } console.log(`It\u0026#39;s good to meet you. I\u0026#39;m ${name}`); } We can then use it by passing our sayHello() function as the second argument:\ngreet(\u0026#34;Mark\u0026#34;, sayHello, \u0026#34;Joe\u0026#34;, \u0026#34;Jill\u0026#34;, \u0026#34;Jack\u0026#34;, \u0026#34;John\u0026#34;, \u0026#34;Jenny\u0026#34;); Note that we don\u0026rsquo;t follow the function name with the parenthesis (()) when we pass it. If we did, we\u0026rsquo;d inovke the function at that point and what we\u0026rsquo;d pass was the return value of the function, not the function itself.\nReturn Values Just like the functions you\u0026rsquo;re used to, JavaScript functions can return a value with the return statement, i.e.:\nfunction foo() { return 3; } We can also return nothing, which is undefined:\nfunction bar() { return; } This is useful when we want to stop execution immediately, but don\u0026rsquo;t have a real return value. Also, if we don\u0026rsquo;t specify a return value, we implicity return undefined.\nAnd, because JavaScript has first-order functions, we can return a function:\nfunction giveMeAFunction() { return function() { console.log(\u0026#34;Here I am!\u0026#34;) } } Function Variables Because JavaScript has first-order functions, we can also assign a function to a variable, i.e.:\nvar myFn = function(a, b) {return a + b;} var greetFn = greet; var otherFn = (a, b) =\u0026gt; {return a - b;} var oneMoreFn = giveMeAFunction(); Functional Scope We\u0026rsquo;ve mentioned scope several times now. Remember, scope simply refers to where a binding between a symbol and a value is valid (here the symbol could be a var or function name). JavaScript uses functional scope, which means a new scope is created within the body of every function. Moreover, the parent scope of that function remains accessible as well.\nConsider the JavaScript code:\nvar a = \u0026#34;foo\u0026#34;; var b = \u0026#34;bar\u0026#34;; console.log(\u0026#34;before coolStuff\u0026#34;, a, b); function coolStuff(c) { var a = 1; b = 4; console.log(\u0026#34;in coolStuff\u0026#34;, a, b, c); } coolStuff(b); console.log(\u0026#34;after coolStuff\u0026#34;, a, b); What gets printed before, in, and after coolStuff()?\nBefore we invoke coolStuff() the values of a and b are \u0026quot;foo\u0026quot; and \u0026quot;bar\u0026quot; respectively. Inside the body of coolStuff(): The named argument c is assigned the value passed when coolStuff() is invoked - in this case, the value of b at the time, \u0026quot;bar\u0026quot;. A new variable a is declared, and set to a value of 1. This a only exists within coolStuff(), the old a remains unchanged outside of the function body. The value of 4 is assigned to the variable b. Note that we did not declare a new var, so this is the same b as outside the body of the function. After the function is invoked, we go back to our original a which kept the value \u0026quot;foo\u0026quot; but our b was changed to 4. That may not seem to bad. But let\u0026rsquo;s try another example:\nvar a = 1; function one() { var a = 2; function two() { var a = 3; function three() { var a = 4; } three(); } } Here we have nested functions, each with its own scope, and its own variable a that exists for that scope.\nBlock Scope Most imperative programming langauges use block scope, which creates a new scope within any block of code. This includes function bodies, but also loop bodies and conditional blocks. Consider this snippet:\nfor(var i = 0; i \u0026lt; 10; i++) { var j = i; } console.log(j); What will be printed for the value of j after the loop runs?\nYou might think it should have been undefined, and it certainly would have been a null exception in an imperative language like Java, as the variable j was defined within the block of the for loop. Because those languages have block scope, anything declared within that scope only exists there.\nHowever, with JavaScript\u0026rsquo;s functional scope, a new scope is only created within the body of a function - not loop and conditional blocks! So anything created within a conditional block actually exists in the scope of the function it appears in. This can cause some headaches.\nTry running this (admittedly contrived) example in the console:\nfor(var i = 0; i \u0026lt; 10; i++) { setTimeout(function() { console.log(i); }, 10); } The setTimeout() will trigger the supplied function body 10 ms in the future.\nNotice how all the values are 10? That\u0026rsquo;s because we were accessing the same variable i, because it was in the same scope each time!\nThe keyword let was introduced in ES6 to bring block scope to JavaScript. If we use it instead, we see the behavior we\u0026rsquo;re more used to:\nfor(let i = 0; i \u0026lt; 10; i++) { setTimeout(function() { console.log(i); }, 10); } "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/6-accessibility/03-perceivable/",
	"title": "Perceivable Content",
	"tags": [],
	"description": "",
	"content": "What makes web content perceivable? Broadly speaking, the user must be able to see the content through one of their senses. We primarily think about this in terms of sight - the user should be able to see the content of the rendered page. But what we hear can also be a critical piece of perception.\nVision We often think of vision as the primary sense for engaging with web content - after all we read text and view pictures and videos. So where does perception through vision have potential issues?\nScreen Resolutions Let\u0026rsquo;s start by revisiting an idea we covered in Chapter 4, responsive design. When a website that does not use responsive design is viewed on a cell phone screen, it is rendered at a larger screen size, then scaled down to fit in the actual viewport. This helps preserve the layout of the page as it was designed, but also means the text is scaled too small to read, and the user must zoom in and pan to see it. Responsive design avoids this pitfall by using a more appropriate layout on a smaller screen.\nBrowser Zoom Most browsers also support zooming in and out using either a keyboard shortcut ([ctrl] + [+] to increase, or [ctrl] + [-] to decrease) or a menu option. This can make it easier to read (much like large-print books), but changes the viewport size much like described above. Thus, responsive websites work much better with browser zoom.l\nScreen Magnification This also reflect the experience of using a computer for many low-vision users. They often utilize magnification tools that are built into modern operating systems to zoom in on a section of the screen. Try it yourself using the tool available on your operating system:\nWindows Magnifier Mac Zoom Chromebook Magnifier Android Magnification iOS Magnifier You will likely find that while it makes a portion of the screen easier to see, you now must pan carefully to see the full content of a page. Keep this in mind as you consider complex layouts where text flows around elements. While they may be visually appealing at normal sizes, these disjunctions can be difficult to follow when using a magnification tool.\nColorblindness Colorblindness is a condition where a person cannot distinguish the difference between certain colors. It is a very common condition affecting 1 in 12 men, and 1 in 200 women. Broadly it is categorized into categories by what colors are difficult to perceive differences between:\nShades of red and green Shades of blue and yellow Any colors In addition, as eyes age the lenses yellow, which causes blue light to scatter when entering the eye. Older people may therefore have trouble distinguishing shades of blue, green, and violet. When using colors to convey meaning to your users, it is therefore a good idea to:\nUse strongly contrasting colors (i.e. opposites on the color wheel, along with highly contrasting shades) Provide an alternative method for communicating the meaning implied by color choices (i.e. use icons or words along with the color) Screen Readers A second important tool for the visually impaired is a screen reader - a program that reads the content of a screen. As with magnifier tools, screen readers are built into modern operating systems. Find yours and give it a try:\nWindows Narrator Mac Voiceover Chromebook ChromeVox Android TalkBack iOS Spoken Content Some important things to keep in mind for screen readers:\nImages should always have a descriptive alt attribute to describe what the image conveys. Table-based layouts (a staple of 90\u0026rsquo;s web development) are a bane for screen readers. Try using a screen reader to read the 1996 Space Jam Website - you\u0026rsquo;ll quickly see why that is a terrible idea. Tables should be reserved for tabular data. Interactive widgets constructed from DOM elements are largely ignored by screen readers, unless you\u0026rsquo;ve used ARIA tag attributes. Whenever possible, use the widgets that are part of standard HTML, as these will be read correctly. If not, make sure you use ARIA (we\u0026rsquo;ll discuss that soon). Likewise, elements like \u0026lt;div\u0026gt; don\u0026rsquo;t convey any kind of role to a screen reader. Consider using the semantic equivalents, i.e. \u0026lt;main\u0026gt; for main content, \u0026lt;aside\u0026gt; for sidebars, \u0026lt;nav\u0026gt; for navigation elements, etc. Otherwise, include aria-role attributes in your \u0026lt;div\u0026gt; elements. Labels and inputs need to be linked with the for attribute so that the screen reader associates the label with the right input. Audio Other content is delivered through sound - especially video and audio recordings. Video can (and should) be provided with the option of closed captioning. Audio and video both can have a script provided.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/0-forward/03-where-to-find-help/",
	"title": "Where to Find Help",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nResources K-State IT Help Desk - Email helpdesk@ksu.edu K-State Online Canvas Help Instructure Canvas Guides Codio Documentation Codio Support K-State Libraries K-State CS Support K-State CS Advising K-State Engineering Student Services K-State Office of Student Life K-State Report It Video Script As you work on the materials in this course, you may run into questions or problems and need assistance. This video reviews the various types of help available to you in this course.\nFirst and foremost, anytime you have a questions or need assistance in the Computational Core program, please send an email to the appropriate help group for this course. In this case, it would be cc120-help, or cc120-help@ksuemailprod.onmicrosoft.com. That email goes to the instructors and GTAs, and is your best chance to get a quick response. We\u0026rsquo;ll respond to your email within one business day.\nBeyond email, there are a few resources you should be aware of. First, if you have any issues working with K-State Canvas, K-State IT resources, or any other technology related to the delivery of the course, your first source of help is the K-State IT Helpdesk. They can easily be reached via email at helpdesk@ksu.edu. Beyond them, there are many online resources for using Canvas, all of which are linked in the resources section below the video. As a last resort, you may also want to email the help group, but in most cases we may simply redirect you to the K-State helpdesk for assistance.\nSimilarly, if you have any issues using the Codio platform, you are welcome to refer to their online documentation. Their support staff offers a quick and easy chat interface where you can ask questions and get feedback within a few minutes.\nIf you have issues with the technical content of the course, specifically related to completing the tutorials and projects, there are several resources available to you. First and foremost, make sure you consult the vast amount of material available in the course modules, including the links to resources. Usually, most answers you need can be found there.\nIf you are still stuck or unsure of where to go, the next best thing is to post your question as an email to the help group. As discussed earlier, the instructors and GTAs will do their best to help you as soon as they can.\nOf course, as another step you can always exercise your information-gathering skills and use online search tools such as Google to answer your question. While you are not allowed to search online for direct solutions to assignments or projects, you are more than welcome to use Google to access programming resources such as StackOverflow, language documentation, and other tutorials. I can definitely assure you that programmers working in industry are often using Google and other online resources to solve problems, so there is no reason why you shouldn\u0026rsquo;t start building that skill now.\nNext, we have grading and administrative issues. This could include problems or mistakes in the grade you received on a project, missing course resources, or any concerns you have regarding the course and the conduct of myself and your peers. Since this is an online course, you\u0026rsquo;ll be interacting with us on a variety of online platforms, and sometimes things happen that are inappropriate or offensive. There are lots of resources at K-State to help you with those situations. First and foremost, please email me directly as soon as possible and let me know about your concern, if it is appropriate for me to be involved. If not, or if you\u0026rsquo;d rather talk with someone other than me about your issue, I encourage you to contact either your academic advisor, the CS department staff, College of Engineering Student Services, or the K-State Office of Student Life. Finally, if you have any concerns that you feel should be reported to K-State, you can do so at https://www.k-state.edu/report/. That site also has links to a large number of resources at K-State that you can use when you need help.\nFinally, if you find any errors or omissions in the course content, or have suggestions for additional resources to include in the course, email the help group. There are some extra credit points available for helping to improve the course, so be on the lookout for anything that you feel could be changed or improved.\nSo, in summary, reviewing the existing course content should always be your first stop when you have a question or run into a problem, since most issues can be solved there. If you are still stuck, email cc410-help to ask for assistance, and we\u0026rsquo;ll get back to you within a business day. For issues with Canvas or Codio, you are also welcome to refer directly to the resources for those platforms. For grading questions and errors in the course content or any other issues, please email cc410-help or the instructors directly for assistance.\nOur goal in this program is to make sure that you have the resources available to you to be successful. Please don\u0026rsquo;t be afraid to take advantage of them and ask questions whenever you want.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/1-www/03-why-standards/",
	"title": "Why Standards?",
	"tags": [],
	"description": "",
	"content": "The Web Standards the W3C and ECMA International maintain are a critical piece of the web infrastructure. Having a standard for how HTML, CSS, and JavaScript should be interpreted by a web browser means that every browser can display the same webpage in the same way - allowing you the choice of your favorite browser without worrying your web browsing experience would be impacted.\nThis was not always the case; during the early days of the world-wide-web in a period known as the Browser Wars the browsers Netscape Navigator and Internet Explorer both added features to their browsers not defined in the standards, and web developers had to decide which browser to build against.\nEven after that point, Microsoft\u0026rsquo;s Internet Explorer did not adopt the full standards, forcing web developers to build their web pages to display in a standards-compliant browser (like Firefox, Chrome, or Safari), then modify their design to work within Internet Explorer. Thankfully, even Microsoft grew frustrated with maintaining the non-compliant Internet Explorer, and replaced it with Microsoft Edge.\nThe web standards also provide a mechanism for adding new features. The approach involves all stakeholders in the process, and allows browser manufacturers to add \u0026ldquo;experimental\u0026rdquo; features so that new ideas can be tried out before being adopted. In fact, browser manufacturers often adopt different approaches to a potential feature, allowing for a comparison before a final standard is adopted.\nWarning\nAll standards maintained by the W3C are voluntary - there is no mechanism to force a browser manufacturer to support a particular feature. Some features may take a long time to be adopted by all browsers, or may never be adopted. The MDN Web Docs offer a table with each feature identifying which version (if any) of the major web browsers have adopted the feature.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/04-applying-css-rules/",
	"title": "Applying CSS Rules",
	"tags": [],
	"description": "",
	"content": "There are multiple ways CSS rules can be applied to HTML elements. A document containing CSS rules can be attached to a HTML document with a \u0026lt;link\u0026gt; element, embedded directly into the html page with a \u0026lt;style\u0026gt; element, or applied directly to a HTML element with the style attribute. Let\u0026rsquo;s look at each option.\nLinked CSS Documents The \u0026lt;link\u0026gt; HTML element can be used to link the HTML page it appears in to a text file of CSS rules. These rules will then be applied to the HTML elements in the HTML document.\nThe \u0026lt;link\u0026gt; element should provide a hypertext reference attribute (href) providing a location for the linked document, and a relationship attribute (rel) describing the relationship between the HTML document and the stylesheet (hint: for a stylesheet the relationship is \u0026quot;stylesheet\u0026quot;). If either of these attributes is missing or invalid, the stylesheet\u0026rsquo;s rules will not be used.\nFor example, if the stylesheet is in the file styles.css, and our page is page.html, and both reside at the root of our website, the \u0026lt;link\u0026gt; element would be:\n\u0026lt;link href=\u0026quot;/styles.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot;/\u0026gt;\nBy placing our CSS rules in a separate file and linking them to where they are used, we can minimize code duplication. This approach also contributes to the separation of concerns. Thus, it is widely seen as a best practice for web development.\nThe \u0026lt;link\u0026gt; element should be declared within the \u0026lt;head\u0026gt; element.\nHTML \u0026lt;style\u0026gt; Element The \u0026lt;style\u0026gt; HTML element can be used to embed CSS rules directly in an HTML page. Its content is the CSS rules to be applied. The \u0026lt;style\u0026gt; element must be a child of a \u0026lt;head\u0026gt; or \u0026lt;body\u0026gt; element, though placing it into the \u0026lt;head\u0026gt; element is best practice.\nTo repeat our earlier efforts of making paragraphs have red text and green backgrounds with the \u0026lt;style\u0026gt; element:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Style Element Example\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; p { color: \u0026#39;red\u0026#39;; background-color: \u0026#39;green\u0026#39;; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Unlike the \u0026lt;link\u0026gt; element approach, CSS rules defined with the \u0026lt;style\u0026gt; element can only be used with one file - the one in which they are embedded. Thus, it can lead to code duplication. And embedding CSS rules in an HTML document also breaks the separation of concerns design principle.\nHowever, there are several use cases for which the \u0026lt;style\u0026gt; element is a good fit. Most obvious is a HTML page that is being distributed as a file, rather than hosted on a server. If the style information is embedded in that HTML file, the recipient only needs to receive the one file, rather than two. Similarly, emails with HTML bodies typically use a \u0026lt;style\u0026gt; element to add styling to the email body.\nThe HTML Element Style Attribute The style attribute of any HTML element can be used to apply CSS rules to that specific element. These rules are provided a string consisting of key/value pairs separated by semicolons. For example:\n\u0026lt;p\u0026gt;This is a normal paragraph.\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;color: orange; font-weight: bold\u0026#34;\u0026gt;But this one has inline styles applied to it.\u0026lt;/p\u0026gt; Produces this:\nThis is a normal paragraph.\nBut this one has inline styles applied to it.\nIt should be clear from a casual glance that inline styles will make your code more difficult to maintain, as your styling rules will be scattered throughout a HTML document, instead of collected into a \u0026lt;style\u0026gt; element or housed in a separate CSS file. And while inline styles can be used to selectively modify individual elements, CSS selectors (covered in the previous section) are typically a better approach.\nWhere inline styles make the most sense is when we manipulate the elements on the page directly using JavaScript. Also, the browser developer tools let us manipulate inline styles directly, which can be helpful when tweaking a design. Finally, some component-based design approaches (such as React) pivot the Separation of Concerns design principle to break a user interface into autonomous reusable components; in this approach content, style, and functionality are merged at the component level, making inline styles more appropriate.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/04-arrays-and-lists/",
	"title": "Arrays - Lists by Another Name",
	"tags": [],
	"description": "",
	"content": " CONSOLE You might have noticed we used an array in discussing the for .. in loop, but didn\u0026rsquo;t talk about it in our data type discussion. This is because in JavaScript, an array is not a primitive data type. Rather, it\u0026rsquo;s a special kind of object.\nThis is one of those aspects of JavaScript that breaks strongly with imperative languages. Brandon Eich drew heavily from Scheme, which is a functional language that focuses heavily on list processing\u0026hellip; and the JavaScript array actually has more to do with lists than it does arrays.\nDeclaring Arrays JavaScript arrays can be declared using literal syntax:\nvar arr = [1, \u0026#34;foo\u0026#34;, true, 3.2, null]; Notice how we can put any kind of data type into our array? We can also put an array in an array:\nvar arr2 = [arr, [1,3,4], [\u0026#34;foo\u0026#34;,\u0026#34;bar\u0026#34;]]; We can create the effect of an n-dimensional array, though in practice we\u0026rsquo;re creating what we call jagged arrays in computer science.\nClearly if we can do this, the JavaScript array is a very different beast than a Java or C# one.\nAccessing Array Values We can access an element in an array with bracket notation, i.e.:\nvar arr = [1, \u0026#34;foo\u0026#34;, true, 3.2, null]; console.log(arr[2]) will print true. We index arrays starting at 0, just as we are used to .\nBut what if we try accessing an index that is \u0026ldquo;out of bounds\u0026rdquo;? Try it:\nvar arr = [1,2,3,4]; console.log(arr[80]); We don\u0026rsquo;t get an exception, just an undefined, because that value doesn\u0026rsquo;t exist yet. Let\u0026rsquo;s take the same array and give it a value there:\narr[80] = 5; console.log(arr[80]); Now we see our value. But what about the values between arr[3] and arr[80]? If we try printing them, we\u0026rsquo;ll see a value of undefined. But remember how we said an array is a special kind of object? Let\u0026rsquo;s iterate over its keys and values with a for .. in loop:\nfor(key in arr) { console.log(`The index ${key} has value ${arr[key]}`); } Notice how we only print values for indices 0,1,2,3, and 80? The array is really just a special case of the object, using indices as property keys to store values. Everything in the array is effectively stored by reference\u0026hellip; which means all the rules we learned about optimizing array algorithms won\u0026rsquo;t apply here.\nArrays as Special-Purpose Data Structures You\u0026rsquo;ve also learned about a lot of specialty data structures in prior courses - stacks, queues, etc. Before you write one in JavaScript though, you may be interested to know that JavaScript arrays can emulate these with their built-in methods.\nStacks We push new elements to the top of the stack, and pop them off. The array methods push() and pop() duplicate this behavior by pushing and popping items from the end of the array.\nFIFO queues A first-in-first-out queue can be mimicked with the array methods push() and shift() which push new items to the end of the array and remove the first item, respectively.\nAnother useful method is unshift(), which adds a new element to the front of the array.\nMost data types you\u0026rsquo;ve learned about in prior courses can be emulated with some combination of JavaScript arrays and objects, including various flavors of trees, priority queues, and tries. Granted, these will not be as performant as their equivalents written in C, but they will serve for most web app needs.\nMap Reduce One of the most powerful patterns JavaScript adopted from list-processing languages is the map and reduce patterns. You may have heard of MapReduce in terms of Big Data - that is exactly these two patterns used in combination. Let\u0026rsquo;s examine how they are used in JavaScript.\nMap The basic idea of mapping is to process a list one element at a time, returning a new list containing the processed elements. In JavaScript, we implement it with the map() method of the array. It takes a function as an argument, which is invoked on each item in the array, and returns the newly processed array (the old array stays the same).\nThe function supplied to map() is supplied with three arguments - the item currently iterated, the index of the item in the array, and a reference to the original array. Of course, you don\u0026rsquo;t have to define your function with the second or third arguments.\nLet\u0026rsquo;s try a simple example:\nvar squares = [1,2,3,4].map((item) =\u0026gt; {return item * item}) This code squares each of the numbers in the array, and sets squares to have as a value the array of newly-created squares.\nNotice too how by passing a function into the map function, we create a new scope for each iteration? This is how JavaScript has long dealt with the challenge of functional scope - by using functions!\nReduce The reduce pattern also operates on a list, but it reduces the list to a single result. In JavaScript, it is implemented with the array\u0026rsquo;s reduce() method. The method takes two arguments - a reducer function and an initial accumulator value. Each time the reduce function iterates, it performs an operation on the currently iterated item and the accumulator. The accumulator is then passed forward to the next iteration, until it is returned at the end.\nThe function supplied to reduce has four arguments - the current accumulator value, the current iterated item, the item\u0026rsquo;s index, and the original array. As with map(), we can leave out the last two arguments if we don\u0026rsquo;t need to use them.\nA common example of reduce() in action is to sum an array:\nvar sum = [1, 2, 3, 4, 5].reduce((acc, item) =\u0026gt; {return acc + item}, 0); We supply the initial value of the accumulator as identity for addition, 0, and each iteration the current item in the array is added to it. At the end, the final value is returned.\nMapReduce And as we said before, MapReduce is a combination of the two, i.e. we can calculate the sum of squares by combining our two examples:\nvar sumOfSquares = [1,2,3,4,5].map((item) =\u0026gt; { return item * item }).reduce((acc, item) =\u0026gt; { return acc + item }); Notice how we invoked the map() function on the original array, and then invoked reduce() on the returned array? This is a syntax known as method chaining, which can make for concise code. We could also have assigned each result to a variable, and then invoked the next method on that variable.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/2-http/04-browser-requests/",
	"title": "Browser Requests",
	"tags": [],
	"description": "",
	"content": "Now that you are familiar with the network panel, let\u0026rsquo;s explore the primary kind of request you\u0026rsquo;re already used to making - requests originating from a browser. Every time you use a browser to browse the Internet, you are creating a series of HTTP (or HTTPS) requests that travel across the networks between you and a web server, which responds to your requests.\nWhen you type in an address in your browser (or click a hyperlink), this initiates a HTTP request against the server located at that address. Ideally, the request succeeds, and you are sent the webpage you requested. As the browser parses that webpage, it may also request additional resources linked in that page (such as images, CSS files, and JavaScript files).\nTo help illustrate how these requests are made, we\u0026rsquo;ll once again turn to our developer tools. Open the example page this link. On that tab, open your developer tools with CTRL + SHIFT + i or by right-clicking the page and selecting \u0026ldquo;Inspect\u0026rdquo; from the context menu. Then choose the \u0026ldquo;Network\u0026rdquo; tab:\nThe network tab displays details about each request the browser makes. Initially it will probably be empty, as it does not log requests while not open. Try refreshing the page - you should see it populate with information:\nThe first entry is the page itself - the HTML file. But then you should see entries for site.css, brazil.gif, fiber-4814456_960_720.jpg, jquery-3.5.1.slim.min.js, and site.js. Each of these entries represents an additional resource the browser fetched from the web in order to display the page.\nTake, for example, the two images brazil.gif and fiber-4814456_960_720.jpg. These correspond to \u0026lt;img\u0026gt; tags in the HTML file:\n\u0026lt;img alt=\u0026#34;Paper scene from the film Brazil\u0026#34; src=\u0026#34;brazil.gif\u0026#34;/\u0026gt; \u0026lt;img alt=\u0026#34;Fiber optic cables\u0026#34; src=\u0026#34;https://cdn.pixabay.com/photo/2020/02/03/00/12/fiber-4814456_960_720.jpg\u0026#34;/\u0026gt; The important takeaway here is that the image is requested separately from the HTML file. As the browser reads the page and encounters the \u0026lt;img\u0026gt; tag, it makes an additional request for the resource supplied in its src attribute. When that second request finishes, the downloaded image is added to the web page.\nNotice too that while one image was on our webserver, the other is retrieved from Pixabay.com\u0026rsquo;s server.\nYou can use the network tab to help debug issues with resources. Click on one of the requested resources, and it will open up details about the request:\nNotice that it reports the status code along with details about the request and response, and provides a preview of the requested resource.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/3-html/04-flow-model/",
	"title": "Flow Model",
	"tags": [],
	"description": "",
	"content": "Given that the role of HTML is markup, i.e. providing structure and formatting to text, HTML elements can broadly be categorized into two categories depending on how they affect the flow of text - inline and block.\nInline elements referred to elements that maintained the flow of text, i.e. the bring attention to (\u0026lt;b\u0026gt;) element used in a paragraph of text, would bold the text without breaking the flow:\n\u0026lt;p\u0026gt;The quick brown \u0026lt;b\u0026gt;fox\u0026lt;/b\u0026gt; lept over the log\u0026lt;/p\u0026gt;\nThe quick brown fox lept over the log\nIn contrast, block elements break the flow of text. For example, the \u0026lt;blockquote\u0026gt; element used to inject a quote into the middle of the same paragraph:\n\u0026lt;p\u0026gt;The quick brown fox \u0026lt;blockquote\u0026gt;What does the fox say? - YLVIS\u0026lt;/blockquote\u0026gt; lept over the log\u0026lt;/p\u0026gt;\nThe quick brown fox What does the fox say? - YLVIS lept over the log\nWhile HTML elements default to either block or inline behavior, this can be changed with the CSS display property.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/6-accessibility/04-operable/",
	"title": "Operable Content",
	"tags": [],
	"description": "",
	"content": "In short, the user should be able to interact effectively with your website. There are two primary tools we use to interact with websites - the mouse and the keyboard. Additionally, many assistive technologies mimic one or both of these.\nKeyboard-Only Control While most of us use a mouse as our primary control tool for working with any software, many users cannot use a mouse effectively. For these users, it is important that the entire web page can be controlled using the keyboard.\nTab Order An important mechanism for replacing mouse movement in a keyboard-only control scheme is the use of the [Tab] key to move focus to a particular element on the page. Try using your tab key on this page - you\u0026rsquo;ll notice that different interactive elements of the page are highlighted in turn (i.e. links, buttons, videos, inputs, etc.). Pressing [Enter] while a link is focused will follow the link. Pressing [Space] will start or stop a media element (video or audio).\nThe order that the [Tab] key moves through the elements on the page is known as the tab order, and generally will be in the order the elements appear on the page. However, this can be overridden in HTML by the setting the tabindex attribute. This attribute can also make an element that is not normally in the tab order (like a \u0026lt;p\u0026gt; tag, tabbable).\nAccessible Rich Internet Applications (ARIA) Many web applications utilize regular HTML elements to create interactive experiences. When these rely on vision and mouse interaction (for example, image carousels), they can be inaccessible for many people. The roles and attributes defined by ARIA seeks to provide a mechanism to allow these widgets to interact more effectively with assistive technologies.\nThey do this in two ways - through the use of roles (which describe the role of the element in the page) and through attributes (which convey information to assistive technologies).\nARIA Roles The roles describe the intent of an HTML tag that has no semantic meaning - i.e. a \u0026lt;div\u0026gt;. This can help convey through a screen reader what most users would deduce visually. For example, if we were displaying a math equation, we could use the math role:\n\u0026lt;div role=\u0026#34;math\u0026#34;\u0026gt; y = 1/2x + 3 \u0026lt;/div\u0026gt; Likewise, an image containing an equation could be labeled with the math role:\n\u0026lt;img src=\u0026#34;line-eq.png\u0026#34; alt=\u0026#34;The equation for the line y = 1/2x + 3\u0026#34; role=\u0026#34;math\u0026#34;\u0026gt; ARIA began as an extension to HTML, but many of its ideas have now been integrated directly into HTML through semantic equivalents.Where possible, use HTML5 equivalents, i.e.\narticle use \u0026lt;article\u0026gt; figure use \u0026lt;figure\u0026gt; img use \u0026lt;image\u0026gt; or \u0026lt;picture\u0026gt; main use \u0026lt;main\u0026gt; navigation use \u0026lt;nav\u0026gt; region use \u0026lt;section\u0026gt; You can find a complete list of roles and recommendations for using them in the MDN documentation.\nARIA Attributes ARIA attributes convey information to assistive technologies. For example, the aria-hidden attribute signals to assistive technologies that a particular element can be ignored by the assistive technology. Consider a product logo that appears in multiple locations on the page.\n\u0026lt;img src=\u0026#34;logo.png\u0026#34; alt=\u0026#34;logo\u0026#34; aria-hidden=\u0026#34;true\u0026#34;/\u0026gt; The aria-hidden here indicates to a screen reader that it does not need to call out to the viewer the existence of the logo.\nYou can find a full list of ARIA attributes in the MDN Documentation.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/1-www/04-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "This textbook will guide you through the three core client-side web technologies (HTML, CSS, \u0026amp; JS), as well as discuss the role HTTP plays in retrieving resources for a web client (like a browser) from the web. It is organized into chapters focused on each of those technologies in turn:\nThe World-Wide-Web Hyper-Text Transfer Protocol Hyper-Text Markup Language Cascading Style Sheets JavaScript Once you understand client-side web technologies, you may want to turn your attention to the server side. The follow up textbook to this one covers those topics: Full Stack Web Development\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/0-forward/04-what-youll-learn/",
	"title": "What You&#39;ll Learn",
	"tags": [],
	"description": "",
	"content": "Week \u0026amp; Topic The World Wide Web Web Pages and Browsers Basic CSS CSS Layouts Introduction to JavaScript JavaScript and the DOM Querying and Modifying the DOM Web Accessibility Working with Forms Making Requests with JavaScript CSS Animations Web Graphics Web Hosting JavaScript Libraries CSS Libraries "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/0-forward/05-textbooks/",
	"title": "Course Textbooks",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nThis course does not have a required print textbook. The resources presented in the modules are also organized into an online textbook that can be accessed here: https://ksu-cs-textbooks.github.io/cc120/. You may find this a useful reference if you prefer a traditional textbook layout. Additionally, since the textbook exists outside of Canvas\u0026rsquo; access control, you can continue to utilize it after the course ends.\nWarning\nPlease note that the materials presented in Canvas have additional graded assignments and exercises worked into the reading order that do not appear in the online edition of the textbook. You are responsible for completing these!\nCS Departmental Textbook Server The CC 120 course textbook is only one of several textbooks authored by your instructors and made available on the departmental server. For example, your CC 110 textbook is also available there for you to go back and review. You can access any of these textbooks at the site https://textbooks.cs.ksu.edu\nO\u0026rsquo;Riley for Higher Education If you are looking for additional resources to support your learning, a great resource that is available to Kansas State University students is the O\u0026rsquo;Riley For Higher Education digital library offered through the Kansas State University Library. These include electronic editions of thousands of popular textbooks as well as videos and tutorials. As of this writing, a search for HTML returns 29,226 results, CSS returns 9106 results, and JavaScript returns 19,015 results. In particular, I would recommend these books:\n\u0026ldquo;Secrets of the JavaScript Ninja\u0026rdquo; by John Resig and Bear Bibeault. There are likewise materials for other computer science topics you may have an interest in - it is a great resource for all your CS coursework. It costs you nothing (technically, your access was paid for by your tuition and fees), so you might as well make use of it!\nMDN Web Docs The MDN Web Dos is a collection of documentation and developer resources. It documents the web standards and discusses exactly how different browsers have implemented them. It is the official documentation source for the Mozilla browser AND for Google, Microsoft, and Samsung\u0026rsquo;s browsers.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/05-css-cascading/",
	"title": "CSS Cascade",
	"tags": [],
	"description": "",
	"content": "Now that we know how to create an apply CSS rules to our HTML, let\u0026rsquo;s explore how they actually are used. A core idea behind CSS is the cascade algorithm, the cascading in cascading style sheets (CSS). The core idea behind the cascade algorithm is that as the browser encounters and parses CSS rules, they are collectively applied to the elements they match with. If the same rule is set multiple times, say color, the cascading algorithm decides which should be applied.\nCSS Sources Before we look at how cascades work, we need to understand the sources of CSS rules. So far we\u0026rsquo;ve focused on CSS rules created by the author - that is, the developer of the website. But there are two other sources of CSS rules, the user-agent and the user.\nUser-Agent The term user-agent is the technical way of describing the browser (or other software) that is accessing the webpage. Most browsers define default styles for their browser that help differentiate them from other browsers. These default values work well for less-styled websites, but for a carefully designed user experience, an unexpected rule can wreak havoc.\nFor this reason, many websites use a special CSS file that overrides user-agent sheets to allow the website to start from a well-known state. This is possible because rules appearing in sheets defined by the author override those defined in user-agent sheets.\nAuthor The author is simply the creator of the webpage. Thus, rules included with the \u0026lt;link\u0026gt; or \u0026lt;style\u0026gt; elements, as well as in-line styles defined on the elements themselves with the style attribute, fall into this category. Author styles always override user-agent styles, and are overridden in turn by user styles.\nUser The user is the actual user of the browser, and they can add their own styles to an HTML document in a variety of ways. One that you may encounter the most is adding custom styles with the web developer tools. One that you may have not encountered, but is common in practice, are styles intended to make the website easier for the vision impaired to read and work with. Increasing or decreasing text size with [CTRL] + [+] or [CTRL] + [-] is a simple example of this kind of tool.\nCascading Order Thus, the general order of rules applied by the cascading algorithm is user-agent, author, user. However, there is also the !important directive that can be added to CSS rules, i.e.:\np { color: red !important } which escalates them to a higher pass. Also, CSS animations and transitions are evaluated at their own priority level. Thus, we have a cascade order of:\n\u0026nbsp; Origin Importance 1 user agent normal 2 user normal 3 author normal 4 animations \u0026nbsp; 5 author !important 6 user !important 7 user agent !important 8 transitions \u0026nbsp; A more thorough discussion of the Cascade Algorithm can be found in the MDN Documentation.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/05-objects-and-classes/",
	"title": "Objects and Classes",
	"tags": [],
	"description": "",
	"content": " CONSOLE JavaScript is also an object-oriented language, but the way it implements objects is derived from the ideas of the Self programming language, rather than the C++ origins of Java and C#\u0026rsquo;s object-oriented approaches.\nObject Properties Let\u0026rsquo;s start with what an object is in JavaScript. It\u0026rsquo;s basically a collection of properties - key/value pairs, similar to the concept of a Dictionary in other languages. The properties play both the role of fields and methods of the object, as a property can be assigned a primitive value or a function.\nWe\u0026rsquo;ve already seen how to create an object with literal syntax, but let\u0026rsquo;s see another example:\nvar bob = { name: \u0026#34;Bob\u0026#34;, age: 29, mother: { name: \u0026#34;Mary\u0026#34;, age: 53 } } Look at the property mother - it is its own object, nested within bob. Objects can nest as deep as we need them to (or at least, until we run out of memory).\nWe can then access properties with either dot notation or bracket notation, i.e.:\n// dot notation console.log(bob.name); console.log(bob.mother.name); bob.father = {name: \u0026#34;Mark\u0026#34;}; // bracket notation console.log(bob[\u0026#34;name\u0026#34;]); console.log(bob[\u0026#34;mother\u0026#34;][\u0026#34;name\u0026#34;]); bob[\u0026#34;father\u0026#34;] = {name: \u0026#34;Mark\u0026#34;} Property names should conform to JavaScript variable naming rules (start with a letter, $, or _, be composed of letters, numbers, $, and _, and contain no spaces) though we can use bracket notation to sidestep this:\nbob[\u0026#34;favorite thing\u0026#34;] = \u0026#34;macaroni\u0026#34;; However, if a property set with bracket notation does not conform to the naming rules, it cannot be accessed with dot notation. Other than that, you\u0026rsquo;re free to mix and match.\nYou can also use the value of a variable as a property name:\nvar field = \u0026#34;key\u0026#34;; var tricky = { [field]: 1 } console.lo(tricky.key); This is a handy trick when you need to set property names at runtime.\nConstructors A constructor in JavaScript is simply a function that is invoked with the keyword new. Inside the body of the function, we have access to a variable named this, which can have values assigned to it. Here is an example:\nfunction Bear(name) { this.name = name; } var pooh = new Bear(\u0026#34;pooh\u0026#34;); There is nothing that inherently distinguishes a constructor from any other function; we can use the new keyword with any function. However, it only makes sense to do so with functions intended to be used as constructors, and therefore JavaScript programmers have adopted the convention of starting function names intended to be used as constructors with a capital letter, and other functions with a lowercase one.\nObject Methods Methods are simply functions attached to the object as a property, which have access to the this (which refers back to the object) i.e.:\npooh.greet = function() { console.log(`My name is ${this.name}`); } We can also attach a method to all objects created with a constructor by attaching them to its prototype, i.e.:\nBear.prototype.growl = function() { console.log(`Grrr. My name is ${this.name} and I\u0026#39;ll eat you up!`) } Now we can invoke pooh.growl() and see the same message. If we create a few new Bear instances:\nvar smokey = new Bear(\u0026#34;Smokey\u0026#34;); var shardik = new Bear(\u0026#34;Shardik\u0026#34;); They also has access to the growl() method, but not greet(), because that was declared on the pooh instance, not the prototype.\nOf course, it doesn\u0026rsquo;t seem appropriate for Smokey the Bear to threaten to eat you. Let\u0026rsquo;s tweak his behavior:\nsmokey.growl = function() { console.log(\u0026#34;Only you can prevent forest fires!\u0026#34;); } Now try invoking:\nsmokey.growl(); shardik.growl(); pooh.growl(); Pooh and Shardick continue to growl menacingly, but Smokey warns us about the dangers of forest fires. This leads us to the topic of prototypes.\nObject Prototypes JavaScript adopts an approach to inheritance known as prototype-based programming, which works a bit differently than you\u0026rsquo;re used to.\nIn JavaScript, each object keeps a reference to its constructor (in fact, you can see this for our bears with pooh.constructor, smokey.constructor, etc.). Each constructor in turn has a prototype property, which is an object with methods and properties attached to it.\nWhen we invoke pooh.growl(), JavaScript first checks to see if the growl property is defined on the Bear instance we know as pooh. If not, then it checks the constructor\u0026rsquo;s prototype for the same property. If it exists, then it invokes it.\nInheritance in JavaScript takes the form of a prototype chain - as each prototype is an object, each prototype can have its own prototype in turn. Thus, when we invoke a method, the interpreter walks down this chain and invokes the first matching property found.\nECMA Script 2015 Class Syntax If you find this all confusing, don\u0026rsquo;t worry, you\u0026rsquo;re not alone. ECMAScript decided to introduce a new class syntax in the 2015 version (ES6). It will look a lot more familiar:\nclass Bear { constructor(name) { this.name = name; this.growl = this.growl.bind(this); } growl() { console.log(`Grrr! My name is ${this.name} and I\u0026#39;ll eat you!`); } } Here we\u0026rsquo;ve recreated our Bear class using the new syntax. We can construct a bear the same way, and invoke its growl() method:\nvar yogi = new Bear(\u0026#34;Yogi\u0026#34;); yogi.growl(); Method Binding Under the hood we\u0026rsquo;re still using the same prototypical inheritance, which throws a slight wrench in the works. Notice the line:\nthis.growl = this.growl.bind(this); in the constructor? This uses the function.prototype.bind method to bind the scope of the growl function to the this object of our class (remember, functions start a new scope, and a new scope means a new this object).\nSo remember when using ES6 class syntax, you need to bind your methods, or declare them in the constructor itself as arrow functions, i.e.:\nclass Bear { constructor(name) { this.name = name; this.growl = () =\u0026gt; { console.log(`Grrr! My name is ${this.name} and I\u0026#39;ll eat you!`); } } } As the arrow function declaration does not open a new scope, the this object doesn\u0026rsquo;t change, and refers to the bear instance.\nInheritance Specifying inheritance is also simplified. For example:\nclass Mammal { constructor() { this.hasFur = true; this.givesMilk = true; this.heartChambers = 4; } } class Bear extends Mammal { constructor(name) { super(); } } Remember to always invoke the parent constructor with super() as the first thing in your child class constructor.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/2-http/05-status-codes/",
	"title": "Status Codes",
	"tags": [],
	"description": "",
	"content": "A HTTP response includes a status code - a numeric code and a human-readable description. The codes themselves are 3-digit numbers, with the first number indicating a general category the response status falls into. Essentially, the status code indicates that the request is being fulfilled, or the reason it cannot be.\n1XX Status Codes Codes falling in the 100\u0026rsquo;s provide some kind of information, often in response to a HEAD or upgrade request. See the MDN Documentation for a full list.\n2XX Status Codes Codes in the 200\u0026rsquo;s indicate success in some form. These include:\n200 OK A status of 200 indicates the request was successful. This is by far the most common response.\n201 Created Issued in response to a successful POST request, indicates the resource POSTed to the server has been created.\n202 Accepted Indicates the request was received but not yet acted upon. This is used for batch-style processes. An example you may be familiar with is submitting a DARS report request - the DARS server, upon receiving one, adds it to a list of reports to process and then sends a 202 response indicating it was added to the list, and should be available at some future point.\nThere are additional 200 status codes. See the MDN Documentation for a full list.\n3XX Status Codes Codes in the 300\u0026rsquo;s indicate redirects. These should be used in conjunction with a Location response header to notify the user-agent where to redirect. The three most common are:\n301 Moved Permanently Indicates the requested resource is now permanently available at a different URI. The new URI should be provided in the response, and the user-agent may want to update bookmarks and caches.\n302 Found Also redirects the user to a different URI, but this redirect should be considered temporary and the original URI used for further requests.\n304 Not Modified Indicates the requested resource has not changed, and therefore the user-agent can use its cached version. By sending a 304, the server does not need to send a potentially large resource and consume unnecessary bandwidth.\nThere are additional 300 status codes. See the MDN Documentation for a full list.\n4XX Status Codes Codes in the 400\u0026rsquo;s indicate client errors. These center around badly formatted requests and authentication status.\n400 Bad Request is a request that is poorly formatted and cannot be understood.\n401 Unauthorized means the user has not been authenticated, and needs to log in.\n403 Forbidden means the user does not have permissions to access the requested resource.\n404 Not Found means the requested resource is not found on the server.\nThere are many additional 400 status codes. See the MDN Documentation for a full list.\n5XX Status Codes Status codes in the 500\u0026rsquo;s indicate server errors.\n500 Server Error is a generic code for \u0026ldquo;something went wrong in the server.\u0026rdquo;\n501 Not Implemented indicates the server does not know how to handle the request method.\n503 Service Unavailable indicates the server is not able to handle the request at the moment due to being down, overloaded, or some other temporary condition.\nThere are additional 500 status codes. See the MDN Documentation for a full list.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/3-html/05-tables/",
	"title": "Tables",
	"tags": [],
	"description": "",
	"content": "Tables were amongst the first addition to HTML (along with images), as they were necessary for the primary role of early HTML, disseminating research.\nA table requires a lot of elements to be nested in a specific manner. It is best expressed through an example:\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Role\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Darth Vader\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Antagonist\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Luke Skywalker\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Coming-of-age protagonist\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Princess Lea\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Heroic resistance fighter\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Obi-Wan Kenobi\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Wise old man\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Han Solo\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Likeable scoundrel\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Chewbacca\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;The muscle\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Threepio\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Comedic foil\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Artoo Deetoo\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Plot driver\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; It renders as:\nName Role Darth Vader Antagonist Luke Skywalker Coming-of-age protagonist Princess Lea Heroic resistance fighter Obi-Wan Kenobi Wise old man Han Solo Likeable scoundrel Chewbacca The muscle 3PO Comedic foil R2-D2 Plot driver Tables should only be used for displaying tabular data. There was a time, not long ago, when early web developers used them to create layouts by cutting images into segments and inserting them into table cells. This is very bad practice! It will not display as expected in all browsers, and wreaks havoc with screen readers for the visually impaired. Instead, pages should be laid out with CSS, as is discussed in the CSS layouts section.\nA far more detailed discussion of tables can be found in MDN\u0026rsquo;s guides.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/6-accessibility/05-understandable/",
	"title": "Understandable Content",
	"tags": [],
	"description": "",
	"content": "Understandable content means that the user can easily make sense of it. This clearly includes of reading and understanding the text of the page. You should strive to use proper grammar, correct spelling, and write to your audience\u0026rsquo;s expected reading level (or slightly below).\nBut this requirement also covers users understanding how to make use of interactive elements, especially graphical user interfaces. Making your content understandable benefits all users of your website, and is a staple to good web design.\nFinally, it also means that navigation, especially finding information on your website - should be clear and understandable. Universities are rightly criticized for having difficult-to navigate web sites. No doubt you\u0026rsquo;ve encountered this yourself.\nConsider that a staple how-to design manual for web development is titled \u0026ldquo;Don\u0026rsquo;t Make me Think\u0026rdquo;:\nTip\nNote that this book is available for free to K-State students through the O\u0026rsquo;Riley for Higher Education library. It would be an excellent resource for you to draw from!\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/06-attaching-scripts/",
	"title": "Attaching Scripts",
	"tags": [],
	"description": "",
	"content": "Much like there are multiple ways to apply CSS to a web app, there are multiple ways to bring JavaScript into one. We can use a \u0026lt;script\u0026gt; tag with a specified src attribute to load a separate document, put our code into the \u0026lt;script\u0026gt; tag directly, or even add code to attributes of an HTML element. Let\u0026rsquo;s look at each option.\nScript Tag with Source We can add a \u0026lt;script\u0026gt; tag with a src attribute that gives a url pointing to a JavaScript file. This is similar to how we used the \u0026lt;link\u0026gt; element for CSS:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;JS Example\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;example.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; A couple of important differences though. First, the \u0026lt;script\u0026gt; element is not a void tag, so we a closing \u0026lt;/script\u0026gt;. Also, while traditionally we would also place \u0026lt;script\u0026gt; elements in the \u0026lt;head\u0026gt;, current best practice is to place them as the last children of the \u0026lt;body\u0026gt; element.\nScript Tag with Content The reason the \u0026lt;script\u0026gt; element isn\u0026rsquo;t a void element is that you can place JavaScript code directly into it - similar to how we used the \u0026lt;style\u0026gt; element for CSS. Typically we would also place this tag at the end of the body:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;JS Example\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; console.log(1 + 3); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Why at the End of the Body? The reason for placing \u0026lt;script\u0026gt; tags at the end of the body is twofold. First, JavaScript files have grown increasingly large as web applications have become more sophisticated. And as they are parsed, there is no visible sign of this in the browser - so it can make your website appear to load more slowly when they are encountered in the \u0026lt;head\u0026gt; section. Second, JavaScript is interpreted as it is loaded - so if your code modifies part of the web page, and tries to do so before the webpage is fully loaded, it may fail.\nA good trick is to place any code that should not be run until all the web pages\u0026rsquo; assets have been downloaded within the body of an event handler tied to the 'load' event, i.e.\nwindow.addEventListener(\u0026#39;load\u0026#39;, function() { // Put any JavaScript that should not be // run until the page has finished loading // here.. }); As an Attribute A third alternative is to define our JavaScript as an on-event handler directly on an element. For example:\n\u0026lt;button onclick=\u0026#34;console.log(1+3)\u0026#34;\u0026gt;click me\u0026lt;/button\u0026gt; This once-common strategy has fallen out of favor as it does not provide for good separation of concerns, and can be difficult to maintain in large HTML files. Also, only one event handler can be set using this approach; we\u0026rsquo;ll see an alternative method, Element.addEventListener() in the next section that is more powerful.\nHowever, component-based development approaches like React\u0026rsquo;s JSX make this approach more sensible, so it has seen some resurgence in interest.\nMix-and-Match It is important to understand that all JavaScript on a page is interpreted within the same scope, regardless of what file it was loaded from. Thus, you can invoke a function in one file that was defined in a separate file - this is commonly done when incorporating JavaScript libraries like JQuery.\nWarning\nThere is one aspect you need to be aware of though. Before you reference code artifacts like functions and variables, they must have been loaded in the interpreter. If you are using external files, these have to be retrieved by the browser as a separate request, and even though they may be declared in order in your HTML, they may be received out of order, and they will be interpreted in the order they are received\nThere are a couple of strategies that can help here. First, you can use the window\u0026rsquo;s load event as we discussed above to avoid triggering any JavaScript execution until all the script files have been loaded. And second, we can combine all of our script files into one single file (a process known as concatenation). This is often done with a build tool that also minifies the resulting code. We\u0026rsquo;ll explore this strategy later in the course.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/06-css-specificity/",
	"title": "CSS Specificity",
	"tags": [],
	"description": "",
	"content": "But what about two rules that conflict that appear in the same level of the cascade order? For example, given the CSS:\np { color: black; } .warning { color: red; } what would the color of \u0026lt;p class=\u0026quot;warning\u0026quot;\u0026gt; be? You might say it would be red because the .warning CSS rules come after the p rules. And that would be true if the two rules had the same specificity. An example of that is:\np {color: black} p {color: red} Clearly the two selectors are equivalent, so the second color rule overrides the first. But what if we go back to our first example, but flip the rules?\n.warning { color: red; } p { color: black; } In this case, the color is still red, because .warning is more specific than p. This is the concept of specificity in CSS, which has an actual, calculable value.\nSpecificity Calculations The specificity of a selector increases by the type and number of selectors involved. In increasing value, these are:\nType selectors and pseudo-elements Class selectors, attribute selectors, and pseudo-classes ID selectors Each of these is trumped by in-line CSS rules, which can be thought of as the highest specificity. Thus, we can think of specificity as a 4-element tuple (A, B, C, D):\nWe can then calculate the values of A,B,C,D:\nCount 1 if the declaration is from a ‘style’ attribute (inline style) rather than a rule with a selector, 0 otherwise (= A). Count the number of IDs in the selector (= B). Count the number of Classes, attributes and pseudo-classes in the selector (= C). Count the number of Element names and pseudo-elements in the selector (= D). The !important Loophole Finally, there is an extra trick that we can use when we are having trouble creating enough specificity for a CSS rule. We can add !important to the rule declaration. For example:\np { color: red !important; } The !important rule overrides any other CSS declarations, effectively sidestepping specificity calculations. It should be avoided whenever possible (by making good use of specificity), but there are occasions it might be necessary.\nIf multiple rules use !important, then their priority is again determined by specificity amongst the group.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/3-html/06-forms/",
	"title": "Forms",
	"tags": [],
	"description": "",
	"content": "Forms were also amongst the first additions to the HTML standard, and provide the ability to submit data to a web server. A web form is composed of \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt;, \u0026lt;select\u0026gt; and similar elements nested within a \u0026lt;form\u0026gt; element.\nThe Form Element The form element primarily is used to organize input elements and specify how they should be submitted. In its simplest form, it is simply a tag that other elements are nested within:\n\u0026lt;form\u0026gt;\u0026lt;/form\u0026gt;\nHowever, it can be modified with a number of attributes:\naction The action attribute specifies the url that this form data should be sent to. By default, it is the page the form exists on (i.e. if the form appears on http://foo.com/bar, then it will submit to http://foo.com/bar). The url can be relative to the current page, absolute, or even on a different webserver. See the discussion of URLs in the HTTP section.\nenctype The enctype attribute specifies the format that form data will be submitted in. The most common values are application/x-www-form-urlencoded (the default), which serializes the key/value pairs using the urlencoding strategy, and multipart/form-data, which uses the multipart encoding scheme, and can interweave binary (file) data into the submission. These encoding strategies are discussed more thoroughly in the chapter on submitting form data.\nmethod The method attribute specifies the HTTP method used to submit the form. The values are usually GET or POST. If the method is not specified, it will be a GET request.\ntarget The target attribute specifies how the server response to the form submission will be displayed. By default, it loads in the current frame (the _self) value. A value of _blank will load the response in a new tab. If \u0026lt;iframe\u0026gt; elements are being used, there are additional values that work within \u0026lt;iframe\u0026gt; sets.\nThe Input Element Most inputs in a form are variations of the \u0026lt;input\u0026gt; element, specified with the type attribute. Many additional specific types were introduced in the HTML5 specification, and may not be available in older browsers (in which case, they will be rendered as a text type input). Currently available types are (an asterisk indicate a HTML5-defined type):\nbutton: A push button with no default behavior. checkbox: A check box allowing single values to be selected/deselected. It has an extra attributed checked, which is a boolean specifying if it is checked. color*: A control for specifying a color. date*: A control for entering a date (year, month, and day, with no time). datetime-local*: A control for entering a date and time, with no time zone. email: HTML5 A field for editing an e-mail address. file: A control that lets the user select a file. Use the accept attribute to define the types of files that the control can select. hidden: A control that is not displayed but whose value is submitted to the server. image: A graphical submit button. You must use the src attribute to define the source of the image and the alt attribute to define alternative text. You can use the height and width attributes to define the size of the image in pixels. month*: A control for entering a month and year, with no time zone. number*: A control for entering a number. password: A single-line text field whose value is obscured. radio: A radio button, allowing a single value to be selected out of multiple choices. range*: A control for entering a number whose exact value is not important. reset: A button that resets the contents of the form to default values. search*: A single-line text field for entering search strings. Line-breaks are automatically removed from the input value. submit: A button that submits the form. tel*: A control for entering a telephone number. text: A single-line text field. Line-breaks are automatically removed from the input value. time*: A control for entering a time value with no time zone. url*: A field for entering a URL. week*: A control for entering a date consisting of a week-year number and a week number with no time zone. In addition to the type attribute, some other commonly used input attributes are:\nname The name of the attribute, which is used to identify the submitted value (the name and value attributes define a key/value pair) value The input\u0026rsquo;s current value placeholder A string to display in the input until a value is entered (typically used as a prompt). The placeholder is never submitted as a value. readonly A boolean attribute that when true, indicates the input value cannot be changed required A boolean value indicating that the input is required to have a value before it can be submitted. tabindex Indicates the order in which inputs can be reached by hitting the tab key. For dense input forms, this can be important. disabled A boolean value that when true, means the input is disabled (does not submit a value, cannot be interacted with, and is grayed out) Other \u0026ldquo;Input\u0026rdquo; Elements In addition to the \u0026lt;input\u0026gt; element, some other elements exist that provide input-type functionality within a form, and implement the same attributes as an \u0026lt;input\u0026gt;. These are:\nTextarea The \u0026lt;textarea\u0026gt; element provides a method for entering larger chunks of text than a \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; does. Most importantly, it preserves line-breaks (the \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; removes them). Instead of using the value attribute, the current value appears inside the opening and closing tags, i.e.:\n\u0026lt;textarea name=\u0026#34;exampleText\u0026#34;\u0026gt; This text is displayed within the textarea \u0026lt;/textarea\u0026gt; In addition, the rows and cols attribute can be used to specify the size of the textarea in characters.\nSelect The \u0026lt;select\u0026gt; element allows you to define a drop-down list. It can contain as children, \u0026lt;option\u0026gt; and \u0026lt;optgroup\u0026gt; elements. The \u0026lt;select\u0026gt; element should have its name attribute specified, and each \u0026lt;option\u0026gt; element should have a unique value attribute. The selected \u0026lt;option\u0026gt;\u0026rsquo;s value is then submitted with the \u0026lt;select\u0026gt;\u0026rsquo;s name as a key/value pair.\nEach \u0026lt;select\u0026gt; element should also have a closing tag, and its child text is what is displayed to the user.\nThe \u0026lt;optgroup\u0026gt; provides a way of nesting \u0026lt;option\u0026gt; elements under a category identifier (a label attribute specified on the \u0026lt;optgroup\u0026gt;).\nAn example \u0026lt;select\u0026gt; using these features is:\n\u0026lt;select name=\u0026#34;headgear\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;none\u0026#34;\u0026gt;None\u0026lt;/option\u0026gt; \u0026lt;optgroup label=\u0026#34;Hats\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;ball cap\u0026#34;\u0026gt;Ball Cap\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;derby\u0026#34;\u0026gt;Derby\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;fedora\u0026#34;\u0026gt;Fedora\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;optgroup value=\u0026#34;Ceremonial\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;crown\u0026#34;\u0026gt;Crown\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;mitre\u0026#34;\u0026gt;Mitre\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;war bonnet\u0026#34;\u0026gt;War Bonnet\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;/select\u0026gt; Finally, multiple selections can be allowed by specifying a multiple attribute as true.\nLabels In addition to inputs, a \u0026lt;form\u0026gt; often uses \u0026lt;label\u0026gt; elements to help identify the inputs and their function. A label will typically have its for attribute set to match the name attribute of the \u0026lt;input\u0026gt; it corresponds to. When connected in this fashion, clicking the label will give focus to the input. Also, when the \u0026lt;input type=\u0026quot;checkbox\u0026quot;\u0026gt;, clicking the label will also toggle the checked attribute of the checkbox.\nFieldsets Finally, the \u0026lt;fieldset\u0026gt; element can be used to organize controls and labels into a single subcontainer within the form. Much like \u0026lt;div\u0026gt; elements, this can be used to apply specific styles to the contained elements.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/0-forward/06-plagiarism/",
	"title": "Plagiarism Policy",
	"tags": [],
	"description": "",
	"content": " Web Only\nThis textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.\nResources K-State Honor \u0026amp; Integrity System Video Script \u0026ldquo;On my honor, as a student, I have neither given nor received unauthorized aid on this academic work.\u0026rdquo; - K-State Honor Pledge\nPlagiarism is a very serious concern in this course, and something that we do not take lightly. Computer programs and code are especially easy targets for plagiarism due to how easy it is to copy and manipulate code in such a way that it is unrecognizable as the original source but still performs correctly.\nAt its core, plagiarism is taking someone else\u0026rsquo;s work and passing it off as your own without giving appropriate credit to the original source. As a student at K-State, you are bound by the K-State Honor Code not to accept any unauthorized aid, and this includes plagiarized code.\nWhen it comes to plagiarism in computer code, there is a fine line between using resources appropriately and copying code. In this program, you should strive to avoid plagiarism issues by doing the following:\nDo not search for or use any complete solutions to projects in this course found online or from fellow students. Small portions of code may be used or adapted from an online source with proper citation. To cite a piece of code, include a code comment section above it that contains the original source URL and a description of why it was used. In general, copying or adapting small pieces of code to perform auxiliary functions in the assignment is permitted. Copying or adapting code that is the general goal of the assignment should be avoided. For example, if the assignment is to create a bubble sort algorithm, you should write the algorithm from scratch yourself since that is the goal of the assignment. If the assignment is to create a program for displaying data that you feel should be sorted, you may choose to adapt an existing sorting algorithm for your needs (or use one from a library).\nIf you aren\u0026rsquo;t sure about whether it is OK to use an online resource or piece of code in this course, please contact the instructors using the course discussion forums or help email address. You will not get in trouble for asking, and it will help you determine what the best course of action is. Plagiarism can really only occur when you submit the assignment for grading, so you are welcome to ask for clarification or a judgement on whether a particular usage is acceptable at any time before you submit the assignment.\nCodio has features that will compare your submissions against those of your fellow students. Any submissions with a high degree of similarity may be subjected to additional scrutiny by the instructors to determine if plagiarism has occurred.\nIn this course, any violation of the K-State Honor Code will result in a 0 on that assignment and a report made to the K-State Honor Council. A second violation will result in an XF in this course, as well as any additional sanctions imposed by the K-State Honor Council.\nFor more information on the K-State Honor \u0026amp; Integrity system, please visit their website, which is linked in the resources section below this video.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/2-http/06-request-methods/",
	"title": "Request Methods",
	"tags": [],
	"description": "",
	"content": "When a web client like a browser makes a request, it must specify the request method, indicating what kind of request this is (sometimes we refer to the method as a HTTP Verb).\nThe two most common are GET and POST requests, as these are typically the only kinds supported by browsers. Other request methods include PUT, PATCH, and DELETE, which are typically used by other kinds of web clients. We\u0026rsquo;ll focus on just GET and POST requests here.\nGET A GET request seeks to retrieve a specific resource from the web server - often an HTML document or binary file. GET requests typically have no body and are simply used to retrieve data. If the request is successful, the response will typically provide the requested resource in its body.\nPOST The POST request submits an entity to the resource, i.e. uploading a file or form data. It typically will have a body, which is the upload or form.\nInfo\nYou can learn about other HTTP Methods in the MDN Web Docs. HTTP Methods are defined in W3C\u0026rsquo;s RFC2616.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/6-accessibility/06-robust/",
	"title": "Robust Content",
	"tags": [],
	"description": "",
	"content": "Finally, content should be able to be accessible even as technology advances. A robust website will continue to function well into the future. This is best done by following the existing accessibility standards.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/3-html/07-common-html-elements/",
	"title": "Common HTML Elements",
	"tags": [],
	"description": "",
	"content": "This page details some of the most commonly used HTML elements. For a full reference, see MDN\u0026rsquo;s HTML Element Reference.\nDocument-Level Elements These elements describe the basic structure of the HTML document.\n\u0026lt;html\u0026gt; The \u0026lt;html\u0026gt; element contains the entire HTML document. It should have exactly two children, the \u0026lt;head\u0026gt; and the \u0026lt;body\u0026gt; elements, appearing in that order.\n\u0026lt;head\u0026gt; The \u0026lt;head\u0026gt; element contains any metadata describing the document. The most common children elements are \u0026lt;title\u0026gt;, \u0026lt;meta\u0026gt;, and \u0026lt;link\u0026gt;.\n\u0026lt;body\u0026gt; The \u0026lt;body\u0026gt; element should be the second child of the \u0026lt;html\u0026gt; element. It contains the actual rendered content of the page, typically as nested HTML elements and text. Elements that appear in the body can define structure, organize content, embed media, and play many other roles.\nMetadata Elements These elements add properties to the document.\n\u0026lt;link\u0026gt; The \u0026lt;link\u0026gt; element links to an external resource using the href attribute and defines that resource\u0026rsquo;s relationship with the document with the rel attibute.\nThis is most commonly used to link a stylesheet which will modify how the page is rendered by the browser (see the chapter on CSS). A stylesheet link takes the form:\n\u0026lt;link href=\u0026quot;path-to-stylesheet.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot;/\u0026gt;\nIt can also be used to link a favicon (the icon that appears on your browser tab):\n\u0026lt;link rel=\u0026quot;icon\u0026quot; type=\u0026quot;image/x-icon\u0026quot; href=\u0026quot;http://example.com/favicon.ico\u0026quot; /\u0026gt;\n\u0026lt;meta\u0026gt; The \u0026lt;meta\u0026gt; elements is used to describe metadata not covered by other elements. In the early days, its most common use was to list keywords for the website for search engines to use:\n\u0026lt;meta keywords=\u0026quot;html html5 web development webdev\u0026quot;/\u0026gt;\nHowever, this was greatly abused and search engines have stopped relying on them. One of the most common uses today is to set the viewport to the size of the rendering device for responsive design (see the chapter on responsive design):\n\u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt;\nAlso, best practice is to author HTML documents in utf-8 character format and specify that encoding with a metadata tag with the charset attribute:\n\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\n\u0026lt;style\u0026gt; The style element allows for embedding CSS text directly into the head section of the HTML page. The Separation of Concerns discussion discusses the appropriateness of using this approach.\n\u0026lt;title\u0026gt; The \u0026lt;title\u0026gt; element should only appear once in the \u0026lt;head\u0026gt; element, and its content should be text (no HTML elements). It specifies the title of the document. In modern browsers, the title is displayed on the browser tab displaying the document. In earlier browsers, it would appear in the window title bar.\nSectioning Elements Many HTML Elements help define the structure of the document by breaking it into sections. These are intended to hold other elements and text. These elements are block type elements.\nheadings The \u0026lt;h1\u0026gt;, \u0026lt;h2\u0026gt;, \u0026lt;h3\u0026gt;, \u0026lt;h4\u0026gt;, \u0026lt;h5\u0026gt;, and \u0026lt;h6\u0026gt; elements are headings and subheadings with six possible levels of nesting. They are used to enclose the title of the section.\n\u0026lt;main\u0026gt; A \u0026lt;main\u0026gt; element identifies the content most central in the page. There should be only one per page (or, if multiple main elements are used, the others should have their visible attribute set to false).\n\u0026lt;aside \u0026gt; An \u0026lt;aside\u0026gt; element identifies content separate from the main focus of the page. It can be used for callouts, advertisements, and the like.\n\u0026lt;article\u0026gt; An \u0026lt;article\u0026gt; element identifies a stand-alone piece of content. Unlike an aside, it is intended for syndication (reprinting) in other forms.\n\u0026lt;header\u0026gt; The \u0026lt;header\u0026gt; element identifies a header for the page, often containing the site banner, navigation, etc.\n\u0026lt;footer\u0026gt; The \u0026lt;footer\u0026gt; element identifies a footer for the page, often containing copyright and contact information.\n\u0026lt;nav\u0026gt; The \u0026lt;nav\u0026gt; element typically contains navigation links and/or menus.\n\u0026lt;section\u0026gt; A \u0026lt;section\u0026gt; element is a general-purpose container for sectioning a page where a more specific container does not make sense.\nText Content These HTML elements are used to organize text content. Each of these is a block element, meaning it breaks up the flow of text on the page.\n\u0026lt;blockquote\u0026gt; The \u0026lt;blockquote\u0026gt; is used to contain a long quotation.\n\u0026lt;figure\u0026gt; The \u0026lt;figure\u0026gt; is used to contain a figure (typically a \u0026lt;img\u0026gt; or other media element).\n\u0026lt;figcaption\u0026gt; The \u0026lt;figcaption\u0026gt; provides a caption for a figure\n\u0026lt;hr\u0026gt; The \u0026lt;hr\u0026gt; provides a horizontal rule (line) to separate text.\nlists There are three types of lists available in HTML, ordered, unordered, and definition. Ordered lists number their contents, and consist of list item elements (\u0026lt;li\u0026gt;) nested in an ordered list element (\u0026lt;ol\u0026gt;). Unordered lists are bulleted, and consist of list item elements (\u0026lt;li\u0026gt;) nested in an unordered list element (\u0026lt;ul\u0026gt;). List items can contain any kind of HTML elements, not just text.\nDefinition lists nest a definition term (\u0026lt;dt\u0026gt;) and its corresponding definition (\u0026lt;dd\u0026gt;) inside a definition list (\u0026lt;dl\u0026gt;) element. While rarely used, they can be handy when you want to provide lists of definitions (as in a glossary) in a way a search engine will recognize.\n\u0026lt;div\u0026gt; The \u0026lt;div\u0026gt; element provides a wrapper around text content that is normally used to attach styles to.\n\u0026lt;pre\u0026gt; The \u0026lt;pre\u0026gt; tag informs the browser that its content has been preformatted, and its contents should be displayed exactly as written (i.e. whitespace is respected, and angle brackets (\u0026lt;\u0026gt;) are rendered rather than interpreted as HTML. It is often used in conjunction with a \u0026lt;code\u0026gt; element to display source code within a webpage.\nInline Text Elements The following elements modify nested text while maintaining the flow of the page. As the name suggests, these are inline type elements.\n\u0026lt;a\u0026gt; The \u0026lt;a\u0026gt; anchor element is used to link to another document on the web (i.e. \u0026lsquo;anchoring\u0026rsquo; it). This element is what makes HTML hyper-text, so clearly it is important. It should always have a source (src) attribute defined (use \u0026quot;#\u0026quot; if you are overriding its behavior with JavaScript).\ntext callouts A number of elements seek to draw specific attention to a snippet of text, including \u0026lt;strong\u0026gt;, \u0026lt;mark\u0026gt;, \u0026lt;em\u0026gt;, \u0026lt;b\u0026gt;, \u0026lt;i\u0026gt;\n\u0026lt;strong\u0026gt; The \u0026lt;strong\u0026gt; element indicates the text is important in some way. Typically browsers will render its contents in boldface.\n\u0026lt;em\u0026gt; The \u0026lt;em\u0026gt; element indicates stress emphasis on the text. Typically a browser will render it in italics.\n\u0026lt;mark\u0026gt; The \u0026lt;mark\u0026gt; element indicates text of specific relevance. Typically the text appears highlighted.\n\u0026lt;b\u0026gt; The bring to attention element (\u0026lt;b\u0026gt;) strives to bring attention to the text. It lacks the semantic meaning of the other callouts, and typically is rendered as boldface (in early versions of HTML, it referred to bold).\n\u0026lt;i\u0026gt; The \u0026lt;i\u0026gt; element sets off the contained text for some reason other than emphasis. It typically renders as italic (in early versions of HTML, the i referred to italics).\n\u0026lt;br\u0026gt; The break element (\u0026lt;br\u0026gt;) inserts a line break into the text. This is important as all whitespace in the text of an HTML document is collapsed into a single space when interpreted by a browser.\n\u0026lt;code\u0026gt; The \u0026lt;code\u0026gt; element indicates the contained text is computer code.\n\u0026lt;span\u0026gt; The \u0026lt;span\u0026gt; element is the inline equivalent of the \u0026lt;div\u0026gt; element; it is used primarily to attach CSS rules to nested content.\nMedia Elements A number of elements bring media into the page.\n\u0026lt;img\u0026gt; The \u0026lt;img\u0026gt; element represents an image. It should have a source (src) attribute defined, consisting of a URL where the image data can be retrieved, and an alternative text (alt) attribute with text to be displayed when the image cannot be loaded or when the element is read by a screen reader.\n\u0026lt;audio\u0026gt; The \u0026lt;audio\u0026gt; element represents audio data. It should also have a source (src) attribute to provide the location of the video data. Alternatively, it can contain multiple \u0026lt;source\u0026gt; elements defining alternative forms of the video data.\n\u0026lt;video\u0026gt; The \u0026lt;video\u0026gt; element represents a video. It should also have a source (src) attribute to provide the location of the video data. Alternatively, it can contain multiple \u0026lt;source\u0026gt; elements defining alternative forms of the audio data.\n\u0026lt;source\u0026gt; The \u0026lt;source\u0026gt; element specifies one form of multimedia data, and should be nested inside a \u0026lt;video\u0026gt; or \u0026lt;audio\u0026gt; element. Providing multiple sources in this way allows the browser to use the first one it understands (as most browsers do not support all possible media formats, this allows you to serve the broadest possible audience). Each \u0026lt;source\u0026gt; element should have a source attribute (src) defining where its multimedia data can be located, as well as a type attribute defining what format the data is in.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/07-css-units/",
	"title": "CSS Units",
	"tags": [],
	"description": "",
	"content": "When specifying CSS rules, you often need to provide a unit of measurement. Any time you provide a measurement in a CSS rule, you must provide the units that measurement is being expressed in, following the value. For example:\n#banner { width: 300px; } sets the width of the element with id banner to 300 pixels.\nThere are actually a lot of units available in CSS, and we\u0026rsquo;ll summarize the most common in this section.\nUnits of Absolute Size Absolute units don\u0026rsquo;t change their size in relation to other settings, hence the name. The most common one encountered is pixels, which are expressed with the abbreviation px.\nOther absolute measurements include:\nq, mm, cm, in which are quarter-millimeters, millimeters, centimeters, and inches. These are rarely used outside of rules applied when printing websites.\npt, pc which are points and picas, common units of measurement within the publishing industry.\nUnits of Relative Size Relative units are based on (relative to) the font-size property of the element, the viewport size, or grid container sizes. These are expressed as proportions of the units they are relative to, i.e.\n.column { width: 30vw; } sets columns to be 30% of the width of the viewport.\nUnits Relative to Font Size Setting dimensions of borders, padding, and margins using units relative to font sizes can help make these appear consistent at different resolutions. Consider a margin of 70px - it might make sense on a screen 1024 pixels wide, but on a phone screen 300 pixels wide, nearly half the available space would be margins!\nUnits that are relative to the font-size include:\nem one em is the font-size of the current element (which may be inherited from a parent). rem is same measurement as em, but disregards inherited font sizes. Thus, it is more consistent with intent than em, and is largely displacing its use (though it is not supported in older versions of Internet Explorer). Units Relative to Viewport Size The units vh and vw refer to 1/100th the height of the viewport (the size of the screen space the page can appear within).\nIt may be helpful to think of these as the percentage of the viewport width and viewport height, and they work much like percentages. However, in specifying heights, the vh will always set the height of an element, unlike %.\nFraction Units The Grid model introduced the fraction (fr) unit, which is a fraction of the available space in a grid, after subtracting gutters and items sized in other units. See the discussion of the CSS Grid Model or CSS Tricks\u0026rsquo; A Complete Guide to Grid for more details.\nPercentage Units You can also specify percentages (%) for many properties, which are typically interpreted as a percentage of the parent element\u0026rsquo;s width or height. For example:\n.column { width: 33%; } sets elements with the class column to be 33% the width of their parent element. Similarly:\n.row { height: 20%; } sets elements with a class row to be 20% the height of their parent element.\nIf the parent does not have an explicit width, the width of the next ancestor with a supplied width is used instead, and if no ancestor has a set width, that of the viewport is used. The same is almost true of the height; however, if no elements have a specified height, then the percentage value is ignored - the element is sized according to its contents, as would be the case with height: auto.\nTip\nOne of the most frustrating lessons beginning HTML authors must learn is the difference in how width and height are handled when laying out a webpage. Using the percentage unit (%) to set the height almost never accomplishes the goal you have in mind - it only works if the containing element has a set height.\nWhile there are hacky techniques that can help, they only offer partial solutions. It is usually best not to fight the design of HTML, and adopt layouts that can flow down the page rather than have a height determined at render time.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/6-accessibility/07-dev-tools/",
	"title": "Development Tools",
	"tags": [],
	"description": "",
	"content": "Just as you can use W3C\u0026rsquo;s validator to help validate your HTML, tools exist to help evaluate the accessibility of your websites. The easiest of these are integrated into the developer tools of your browser. The following video covers using Chrome developer tools to address accessibility bugs:\nWe\u0026rsquo;ve also talked about Screen Readers and Magnifiers, which are typically integrated into your operating system. You can use these to experience your web page the same way a disabled user might.\nSimilarly, a colorblindness simulator can alter the colors in your screen to simulate what a colorblind person might see. A good example is Color Oracle, a free and open-source tool that runs on Windows, Mac, and Linux.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/2-http/07-request-headers/",
	"title": "Request Headers",
	"tags": [],
	"description": "",
	"content": "Request headers take the form of key-value pairs, and represent specific aspects of the request. For example:\nAccept-Encoding: gzip Indicates that the browser knows how to accepted content compressed in the Gzip format.\nNote that request headers are a subset of message headers that apply specifically to requests. There are also message headers that apply only to HTTP responses, and some that apply to both.\nAs HTTP is intended as an extensible protocol, there are a lot of potential headers. IANA maintains the offical list of message headers as well as a list of proposed message headers. You can also find a categorized list in the MDN Documentation\nWhile there are many possible request headers, some of the more commonly used are:\nAccept Specifies the types a server can send back, its value is a MIME type.\nAccept-Charset Specifies the character set a browser understands.\nAccept-Encoding Informs the server about encoding algorithms the client can process (most typically compression types)\nAccept-Language Hints to the server what language content should be sent in.\nAuthorization Supplies credentials to authenticate the user to the server. Will be covered in the authentication chapter.\nContent-Length The length of the request body sent, in octets\nContent-Type The MIME type of the request body\nContent-Encoding The encoding method of the request body\nCookie Sends a site cookie - see the section on cookies later\nUser-Agent A string identifying the agent making the request (typically a browser name and version)\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/07-the-dom/",
	"title": "The Document Object Model",
	"tags": [],
	"description": "",
	"content": "Now that we\u0026rsquo;ve reviewed the basic syntax and structure of the JavaScript language, and how to load it into a page, we can turn our attention to what it was created for - to interact with web pages in the browser. This leads us to the Document Object Model (DOM).\nThe DOM is a tree-like structure that is created by the browser when it parses the HTML page. Then, as CSS rules are interpreted and applied, they are attached to the individual nodes of the tree. Finally, as the page\u0026rsquo;s JavaScript executes, it may modify the tree structure and node properties. The browser uses this structure and properties as part of its rendering process.\nThe Document Instance The DOM is exposed to JavaScript through an instance of the Document class, which is attached to the document property of the window (in the browser, the window is the top-level, a.k.a global scope. Its properties can be accessed with our without referencing the window object, i.e. window.document and document refer to the same object).\nThis document instance serves as the entry point for working with the DOM.\nThe Dom Tree The DOM tree nodes are instances of the Element class, which extends from the Node class, which in turn extends the EventTarget class. This inheritance chain reflects the Separation of Concerns design principle: the EventTarget class provides the functionality for responding to events, the Node class provides for managing and traversing the tree structure, and the Element class maintains the element\u0026rsquo;s appearance and properties.\nEventTargetNodeElement Selecting Elements on the Page One of the most important skills in working with the DOM is understanding how to get a reference to an element on the page. There are many approaches, but some of the most common are:\nSelecting an Element by its ID If an element has an id attribute, we can select it with the Document.getElementByID() method. Let\u0026rsquo;s select our button this way. Add this code to your playground.js file:\nvar button = document.getElementById(\u0026#34;some-button\u0026#34;); console.log(button); You should see the line [object HTMLButtonElement] - the actual instance of the DOM node representing our button (the class HTMLButtonElement is an extension of Element representing a button).\nSelecting a Single Element by CSS Selector While there are additional selectors for selecting by tag name, class name(s), and other attributes, in practice these have largely been displaced by functions that select elements using a CSS selector.\nDocument.querySelector() will return the first element matching the CSS selector, i.e.:\nvar button = document.querySelector(\u0026#39;#some-button\u0026#39;); Works exactly like the document.getElementById() example. But we could also do:\nvar input = document.querySelector(\u0026#39;input[type=text]\u0026#39;); Which would grab the first \u0026lt;input\u0026gt; with attribute type=text.\nSelecting Multiple Elements by CSS Selector But what if we wanted to select more than one element at a time? Enter document.querySelectorAll(). It returns a NodeList containing all matching nodes. So the code:\nvar paras = document.querySelectorAll(\u0026#39;p.highlight\u0026#39;); Will populate the variable paras with a NodeList containing all \u0026lt;p\u0026gt; elements on the page with the highlight class.\nWarning\nWhile a NodeList is an iterable object that behaves much like an array, it is not an array. Its items can also be directly accessed with bracket notation ([]) or NodeList.item(). It can be iterated over with a for .. of loop, and in newer browsers, NodeList.forEach(). Alternatively, it can be converted into an array with Array.from().\nElement.querySelector() and Element.querySelectorAll() The query selector methods are also implemented on the element class, with Element.querySelector() and Element.querySelectorAll(). Instead of searching the entire document, these only search their descendants for matching elements.\nEvents Once we have a reference to an element, we can add an event listener with EventTarget.addEventListener(). This takes as its first argument, the name of the event to listen for, and as the second, a method to invoke when the event occurs. There are additional optional arguments as well (such as limiting an event listener to firing only once), see the MDN documentation for more details.\nFor example, if we wanted to log when the user clicks our button, we could use the code:\ndocument.getElementById(\u0026#34;some-button\u0026#34;).addEventListener(\u0026#39;click\u0026#39;, function(event) { event.preventDefault(); console.log(\u0026#34;Button was clicked!\u0026#34;); }); Notice we are once again using method chaining - we could also assign the element to a var and invoke addEventListener() on the variable. The event we want to listen for is identified by its name - the string 'click'. Finally, our event handler function will be invoked with an event object as its first argument.\nAlso, note the use of event.preventDefault(). Invoking this method on the event tells it that we are taking care of its responsibilities, so no need to trigger the default action. If we don\u0026rsquo;t do this, the event will continue to bubble up the DOM, triggering any additional event handlers. For example, if we added a 'click' event to an \u0026lt;a\u0026gt; element and did not invoke event.preventDefault(), when we clicked the \u0026lt;a\u0026gt; tag we would run our custom event handler and then the browser would load the page that the \u0026lt;a\u0026gt; element\u0026rsquo;s href attribute pointed to.\nCommon Event Names The most common events you\u0026rsquo;ll likely use are\n\u0026quot;click\u0026quot; triggered when an item is clicked on \u0026quot;input\u0026quot; triggered when an input element receives input \u0026quot;change\u0026quot; triggered when an input\u0026rsquo;s value changes \u0026quot;load\u0026quot; triggered when the source of a image or other media has finished loading \u0026quot;mouseover\u0026quot; and \u0026quot;mouseout\u0026quot; triggered when the mouse moves over an element or moves off an element \u0026quot;mousedown\u0026quot; and \u0026quot;mouseup\u0026quot; triggered when the mouse button is initially pressed and when it is released (primarily used for drawing and drag-and-drop) \u0026quot;mousemove\u0026quot; triggered when the mouse moves (used primarily for drawing and drag-and-drop) \u0026quot;keydown\u0026quot;, \u0026quot;keyup\u0026quot;, and \u0026quot;keypressed\u0026quot; triggered when a key is first pushed down, released, and held. Note that the mouse and key events are only passed to elements when they have focus. If you want to always catch these events, attach them to the window object.\nThere are many more events - refer to the MDN documentation of the specific element you are interested in to see the full list that applies to that element.\nEvent Objects The function used as the event handler is invoked with an object representing the event. In most cases, this is a descendant class of Event that has additional properties specific to the event type. Let\u0026rsquo;s explore this a bit with our text input. Add this code to your playground.js, reload the page, and type something into the text input:\ndocument.getElementById(\u0026#34;some-input\u0026#34;).addEventListener(\u0026#34;input\u0026#34;, function(event) { console.log(event.target.value); }); Here we access the event\u0026rsquo;s target property, which gives us the target element for the event, the original \u0026lt;input\u0026gt;. The input element has the value property, which corresponds to the value attribute of the HTML that was parsed to create it, and it changes as text is entered into the \u0026lt;input\u0026gt;.\nModifying DOM Element Properties One of the primary uses of the DOM is to alter properties of element objects in the page. Any changes to the DOM structure and properties are almost immediately applied to the appearance of the web page. Thus, we use this approach to alter the document in various ways.\nAttributes The attributes of an HTML element can be accessed and changed through the DOM, with the methods element.getAttribute(), element.hasAttribute() and element.setAttribute().\nLet\u0026rsquo;s revisit the button in our playground, and add an event listener to change the input element\u0026rsquo;s value attribute:\ndocument.getElementById(\u0026#34;some-button\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function(event) { document.getElementById(\u0026#34;some-input\u0026#34;).setAttribute(\u0026#34;value\u0026#34;, \u0026#34;Hello World!\u0026#34;) }); Notice too that both event handlers we have assigned to the button trigger when you click it. We can add as many event handlers as we like to a project.\nStyles The style property provides access to the element\u0026rsquo;s inline styles. Thus, we can set style properties on the element:\ndocument.getElementById(\u0026#34;some-button\u0026#34;).style = \u0026#34;background-color: yellow\u0026#34;; Remember from our discussion of the CSS cascade that inline styles have the highest priority.\nClass Names Alternatively, we can change the CSS classes applied to the element by changing its element.classList property, which is an instance of a DOMTokensList, which exposes the methods:\nadd() which takes one or more string arguments which are class names added to the class list remove() which takes one or more string arguments which are class names removed from the class list toggle() which takes one or more strings as arguments and toggles the class name in the list (i.e. if the class name is there, it is removed, and if not, it is added) By adding, removing, or toggling class names on an element, we can alter what CSS rules apply to it based on its CSS selector.\nAltering the Document Structure Another common use for the DOM is to add, remove, or relocate elements in the DOM tree. This in turn alters the page that is rendered. For example, let\u0026rsquo;s add a paragraph element to the page just after the \u0026lt;h1\u0026gt; element:\nvar p = document.createElement(\u0026#39;p\u0026#39;); p.innerHTML = \u0026#34;Now I see you\u0026#34;; document.body.insertBefore(p, document.querySelector(\u0026#39;h1\u0026#39;).nextSibling); Let\u0026rsquo;s walk through this code line-by-line.\nHere we use Document.createElement() to create a new element for the DOM. At this point, the element is unattached to the document, which means it will not be rendered. Now we alter the new \u0026lt;p\u0026gt; tag, adding the words \u0026quot;Now I see you\u0026quot; with the Element.innerHTML property. Then we attach the new \u0026lt;p\u0026gt; tag to the DOM tree, using Node.insertBefore() method and Node.nextSibling property. The Node interface provides a host of properties and methods for traversing, adding to, and removing from, the DOM tree. Some of the most commonly used are:\nNode.parent the parent of this Node Node.childNodes a NodeList of this node\u0026rsquo;s children Node.nextSibling returns the node following this one at the same level in the DOM tree Node.previousSibling returns the node proceeding this one in the DOM tree at the same level Node.appendChild() adds the an element as the last child of the node Node.removeChild() removes a child from the node and returns it (this means the element becomes unattached) Node.replaceChild() replaces a child element with another "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/0-forward/07-syllabus/",
	"title": "Spring 2022 Syllabus",
	"tags": [],
	"description": "",
	"content": "CC 120 - Web Page Design - Spring 2022 Instructor Contact Information Instructor: Nathan Bean (nhbean AT ksu DOT edu)\nI use he/him pronouns. Feel free to share your own pronouns with me, and I\u0026rsquo;ll do my best to use them! Office: DUE 2216 Phone: (785) 483-9265 (Call/Text) Website: https://nathanhbean.com Virtual Office Hours: By appointment via Zoom. Preferred Methods of Communication: Email: Students should email cc120-help (cc120-help@KSUemailProd.onmicrosoft.com). We will try to respond within one business day. Chat: You may find instructors online via the CS department Discord server and Microsoft Teams. We will try to respond when we can, but if you don\u0026rsquo;t get a response please email cc120-help. Phone/Text: Emergencies only! We will do our best to respond as quickly as we can. Course Overview The Internet, web browsers, and web-page-development technology: web-page design and implementation with Hypertext Markup Language (HTML), and CSS. Integration of program script into web pages. Introduction to graphics design, animation, and server utilization.\nCourse Description In this course students gain experience writing web pages using the three core client-side technologies of the world-wide web: HTML, CSS, and JavaScript. Additionally, we examine how the world-wide-web works, especially HTTP requests and responses. The goal is to help you develop the fundamental skills to develop interesting, effective, accessible, and reliable web pages using current industry standards.\nMajor Course Topics The World-Wide-Web Web Pages Browsers and web clients Hyper-Text Transfer Protocol (HTTP) Hyper Text Markup Language (HTML) Cascading Style Sheets (CSS) CSS Animations JavaScript (JS) The Document Object Model (DOM) Web Accessability Web Forms Web Requests Web Graphics Web Hosting Common Web Libraries Student Learning Outcomes After completing this course, a successful student will be able to:\nCreate valid HTML webpages using separation of concerns with HTML, CSS, and JavaScript. Use CSS rules to create engaging, effective, accessible, and responsive web page designs. Utilize HTML forms to submit data to a web API Use JavaScript to dynamically modify the structure and appearance of a webpage. Employ AJAX/Fetch requests to interact with Web APIs. Think critically about web page design and apply solid web page design principles to their work. Course Structure These courses are being taught 100% online, and each module is self-paced. There may be some bumps in the road as we refine the overall course structure. Students will work at their own pace through a set of modules, with approximately one module being due each week. Material will be provided in the form of recorded videos, online tutorials, links to online resources, and discussion prompts. Each module will include a coding project or assignment, many of which will be graded automatically through Codio. Assignments may also include portions which will be graded manually via Canvas or other tools.\nA common axiom in learner-centered teaching is \u0026ldquo;the person doing the work is the person doing the learning.\u0026rdquo; What this really means is that students primarily learn through grappling with the concepts and skills of a course while attempting to apply them. Simply seeing a demonstration or hearing a lecture by itself doesn’t do much in terms of learning. This is not to say that they don\u0026rsquo;t serve an important role - as they set the stage for the learning to come, helping you to recognize the core ideas to focus on as you work. The work itself consists of applying ideas, practicing skills, and putting the concepts into your own words.\nThe Work There is no shortcut to becoming a web developer. Only by doing the work will you develop the skills and knowledge to make you a successful computer scientist. This course is built around that principle, and gives you ample opportunity to do the work, with as much support as we can offer.\nQuizzes Many modules will include quizzes which cover the theory, concepts, and vocabulary used in web development. This is all information you should be familiar with as a future web developer. Most quizzes will allow multiple retakes.\nTutorials \u0026amp; Examples: Each module will include many tutorial assignments and examples that will take you step-by-step through using a particular concept or technique. The point is not simply to complete the example, but to practice the technique and coding involved. You will be expected to implement these techniques on your own in project assignments, so it is important that you take the time to learn from these.\nProject Assignments: Throughout the semester you will be building a number of web pages, including a personal website. Note that all web pages you build for this course should be valid - your HTML, CSS, and JavaScript must conform to the standards. Additionally, you will be expected to address accessibility and security in your projects once we\u0026rsquo;ve covered these topics.\nGrading In theory, each student begins the course with an A. As you submit work, you can either maintain your A (for good work) or chip away at it (for less adequate or incomplete work). In practice, each student starts with 0 points in the gradebook and works upward toward a final point total earned out of the possible number of points. In this course, each assignment constitutes a portion of the final grade, as detailed below:\n30% - Quizzes 30% - Tutorials \u0026amp; Exercises 40% - Projects Up to 5% of the total grade in the class is available as extra credit. See the Extra Credit - Bug Bounty \u0026amp; Extra Credit - Helping Hands assignments for details.\nLetter grades will be assigned following the standard scale:\n90% - 100% → A 80% - 89.99% → B 70% - 79.99% → C 60% - 69.99% → D 00% - 59.99% → F Submission, Regrading, and Early Grading Policy As a rule, submissions in this course will not be graded until after they are due, even if submitted early. Students may resubmit assignments many times before the due date, and only the latest submission will be graded. For assignments submitted via GitHub release tag, only the tagged release that was submitted to Canvas will be graded, even if additional commits have been made. Students must create a new tagged release and resubmit that tag to have it graded for that assignment.\nOnce an assignment is graded, students are not allowed to resubmit the assignment for regrading or additional credit without special permission from the instructor to do so. In essence, students are expected to ensure their work is complete and meets the requirements before submission, not after feedback is given by the instructor during grading. However, students should use that feedback to improve future assignments and milestones.\nFor the website milestones, it is solely at the discretion of the instructor whether issues noted in the feedback for a milestone will result in grade deductions in a later milestones if they remain unresolved, though the instructor will strive to give students ample time to resolve issues before any additional grade deductions are made.\nLikewise, students may ask questions of the instructor while working on the assignment and receive help, but the instructor will not perform a full code review nor give grading-level feedback until after the assignment is submitted and the due date has passed. Again, students are expected to be able to make their own judgments on the quality and completion of an assignment before submission.\nThat said, a student may email the instructor to request early grading on an assignment before the due date, in order to move ahead more quickly. The instructor\u0026rsquo;s receipt of that email will effectively mean that the assignment for that student is due immediately, and all limitations above will apply as if the assignment\u0026rsquo;s due date has now passed.\nCollaboration Policy In this course, all work submitted by a student should be created solely by the student without any outside assistance beyond the instructor and TA/GTAs. Students may seek outside help or tutoring regarding concepts presented in the course, but should not share or receive any answers, source code, program structure, or any other materials related to the course. Learning to debug coding problems is a vital skill, and students should strive to ask good questions and perform their own research instead of just sharing broken source code when asking for assistance.\nLate Work Warning\nRead this late work policy very carefully! If you are unsure how to interpret it, please contact the instructors via email. Not understanding the policy does not mean that it won\u0026rsquo;t apply to you!\nSince this course is entirely online, students may work at any time and at their own pace through the modules. However, to keep everyone on track, there will be approximately one module due each week. Each graded item in the module will have a specific due date specified. Any assignment submitted late will have that assignment\u0026rsquo;s grade reduced by 10% of the total possible points on that project for each day it is late. This penalty will be assessed automatically in the Canvas gradebook. For the purposes of record keeping, a combination of the time of a submission via Canvas and the creation of a release in GitHub will be used to determine if the assignment was submitted on time.\nHowever, even if a module is not submitted on time, it must still be completed before a student is allowed to begin the next module. So, students should take care not to get too far behind, as it may be very difficult to catch up.\nFinally, all course work must be submitted on or before the last day of the semester in which the student is enrolled in the course in order for it to be graded on time.\nIf you have extenuating circumstances, please discuss them with the instructor as soon as they arise so other arrangements can be made. If you find that you are getting behind in the class, you are encouraged to speak to the instructor for options to make up missed work.\nIncomplete Policy Students should strive to complete this course in its entirety before the end of the semester in which they are enrolled. However, since retaking the course would be costly and repetitive for students, we would like to give students a chance to succeed with a little help rather than immediately fail students who are struggling.\nIf you are unable to complete the course in a timely manner, please contact the instructor to discuss an incomplete grade. Incomplete grades are given solely at the instructor\u0026rsquo;s discretion. See the official K-State Grading Policy for more information. In general, poor time management alone is not a sufficient reason for an incomplete grade.\nUnless otherwise noted in writing on a signed Incomplete Agreement Form, the following stipulations apply to any incomplete grades given in Computational Core courses:\nStudents may receive at most two incompletes in Computational Core courses throughout their time in the program Students will be given 6 calendar weeks from the end of the enrolled semester\u0026rsquo;s finals week to complete the course Any modules in a future CC course which depend on incomplete work will not be accessible until the previous course is finished For example, if a student is given an incomplete in CC 210, then all modules in CC 310 will be inaccessible until CC 210 is complete Students understand that access to instructor and GTA assistance may be limited after the end of an academic semester due to holidays and other obligations If a student fails to resolve an incomplete grade after 6 weeks, they will be assigned an \u0026lsquo;F\u0026rsquo; in the course. In addition, they will be dropped from any other Computational Core courses which require the failed course as a prerequisite or corequisite. Recommended Texts \u0026amp; Supplies To participate in this course, students must have access to a modern web browser and broadband internet connection. All course materials will be provided via Canvas and Codio. Modules may also contain links to external resources for additional information, such as programming language documentation.\nStudents may choose to do some development work on their own computer. The recommended software is Visual Studio Code along with access to a system running Ubuntu. For Windows systems, Ubuntu can be installed via the Windows Subsystem for Linux. For Mac systems, Ubuntu can be installed in a virtual machine through VirtualBox.\nSubject to Change The details in this syllabus are not set in stone. Due to the flexible nature of this class, adjustments may need to be made as the semester progresses, though they will be kept to a minimum. If any changes occur, the changes will be posted on the Canvas page for this course and emailed to all students. All changes may also be posted to Piazza.\nStandard Syllabus Statements Info\nThe statements below are standard syllabus statements from K-State and our program.\nAcademic Honesty Kansas State University has an Honor and Integrity System based on personal integrity, which is presumed to be sufficient assurance that, in academic matters, one\u0026rsquo;s work is performed honestly and without unauthorized assistance. Undergraduate and graduate students, by registration, acknowledge the jurisdiction of the Honor and Integrity System. The policies and procedures of the Honor and Integrity System apply to all full and part-time students enrolled in undergraduate and graduate courses on-campus, off-campus, and via distance learning. A component vital to the Honor and Integrity System is the inclusion of the Honor Pledge which applies to all assignments, examinations, or other course work undertaken by students. The Honor Pledge is implied, whether or not it is stated: \u0026ldquo;On my honor, as a student, I have neither given nor received unauthorized aid on this academic work.\u0026rdquo; A grade of XF can result from a breach of academic honesty. The F indicates failure in the course; the X indicates the reason is an Honor Pledge violation.\nFor this course, a violation of the Honor Pledge will result in sanctions such as a 0 on the assignment or an XF in the course, depending on severity. Actively seeking unauthorized aid, such as posting lab assignments on sites such as Chegg or StackOverflow or asking another person to complete your work, even if unsuccessful, will result in an immediate XF in the course.\nThe Codio platform can perform automatic plagiarism detection by comparing submitted projects against other students\u0026rsquo; submissions and known solutions. That information may be used to determine if plagiarism has taken place.\nStudents with Disabilities Students with disabilities who need classroom accommodations, access to technology, or information about emergency building/campus evacuation processes should contact the Student Access Center and/or their instructor. Services are available to students with a wide range of disabilities including, but not limited to, physical disabilities, medical conditions, learning disabilities, attention deficit disorder, depression, and anxiety. If you are a student enrolled in campus/online courses through the Manhattan or Olathe campuses, contact the Student Access Center at accesscenter@k-state.edu, 785-532-6441; for K-State Polytechnic campus, contact Julie Rowe, Diversity, Inclusion and Access Coordinator, at jarowe@ksu.edu or call 785-826-2971.\nExpectations for Conduct All student activities in the University, including this course, are governed by the Student Judicial Conduct Code as outlined in the Student Governing Association By Laws, Article V, Section 3, number 2. Students who engage in behavior that disrupts the learning environment may be asked to leave the class.\nMutual Respect and Inclusion in K-State Teaching \u0026amp; Learning Spaces At K-State, faculty and staff are committed to creating and maintaining an inclusive and supportive learning environment for students from diverse backgrounds and perspectives. K-State courses, labs, and other virtual and physical learning spaces promote equitable opportunity to learn, participate, contribute, and succeed, regardless of age, race, color, ethnicity, nationality, genetic information, ancestry, disability, socioeconomic status, military or veteran status, immigration status, Indigenous identity, gender identity, gender expression, sexuality, religion, culture, as well as other social identities.\nFaculty and staff are committed to promoting equity and believe the success of an inclusive learning environment relies on the participation, support, and understanding of all students. Students are encouraged to share their views and lived experiences as they relate to the course or their course experience, while recognizing they are doing so in a learning environment in which all are expected to engage with respect to honor the rights, safety, and dignity of others in keeping with the (K-State Principles of Community)[https://www.k-state.edu/about/values/community/].\nIf you feel uncomfortable because of comments or behavior encountered in this class, you may bring it to the attention of your instructor, advisors, and/or mentors. If you have questions about how to proceed with a confidential process to resolve concerns, please contact the Student Ombudsperson Office. Violations of the student code of conduct can be reported here. If you experience bias or discrimination, it can be reported here.\nNetiquette Info\nThis is our personal policy and not a required syllabus statement from K-State. It has been adapted from this statement from K-State Global Campus, and the Recurse Center Manual. We have adapted their ideas to fit this course.\nOnline communication is inherently different than in-person communication. When speaking in person, many times we can take advantage of the context and body language of the person speaking to better understand what the speaker means, not just what is said. This information is not present when communicating online, so we must be much more careful about what we say and how we say it in order to get our meaning across.\nHere are a few general rules to help us all communicate online in this course, especially while using tools such as Canvas or Discord:\nUse a clear and meaningful subject line to announce your topic. Subject lines such as \u0026ldquo;Question\u0026rdquo; or \u0026ldquo;Problem\u0026rdquo; are not helpful. Subjects such as \u0026ldquo;Logic Question in Project 5, Part 1 in Java\u0026rdquo; or \u0026ldquo;Unexpected Exception when Opening Text File in Python\u0026rdquo; give plenty of information about your topic. Use only one topic per message. If you have multiple topics, post multiple messages so each one can be discussed independently. Be thorough, concise, and to the point. Ideally, each message should be a page or less. Include exact error messages, code snippets, or screenshots, as well as any previous steps taken to fix the problem. It is much easier to solve a problem when the exact error message or screenshot is provided. If we know what you\u0026rsquo;ve tried so far, we can get to the root cause of the issue more quickly. Consider carefully what you write before you post it. Once a message is posted, it becomes part of the permanent record of the course and can easily be found by others. If you are lost, don\u0026rsquo;t know an answer, or don\u0026rsquo;t understand something, speak up! Email and Canvas both allow you to send a message privately to the instructors, so other students won\u0026rsquo;t see that you asked a question. Don\u0026rsquo;t be afraid to ask questions anytime, as you can choose to do so without any fear of being identified by your fellow students. Class discussions are confidential. Do not share information from the course with anyone outside of the course without explicit permission. Do not quote entire message chains; only include the relevant parts. When replying to a previous message, only quote the relevant lines in your response. Do not use all caps. It makes it look like you are shouting. Use appropriate text markup (bold, italics, etc.) to highlight a point if needed. No feigning surprise. If someone asks a question, saying things like \u0026ldquo;I can\u0026rsquo;t believe you don\u0026rsquo;t know that!\u0026rdquo; are not helpful, and only serve to make that person feel bad. No \u0026ldquo;well-actually\u0026rsquo;s.\u0026rdquo; If someone makes a statement that is not entirely correct, resist the urge to offer a \u0026ldquo;well, actually\u0026hellip;\u0026rdquo; correction, especially if it is not relevant to the discussion. If you can help solve their problem, feel free to provide correct information, but don\u0026rsquo;t post a correction just for the sake of being correct. Do not correct someone\u0026rsquo;s grammar or spelling. Again, it is not helpful, and only serves to make that person feel bad. If there is a genuine mistake that may affect the meaning of the post, please contact the person privately or let the instructors know privately so it can be resolved. Avoid subtle -isms and microaggressions. Avoid comments that could make others feel uncomfortable based on their personal identity. See the syllabus section on Diversity and Inclusion above for more information on this topic. If a comment makes you uncomfortable, please contact the instructor. Avoid sarcasm, flaming, advertisements, lingo, trolling, doxxing, and other bad online habits. They have no place in an academic environment. Tasteful humor is fine, but sarcasm can be misunderstood. As a participant in course discussions, you should also strive to honor the diversity of your classmates by adhering to the K-State Principles of Community.\nFace Coverings All students are expected to comply with K-State’s face mask policy. As of August 2, 2021, everyone must wear face masks over their mouths and noses in all indoor spaces on university property, including while attending in-person classes. This policy is subject to change at the university’s discretion. For additional information and the latest on K-State’s face covering policy, see this page.\nAcademic Freedom Statement Kansas State University is a community of students, faculty, and staff who work together to discover new knowledge, create new ideas, and share the results of their scholarly inquiry with the wider public. Although new ideas or research results may be controversial or challenge established views, the health and growth of any society requires frank intellectual exchange. Academic freedom protects this type of free exchange and is thus essential to any university\u0026rsquo;s mission.\nMoreover, academic freedom supports collaborative work in the pursuit of truth and the dissemination of knowledge in an environment of inquiry, respectful debate, and professionalism. Academic freedom is not limited to the classroom or to scientific and scholarly research, but extends to the life of the university as well as to larger social and political questions. It is the right and responsibility of the university community to engage with such issues.\nCampus Safety Kansas State University is committed to providing a safe teaching and learning environment for student and faculty members. In order to enhance your safety in the unlikely case of a campus emergency make sure that you know where and how to quickly exit your classroom and how to follow any emergency directives. To view additional campus emergency information go to the University\u0026rsquo;s main page, www.k-state.edu, and click on the Emergency Information button, located at the bottom of the page.\nStudent Resources K-State has many resources to help contribute to student success. These resources include accommodations for academics, paying for college, student life, health and safety, and others found at www.k-state.edu/onestop.\nStudent Academic Creations Student academic creations are subject to Kansas State University and Kansas Board of Regents Intellectual Property Policies. For courses in which students will be creating intellectual property, the K-State policy can be found at University Handbook, Appendix R: Intellectual Property Policy and Institutional Procedures (part I.E.). These policies address ownership and use of student academic creations.\nMental Health Your mental health and good relationships are vital to your overall well-being. Symptoms of mental health issues may include excessive sadness or worry, thoughts of death or self-harm, inability to concentrate, lack of motivation, or substance abuse. Although problems can occur anytime for anyone, you should pay extra attention to your mental health if you are feeling academic or financial stress, discrimination, or have experienced a traumatic event, such as loss of a friend or family member, sexual assault or other physical or emotional abuse.\nIf you are struggling with these issues, do not wait to seek assistance.\nKansas State University Counseling Services offers free and confidential services to assist you to meet these challenges. Lafene Health Center has specialized nurse practitioners to assist with mental health. The Office of Student Life can direct you to additional resources. K-State Family Center offers individual, couple, and family counseling services on a sliding fee scale. Center for Advocacy, Response, and Education (CARE) provides free and confidential assistance for those in our K-State community who have been victimized by violence. For Kansas State Polytechnic Campus:\nKansas State Polytechnic Counseling Services offers free and confidential services to assist you to meet these challenges. The Kansas State Polytechnic Office of Student Life can direct you to additional resources. University Excused Absences K-State has a University Excused Absence policy (Section F62). Class absence(s) will be handled between the instructor and the student unless there are other university offices involved. For university excused absences, instructors shall provide the student the opportunity to make up missed assignments, activities, and/or attendance specific points that contribute to the course grade, unless they decide to excuse those missed assignments from the student’s course grade. Please see the policy for a complete list of university excused absences and how to obtain one. Students are encouraged to contact their instructor regarding their absences.\nCopyright Notice © The materials in this online course fall under the protection of all intellectual property, copyright and trademark laws of the U.S. The digital materials included here come with the legal permissions and releases of the copyright holders. These course materials should be used for educational purposes only; the contents should not be distributed electronically or otherwise beyond the confines of this online course. The URLs listed here do not suggest endorsement of either the site owners or the contents found at the sites. Likewise, mentioned brands (products and services) do not suggest endorsement. Students own copyright to what they create.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/08-css-functions/",
	"title": "CSS Functions",
	"tags": [],
	"description": "",
	"content": "CSS provides a number of useful functions that calculate values. Functions are written in the form name(arg1, arg2, ...) and are provided as values to CSS properties. For example, this CSS code sets the height of the content area to the available space on screen for content after subtracting a header and footer:\n#header {height: 150px} #footer {height: 100px} #content { height: calc(100vh - 150px - 100px); } Here 100vh is the height of the viewport, and the header and footer are defined in terms of pixels.\nNote\nYou might want to apply the box-sizing: border-box on these elements if they have padding and borders, or these additional dimensions will need to be included in the calculation. See the section on the CSS Box Model for more details.\nMath Functions CSS provides a number of useful math functions:\nThe Calc Function As you have seen above, the calc() function can be used to calculate values by performing arithmetic upon values. These values can be in different units (i.e. calc(200px - 5mm) or even determined as the webpage is being interpreted (i.e. calc(80vw + 5rem)). See the MDN Documentation for more details.\nThe Min and Max Functions CSS also provides min() and max() function, which provide the smallest or largest from the provided arguments (which can be arbitrary in number). As with calc(), it can do so with interpretation-time values.\nThe Clamp Function The clamp() function clamps a value within a provided range. Its first argument is the minimum value, the second the preferred value, and the third the max. If the preferred value is between the min and max value, it is returned. If it is less than the minimum, the min is instead returned, or if it is greater than the maximum, the max value is returned.\nColor Functions Several CSS functions are used to create an modify colors. These are described in the CSS Color section.\nTransformation Functions Many CSS functions exist for specifying CSS transforms. See the MDN documentation for details.\nImage Filter Functions CSS allows for filters to be applied to images. More details can be found in the Mozilla Documentation.\nCounter Functions Finally CSS uses counters to determine row number and ordered list numbers. These can be manipulated and re-purposed in various ways. See the MDN Documentation for details.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/3-html/08-the-dom/",
	"title": "Document Object Model",
	"tags": [],
	"description": "",
	"content": "The Document Object Model (or DOM) is a data structure representing the content of a web page, created by the browser as it parses the website. The browser then makes this data structure accessible to scripts running on the page. The DOM is essentially a tree composed of objects representing the HTML elements and text on the page.\nConsider this HTML:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Hello DOM!\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;site.css\u0026#34;/\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;banner\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Hello DOM!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; The Document Object Model (DOM) is a programming API for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated. In the DOM specification, the term \u0026#34;document\u0026#34; is used in the broad sense - increasingly, XML is being used as a way of representing many different kinds of information that may be stored in diverse systems, and much of this would traditionally be seen as data rather than as documents. Nevertheless, XML presents this data as documents, and the DOM may be used to manage this data. \u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;https://www.w3.org/TR/WD-DOM/introduction.html\u0026#34;\u0026gt;From w3.org\u0026#39;s What is the Document Object Model?\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;html\u0026gt; When it is parsed by the browser, it is transformed into this tree:\nThe DOM Tree and Developer Tools Most browsers also expose the DOM tree through their developer tools. Try opening the example page in Chrome or your favorite browser using this link.\nNow open the developer tools for your browser:\nChrome CTRL + SHIFT + i or right-click and select \u0026lsquo;Inspect\u0026rsquo; from the context menu. Edge CTRL + SHIFT + i or right-click and select \u0026lsquo;Inspect element\u0026rsquo; from the context menu. Firefox CTRL + SHIFT + i or right-click and select \u0026lsquo;Inspect Element\u0026rsquo; from the context menu. Safari Developer tools must be enabled. See the Safari User Guide You should see a new panel open in your browser, and under its \u0026rsquo;elements\u0026rsquo; tab the DOM tree is displayed:\nCollapsed nodes can be expanded by clicking on the arrow next to them.\nTry moving your mouse around the nodes in the DOM tree, and you\u0026rsquo;ll see the corresponding element highlighted in the page. You can also dynamically edit the DOM tree from the elements tab by right-clicking on a node.\nTry right-clicking on the \u0026lt;h1\u0026gt; node and selecting \u0026rsquo;edit text\u0026rsquo;. Change the text to \u0026ldquo;Hello Browser DOM\u0026rdquo;. See how it changes the page?\nThe page is rendered from the DOM, so editing the DOM changes how the page appears. However, the initial structure of the DOM is derived from the loaded HTML. This means if we refresh the page, any changes we made to the DOM using the developer tools will be lost, and the page will return to its original state. Give it a try - hit the refresh button.\nNote\nFor convenience, this textbook will use the Chrome browser for all developer tool reference images and discussions, but the other browsers offer much of the same functionality. If you prefer to use a different browser\u0026rsquo;s web tools, look up the details in that browser\u0026rsquo;s documentation.\nYou\u0026rsquo;ve now seen how the browser creates the DOM tree by parsing the HTML document and that DOM tree is used to render the page. We\u0026rsquo;ll revisit this concept in the chapters on CSS and JavaScript when we see how those technologies interact with the DOM.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/08-strict-mode/",
	"title": "Strict Mode",
	"tags": [],
	"description": "",
	"content": "JavaScript has been around a long time, and a lot of JavaScript code has been written by inexperienced programmers. Browser manufacturers compensated for this by allowing lenient interpretation of JavaScript programs, and by ignoring many errors as they occurred.\nWhile this made poorly-written scripts run, arguably they didn\u0026rsquo;t run well. In ECMA5, strict mode was introduced to solve the problems of lenient interpretation.\nStrict mode according to the Mozilla Developer Network:\nEliminates some JavaScript silent errors by changing them to throw errors. Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that\u0026rsquo;s not strict mode. Prohibits some syntax likely to be defined in future versions of ECMAScript. You can place the interpreter in strict mode by including this line at the start of your JavaScript file:\n\u0026#34;use strict\u0026#34;; In interpreters that don\u0026rsquo;t support strict mode, this expression will be interpreted as a string and do nothing.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/6-accessibility/08-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "In this chapter, we discussed the need to build our websites to be accessible to all users. We also discussed many common disabilities that users may have, and strategies for addressing these in your web design. We also reviewed tools that we can take advantage of to build accessible websites.\nWe also learned that many of these techniques benefit all users. Strong color contrast can help both the vision impaired, and also help make your site visible on a screen outside on a bright day. Designing your user interface to be intuitive means it will be easier for all users to navigate.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/09-css-colors/",
	"title": "CSS Colors",
	"tags": [],
	"description": "",
	"content": "CSS also has many properties that can be set to a color, i.e. color, background-color, border-color, box-shadow, etc. Colors consist of three or four values corresponding to the amount of red, green, and blue light blended to create the color. The optional fourth value is the alpha, and is typically used to specify transparency.\nColors are stored as 24-bit values, with 8 bits for each of the four channels (R,G,B,and A), representing 256 possible values (2^8) for each channel.\nColors can be specified in one of several ways:\nColor Keywords like red, dark-gray, chartreuse correspond to well-defined values. You can find the full list in the MDN Documentation.\nHexidecimal Values like #6495ed, which corresponds to cornflower blue. The first two places represent the red component, the second the green, and the third the blue. If an additional two places are provided the last pair represents the alpha component. Each pair of hex values can represent 256 possible values (16^2), and is converted directly to the binary color representation in memory.\nRGB Function a third option is to use the RGB() CSS function. This take decimal arguments for each channel which should be in the range 0-255\nHSL Function a fourth option is the HSL() function, which specifies colors in terms of an alternative scheme of hue, saturation, and lightness.\nRGBA and HSLA Functions finally, the RGBA() and HSLA() functions take the same arguments as their siblings, plus a value for the alpha channel between 0 and 1. This alpha channel represents the opacity/transparency of the color, with 0 being fully transparent and 1 being fully opaque. Thus, a value of .75 represents 3/4 opacity, or 1/4 transparency.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/09-regexp/",
	"title": "Regular Expressions",
	"tags": [],
	"description": "",
	"content": " CONSOLE The JavaScript String prototype has some very powerful methods, such as String.prototype.includes() which recognizes when a string contains a substring - i.e.:\n\u0026#34;foobarwhen\u0026#34;.includes(\u0026#34;bar\u0026#34;) would evaluate to true. But what if you needed a more general solution? Say, to see if the text matched a phone number pattern like XXX-XXX-XXXX? That\u0026rsquo;s where Regular Expressions come in.\nRegular Expressions are a sequence of characters that define a pattern that can be searched for within a string. Unlike substrings, these patterns can have a lot of flexibility. For example, the phone number pattern above can be expressed as a JavaScript RegExp like this:\n/\\d{3}-\\d{3}-\\d{4}/ Let\u0026rsquo;s break down what each part means. First, the enclosing forward slashes (/) indicate this is a RegExp literal, the same way single or double quotes indicate a string literal. The backslash d (\\d) indicates a decimal character, and will match a 0,1,2,3,4,5,6,7,8, or 9. The three in brackets {3} is a quantifier, indicating there should be three of the proceeding character - so three decimal characters. And the dash (-) matches the actual dash character.\nWriting Regular Expressions and Scriptular As you can see, regular expressions make use of a decent number of special characters, and can be tricky to write. One of the greatest tools in your arsenal when dealing with Regular Expressions is the web app Scriptular.com (click the link to open it in a new tab). It lists characters with special meanings for regular expressions on the right, and provides an interactive editor on the left, where you can try out regular expressions against target text.\nYou can, of course, do the same thing on the console, but I find that using Scriptular to prototype regular expressions is faster. You can also clone the Scriptular Github repo and use it locally rather than on the internet. A word of warning, however, always test your regular expressions in the context you are going to use them - sometimes something that works in Scriptular doesn\u0026rsquo;t quite in the field (especially with older browsers and Node versions).\nRegular Expressions and Input Validation So how are regular expressions used in Web Development? One common use is to validate user input - to make sure the user has entered values in the format we want. To see if a user entered string matches the phone format we declared above, for example, we can use the RegExp.prototype.test() method. It returns the boolean true if a match is found, false otherwise:\nif(/\\d{3}-\\d{3}-\\d{4}/.test(userEnteredString)) { console.log(\u0026#34;String was valid\u0026#34;); } else { console.log(\u0026#34;String was Invalid\u0026#34;); } But what if we wanted to allow phone numbers in more than one format? Say X-XXX-XXX-XXXX, (XXX)XXX-XXXX, and X(XXX)XXX-XXXX)?\nWe can do this as well:\n/\\d?-?\\d{3}-\\d{3}-\\d{4}|\\d?\\s?\\(\\d{3}\\)\\s?\\d{3}-\\d{4}/ The pipe (|) in the middle of the RexExp acts like an OR; we can match against the pattern before OR the pattern after. The first pattern is almost the same as the one we started with, but with a new leading \\d and -. These use the quantifier ?, which indicates 0 or 1 instances of the character.\nThe second pattern is similar, except we use a backslash s (/s) to match whitespace characters (we could also use the literal space , \\s also matches tabs and newlines). And we look for parenthesis, but as parenthesis have special meaning for RegExp syntax, we must escape them with a backslash: (\\( and \\)).\nRegular Expressions and Form Validation In fact, the use of Regular Expressions to validate user input is such a common use-case that when HTML5 introduced form data validation it included the pattern attribute for HTML5 forms. It instructs the browser to mark a form field as invalid unless input matching the pattern is entered. Thus, the HTML:\n\u0026lt;label for=\u0026#34;phone\u0026#34;\u0026gt;Please enter a phone number \u0026lt;input name=\u0026#34;phone\u0026#34; pattern=\u0026#34;\\d{3}-\\d{3}-\\d{4}\u0026#34; placeholder=\u0026#34;xxx-xxx-xxxx\u0026#34;\u0026gt; \u0026lt;/label\u0026gt; Will ensure that only validly formatted phone numbers can be submitted. Also, note that we omitted the leading and trailing forward slashes (/) with the pattern attribute.\nHowever, be aware that older browsers may not have support for HTML5 form data validation (though all modern ones do), and that a savvy user can easily disable HTML5 form validation with the Developer Tools. Thus, you should aways validate on both the client-side (for good user experience) and the server-side (to ensure clean data). We\u0026rsquo;ll discuss data validation more in our chapter on persisting data on the server.\nConstructing RegExp Besides using literal notation, We can also construct regular expressions from a string of characters:\nvar regexp = new RegExp(\u0026#34;\\d{3}-\\d{3}-\\d{4}\u0026#34;) This is especially useful if we won\u0026rsquo;t know the pattern until runtime, as we can create our regular expression \u0026ldquo;on the fly.\u0026rdquo;\nRegExp flags You can also specify one or more flags when defining a JavaScript Regular Expression, by listing the flag after the literal, i.e. in the RegExp:\n/\\d{3}-\\d{3}-\\d{4}/g The flag g means global, and will find all matches, not just the first. So if we wanted to find all phone numbers in a body of text, we could do:\n/\\d{3}-\\d{3}-\\d{4}/g.match(bodyOfText); Here the RegExp.prototype.match() function returns an array of phone numbers that matched the pattern and were found in bodyOfText.\nThe flags defined for JavaScript regular expressions are:\ng global match - normally RegExp execution stops after the first match. i ignore case - upper and lowercase versions of a letter are treated equivalently m multiline - makes the beginning end operators (^ and $) operate on lines rather than the whole string. s dotAll - allows . to match newlines (normally . is a wildcard matching everything but newline characters) u unicode - treat pattern as a sequence of unicode code points ysticky - matches only from the lastIndex property of the Regular Expression Capture Groups We saw above how we can retrieve the strings that matched our regular expression patterns Matching patterns represents only part of the power of regular expressions. One of the most useful features is the ability to capture pieces of the pattern, and expose them to the programmer.\nConsider, for example, the common case where we have a comma delimited value (CSV) file where we need to tweak some values. Say perhaps we have one like this:\nName,weight,height John Doe,150,6\u0026#39;2\u0026#34; Sara Smith,102,5\u0026#39;8\u0026#34; \u0026#34;Mark Zed, the Third\u0026#34;,250,5\u0026#39;11\u0026#34; ... 100\u0026#39;s more values.... which is part of a scientific study where they need the weight in Kg and the height in meters. We could make the changes by hand - but who wants to do that? We could also do the changes by opening the file in Excel, but that would also involve a lot of copy/paste and deletion, opening the door to human error. Or we can tweak the values with JavaScript.\nNotice how the Mark Zed entry, because it has a comma in the name, is wrapped in double quotes, while the other names aren\u0026rsquo;t? This would make using something like String.prototype.split() impossible to use without a ton of additional logic, because it splits on the supplied delimiter (in this case, a comma), and would catch these additional commas. However, because a RegExp matches a pattern, we can account for this issue.\nBut we want to go one step farther, and capture the weight and height values. We can create a capture group by surrounding part of our pattern with parenthesis, i.e. the RegExp:\n/^([\\d\\s\\w]+|\u0026#34;[\\d\\s\\w,]+\u0026#34;),(\\d+),(\\d+\u0026#39;\\d+)\u0026#34;$/gm Will match each line in the file. Let\u0026rsquo;s take a look at each part:\n/^ ... $/mg the m flag indicates that ^ and $ should mark the start and end of each line. This makes sure we only capture values from the same line as par to a match, and the g flag means we want to find all matching lines in the file.\n([\\d\\s\\w]+|\u0026quot;[\\d\\s\\w,]+\u0026quot;) is our first capture group, and we see it has two options (separated by |). The square brackets ([]) represent a set of characters, and we\u0026rsquo;ll match any character(s) listed inside. So [\\d\\s\\w] means any decimal (\\d), whitespace (\\s), or word (\\w) character, and the + means one or more of these. The second option is almost the same as the first, but surrounded by double quotes (\u0026quot;) and includes commas (,) in the set of matching characters. This means the first group will always match our name field, even if it has commas.\n,(\\d+), is pretty simple - we match the comma between name and weight columns, capture the weight value, and then the comma between weight and height.\n(\\d+'\\d+)\u0026quot; is a bit more interesting. We capture the feet value (\\d+), the apostrophe (') indicating the unit of feet, and the inches value (\\d+). While we match the units for inches (\u0026quot;), it is not part of the capture group.\nSo our line-by-line captures would be:\nLine 0: No match Line 1: John Doe, 150, 6'2 Line 2: Sara Smith, 102, 5'8 Line 3: \"Mark Zed, the Third\", 250, 5'11 We can use this knowledge with String.prototype.replace() to reformat the values in our file. The replace() can work as you are probably used to - taking two strings - one to search for and one to use as a replacement. But it can also take a RegExp as a pattern to search for and replace. And the replacement value can also be a function, which receives as its parameters 1) the full match to the pattern, and 2) the capture group values, as subsequent parameters.\nThus, for the Line 1 match, it would be invoked with parameters: (\u0026quot;John Doe,150,6'2\\\u0026quot;\u0026quot;, \u0026quot;John Doe\u0026quot;, \u0026quot;150\u0026quot;, \u0026quot;6'2\\\u0026quot;\u0026quot;). We can use this understanding to write our conversion function:\nfunction convertRow(match, name, weight, height) { // Convert weight from lbs to Kgs var lbs = parseInt(weight, 10); var kgs = lbs / 2.205; // Convert height from feet and inches to meters var parts = height.split(\u0026#34;\u0026#39;\u0026#34;); var feet = parseInt(parts[0], 10); var inches = parseInt(parts[1], 10); var totalInches = inches + 12 * feet; var meters = totalInches * 1.094; // Return the new line values: return `${name},${kgs},${meters}`; } And now we can invoke that function as part of String.prototype.replace() on the body of the file:\nvar newBody = oldBody.replace(/^([\\d\\s\\w]+|\u0026#34;[\\d\\s\\w,]+\u0026#34;),(\\d+),(\\d+\u0026#39;\\d+)\u0026#34;$/gm, convertRow); And our newBody variable contains the revised file body (we\u0026rsquo;ll talk about how to get the file body in the first place, either in the browser or with Node, later on).\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/10-css-text/",
	"title": "CSS and Text",
	"tags": [],
	"description": "",
	"content": "As the original purpose of the World-Wide-Web was to disseminate written information, it should be no surprise that CSS would provide many properties for working with text. Some of the most commonly employed properties are:\nfont-family defines the font to use for the text. Its value is one or more font family or generic font names, i.e. font-family: Tahoma, serif, font-family: cursive or font-family: \u0026quot;Comic Sans\u0026quot;. Font family names are typically capitalized and, if they contain spaces or special characters, double-quoted. font-size determines the size of the font. It can be a measurement or a defined value like x-small. font-style determines if the font should use its normal (default), italic, or oblique face. font-weight determines the weight (boldness) of the font. It can be normal or bold as well as lighter or darker than its parent, or specified as a numeric value between 1 and 1000. Be aware that many fonts have a limited number of weights. line-height sets the height of the line box (the distance between lines of text). It can be normal, or a numeric or percent value. text-align determines how text is aligned. Possible values are left (default), center, right, justify, along with some newer experimental values. text-indent indents the text by the specified value. text-justify is used in conjunction with text-align: justify and specifies how space should be distributed. A value of inter-word distributes space between words (appropriate for English, Spanish, Arabic, etc), and inter-character between characters (appropriate for Japanese, Chinese, etc). text-transform can be used to capitalize or lowercase text. Values include capitalize, uppercase, and lowercase. Choosing Fonts An important consideration when working with HTML text is that not all users will have the same fonts you have - and if the font is not on their system, the browser will fall back to a different option. Specifying a generic font name after a Font Family can help steer that fallback choice; for example:\nbody { font-family: Lucinda, cursive } will use Lucinda if available, or another cursive font if not. Some guidelines on font choice:\ncursive fonts should typically only be used for headings, not body text. serif fonts (those with the additional feet at the base of letters) are easier to read printed on paper, but more difficult on-screen. sans-serif fonts are easier to read on-screen; your body text should most likely be a sans-serif. Web-Safe Fonts Fonts that commonly appear across computing platforms and have a strong possibility of being on a users\u0026rsquo; machine have come to be known as web-safe. Some of these are:\nArial Helvetica Times Courier New Courier Georgia Lucidia Console Palatino Verdana Font-Face at Rule Alternatively, if you wish to use a less-common font, you can provide it to the browser using the @font-face rule. This defines a font and provides a source for the font file:\n@font-face { font-family: examplefont; src: url(\u0026#39;examplefont.ttf\u0026#39;); } You can then serve the font file from your webserver.\nWarning\nBe aware that distributing fonts carries different legal obligations than distributing something printed in the font. Depending on the font license, you may not be legally allowed to distribute it with the @font-face rule. Be sure to check.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/10-json/",
	"title": "JSON",
	"tags": [],
	"description": "",
	"content": " CONSOLE JSON is an acronym for JavaScript Object Notation, a serialization format that was developed in conjunction with ECMAScript 3. It is a standard format, as set by ECMA-404.\nJSON Format Essentially, it is a format for transmitting JavaScript objects. Consider the JavaScript object literal notation:\nvar whilma = { name: \u0026#34;Wilma Flintstone\u0026#34;, relationship: \u0026#34;wife\u0026#34; } var pebbles = { name: \u0026#34;Pebbles Flintstone\u0026#34;, age: 3, relationship: \u0026#34;daughter\u0026#34; } var fred = { name: \u0026#34;Fred Flintstone\u0026#34;, job: \u0026#34;Quarry Worker\u0026#34;, payRate: 8, dependents: [whilma, pebbles] } If we were to express the same object in JSON:\n{ \u0026#34;name\u0026#34;: \u0026#34;Fred Flintstone\u0026#34;, \u0026#34;job\u0026#34;: \u0026#34;Quarry Worker\u0026#34;, \u0026#34;payRate\u0026#34;: 8, \u0026#34;dependents\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Wilma Flintstone\u0026#34;, \u0026#34;relationship\u0026#34;: \u0026#34;wife\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Pebbles Flintstone\u0026#34;, \u0026#34;age\u0026#34;: 3, \u0026#34;relationship\u0026#34;: \u0026#34;daughter\u0026#34; } ] } As you probably notice, the two are very similar. Two differences probably stand out: First, references (like whilma and pebbles) are replaced with a JSON representation of their values. And second, all property names (the keys) are expressed as strings, not JavaScript symbols.\nA discussion of the full syntax can be found in the MDN Documentation and also at json.org.\nThe JSON Object The JavaScript language provides a JSON object with two very useful functions: JSON.stringify() and JSON.parse(). The first converts any JavaScript variable into a JSON string. Similarly, the second method parses a JSON string and returns what it represents.\nThe JSON object is available in browsers and in Node. Open the console and try converting objects and primitives to JSON strings with JSON.stringify() and back with JSON.parse().\nInfo\nWhile JSON was developed in conjunction with JavaScript, it has become a popular exchange format for other languages as well. There are parsing libraries for most major programming languages that can convert JSON strings into native objects:\nJava C# Python C C++ Some (like the Python one) are core language features. Others are open-source projects. There are many more available, just search the web!\nJSON Nesting and Circular References While JSON.parse() will handle almost anything you throw at it. Consider this object:\nvar guy = { name: \u0026#34;Guy\u0026#34;, age: 25, hobbies: [\u0026#34;Reading\u0026#34;, \u0026#34;Dancing\u0026#34;, \u0026#34;Fly fishing\u0026#34;] }; It converts just fine - you can see for yourself by pasting this code into the console. But what if we add reference to another object?\nvar guyMom = { name: \u0026#34;Guy\u0026#39;s Mom\u0026#34;, age: 52, hobbies: [\u0026#34;Knitting\u0026#34;, \u0026#34;Needlework\u0026#34;, \u0026#34;International Espionage\u0026#34;] }; guy.mother = guyMom; Try running JSON.stringify() on guy now:\nJSON.stringify(guy); Notice it works just fine, with Guy\u0026rsquo;s mother now serialized as a part of the guy object. But what if we add a reference from guyMother back to her son?\nguyMom.son = guy; And try JSON.stringify() on guy now\u0026hellip;\nJSON.stringify(guy); We get a TypeError: Converting circular structure to JSON. The JSON.stringify algorithm cannot handle this sort of circular reference - it wants to serialize guy, and thus needs to serialize guyMom to represent guy.mother, but in doing so it needs to serialize guy again as guyMother.son references it. This is a potentially infinitely recursive process\u0026hellip; so the algorithm stops and throws an exception as soon as it detects the existence of a circular reference.\nIs there a way around this in practice? Yes - substitute direct references for keys, i.e.:\nvar people = {guy: guy, guyMom: guyMom} guy.mother = \u0026#34;guyMom\u0026#34;; guyMom.son = \u0026#34;guy\u0026#34;; var peopleJSON = JSON.stringify(people); Now when you deserialize people, you can rebuild the references:\nvar newPeople = JSON.parse(peopleJSON); newPeople[\u0026#34;guy\u0026#34;].mother = newPeople[newPeople[\u0026#34;guy\u0026#34;].mother]; newPeople[\u0026#34;guyMom\u0026#34;].son = newPeople[newPeople[\u0026#34;guyMother\u0026#34;].son]; Given a standardized format, you can write a helper method to automate this kind of approach.\nInfo\nThe fact that JSON serializes references into objects makes it possible to create deep clones (copies of an object where the references are also clones) using JSON, i.e.:\nfunction deepClone(obj) { return JSON.parse(JSON.stringify(obj)); } If we were to use this method on guy from the above example:\nvar guyClone = deepClone(guy); And then alter some aspect of his mother:\nvar guyClone.mother.hobbies.push(\u0026#34;Skydiving\u0026#34;); The original guy\u0026rsquo;s mother will be unchanged, i.e. it will not include Skydiving in her hobbies.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/5-js/11-ajax/",
	"title": "AJAX",
	"tags": [],
	"description": "",
	"content": "Asynchronous JavaScript and XML (AJAX) is a term coined by Jesse James Garrett to describe a technique of using the XMLHttpRequest object to request resources directly from JavaScript. As the name implies, this was originally used to request XML content, but the technique can be used with any kind of data.\nThe XMLHttpRequest The XMLHttpRequest object is modeled after how the window object makes web requests. You can think of it as a state machine that can be in one of several possible states, defined by both a constant and an unsigned short value:\nUNSENT or 0 The client has been created, but no request has been made. Analogus to a just-opened browser before you type an address in the address bar. OPENED or 1 The request has been made, but the response has not been received. The browser analogue would be you have just pressed enter after typing the address. HEADERS_RECIEVED or 2 The first part of the response has been processed. We\u0026rsquo;ll talk about headers in the next chapter. LOADING or 3 The content of the response is being downloaded. In the browser, this would be the stage where the HTML is being received and parsed into the DOM. DONE or 4 The resource is fully loaded. In the DOM, this would be equivalent to the 'load' event. XMLHttpRequest Properties The XMLHttpRequest object also has a number of properties that are helpful:\nreadyState - the current state of the property response - the body of the response, an ArrayBuffer, Blob, Document, or DOMString based on the value of the responseType responseType - the mime type of response status - returns an unsigned short with the HTTP response status (or 0 if the response has not been received) statusText - returns a string containing the response string fro the server, i.e. \u0026quot;200 OK\u0026quot; timeout - the number of milliseconds the request can take before being terminated XMLHttpRequest Events The XMLHttpRequest object implements the EventTarget interface, just like the Element and Node of the DOM, so we can attach event listeners with addEventListener(). The specific events we can listen for are:\nabort - fired when the request has been aborted (you can abort a request with the XMLHttpRequest.abort() method) error - fired when the request encountered an error load - fired when the request completes successfully loadend - fired when the request has completed, either because of success or after an abort or error. loadstart - fired when the request has started to load data progress - fired periodically as the request receives data timeout - fired when the progress is expired due to taking too long Several of these events have properties you can assign a function to directly to capture the event:\nonerror - corresponds to the error event onload - corresponds to the load event onloadend - corresponds to the loadend event onloadstart - corresponds to the loadstart event onprogress - corresponds to the progress event ontimeout - corresponds to the timeout event In addition, there is an onreadystatechange property which acts like one of these properties and is fired every time the state of the request changes. In older code, you may see it used instead of the load event, i.e.:\nxhr.onreadystatechange(function(){ if(xhr.readyState === 4 \u0026amp;\u0026amp; xhr.status === 200) { // Request has finished successfully, do logic } }); Using AJAX Of course the point of learning about the XMLHttpRequest object is to perform AJAX requests. So let\u0026rsquo;s turn our attention to that task.\nCreating the XMLHttpRequest The first step in using AJAX is creating the XMLHttpRequest object. To do so, we simply call its constructor, and assign it to a variable:\nvar xhr = new XMLHttpRequest(); We can create as many of these requests as we want, so if we have multiple requests to make, we\u0026rsquo;ll usually create a new XMLHttpRequest object for each.\nAttaching the Event Listeners Usually, we\u0026rsquo;ll want to attach our event listener(s) before doing anything else with the XMLHttpRequest object. The reason is simple - because the request happens asynchronously, it is entirely possible the request will be finished before we add the event listener to listen for the load event. In that case, our listener will never trigger.\nAt a minimum, you probably want to listen to load events, i.e.:\nxhr.addEventListener(\u0026#39;load\u0026#39;, () =\u0026gt; { // do something with xhr object }); But it is also a good idea to listen for the error event as well:\nxhr.addEventListener(\u0026#39;error\u0026#39;, () =\u0026gt; { // report the error }); Opening the XMLHttpRequest Much like when we manually made requests, we first need to open the connection to the server. We do this with the XMLHttpRequest.open() method:\nxhr.open(\u0026#39;GET\u0026#39;, \u0026#39;https://imgs.xkcd.com/comics/blogofractal.png\u0026#39;); The first argument is the HTTP request method to use, and the second is the URL to open.\nThere are also three optional parameters that can be used to follow - a boolean determining if the request should be made asynchronously (default true) and a user and password for HTTP authentication. Since AJAX requests are normally made asynchronously, and HTTP authentication has largely been displaced by more secure authentication approaches, these are rarely used.\nSetting Headers After the XMLHttpRequest has been opened, but before it is sent, you can use XMLHttpRequest.setRequestHeader() to set any request headers you need. For example, we might set an Accept header to image/png to indicate we would like image data as our response:\nxhr.setRequestHeader(\u0026#39;Accept\u0026#39;, \u0026#39;image/png\u0026#39;); Sending the XMLHttpRequest Finally, the XMLHttpRequest.send() method will send the request asynchronously (unless the async parameter in XMLHttpRequest.open() was set to false). As the response is received (or fails) the appropriate event handlers will be triggered. To finish our example:\nxhr.send(); "
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/11-css-box-model/",
	"title": "CSS Box Model",
	"tags": [],
	"description": "",
	"content": "As the browser lays out HTML elements in a page, it uses the CSS Box Model to determine the size and space between elements. The CSS box is composed of four nested areas (or outer edges): the content edge, padding edge, border edge, and margin edge.\nBox Areas Content Area contains the actual content of the element (the text, image, etc). By default the CSS properties width and height set this size, and the min-width, min-height, max-width, max-height constrain it (but see the discussion of box-sizing below).\nPadding Area provides space between the content and the border of the HTML element. It is set by the padding properties (padding-top, padding-right, padding-bottom, and padding-left, as well as the shorthand versions).\nBorder Area draws a border around the element. Its size is set with the border-width property. Borders can also be dashed, inset, and given rounded corners. See the MDN Border Documentation for details.\nMargin Area provides the space between the border and neighboring elements. Its size is set with the margin properties (margin-top, margin-right, margin-bottom, and margin-left, as well as the shorthand versions).\nBox-Sizing By default, an element\u0026rsquo;s width and height properties set the width and height of the content area, which means any padding, borders, and margins increase the size the element consumes on-screen. This can be altered with the box-sizing CSS rule, which has the following possible values:\ncontent-box (the default) the width and height properties set the content area\u0026rsquo;s size.\nborder-box includes the border area, padding area, and content area within the width and height of the HTML element. Using the CSS rule box-sizing: border-box therefore makes it easier to lay out elements on the page consistently, without having to do a lot of by-hand calculations.\nBackgrounds The background property allows you to set a color, pattern, or image as the background of an HTML element. By default the background extends to the border-area edge, but can be altered with the border-clip property to border-box, padding-box, or content-box. See the MDN Background Documentation for more details on creating backgrounds.\nBox-Shadow The box-shadow property allows you to set a drop shadow beneath the HTML element. See the MDN Documentation for more details on creating box shadows.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/12-css-positioning/",
	"title": "CSS Positioning",
	"tags": [],
	"description": "",
	"content": "By default HTML elements are positioned in the page using the HTML flow algorithm. You can find a detailed discussion in the MDN Documentation. However, you may want to override this and manually position elements, which you can do with the CSS properties position, left, top, right, and bottom.\nThe Positioning Context First, we need to understand the positioning context, this is basically the area an element is positioned within. The left, top, right, and bottom properties affect where an element appears within its context.\nYou can think of the context as a box. The left property determines how far the element is from the left side of this context, the top from the top, right from the right, and bottom from the bottom. These values can be numeric or percentage values, and can be negative.\nTip\nIf you define both a left and right value, only the left value will be used. Similarly, if both top and bottom are supplied, only top is used. Use the width and height properties in conjunction with the positioning rules if you want to control the element\u0026rsquo;s dimensions.\nWhat constitutes the positioning context depends on the elements position property, which we\u0026rsquo;ll discuss next.\nThe Position Property The position property can be one of several values:\nStatic Positioning The default position value is static. It positions the element where it would normally be in the flow and ignores any left, top, right, and bottom properties.\nRelative Positioning The position value of relative keeps the element where it would normally be in the flow, just like static. However, the left, top, right, and bottom properties move the element relative to this position - in effect, the positioning context is the hole the element would have filled with static positioning.\nAbsolute Positioning Assigning the position property the value of absolute removes the element from the flow. Other statically positioned elements will be laid out as though the absolutely positioned element was never there. The positioning context for an absolutely positioned element is its first non-statically positioned ancestor, or (if there is none), the viewport.\nA common CSS trick is to create a relatively-positioned element, and then absolutely position its children.\nFixed Positioning Assigning the value of fixed to the position property also removes the element from the flow. However, its positioning context is always the viewport. Moreover, if the page is scrolled, a fixed-position element stays in the same spot (an absolutely-positioned element will scroll with the page). This makes fixed position elements useful for dialogs, pop-ups, and the like.\nZ-Order By default, elements are drawn in the browser in the order they appear in the HTML. Thus, if we position an element further down the page, it may be covered up by succeeding elements. The z-index property provides us with a fix. The default value for the z-index is 0. Items with a larger z-index are drawn later.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/13-css-layouts/",
	"title": "CSS Layouts",
	"tags": [],
	"description": "",
	"content": "We often speak of the separation of concerns principle in the context of web development as setting up the roles of HTML, CSS, and JavaScript. In this understanding, HTML provides the organization of content, CSS provides for the presentation of the content, and JavaScript provides for user interaction.\nIn this understanding, CSS is often tasked with the role of laying out elements on the page. More specifically, it overrides the default flow of HTML elements (see our earlier discussion of block vs. inline elements in the HTML chapter), altering how the browser arranges elements on the page.\nThe three most common layout approaches currently used in modern web development are float, flexbox, and grid, named for the CSS properties that make them possible. You may also encounter absolutely positioned layouts and table layouts, so we will briefly discuss those as well.\nFloat Layouts By default a block-level element stretches the width of the parent element, and its siblings are pushed underneath. The CSS float property changes this behavior, allowing a block-level element to determine an appropriate width based on its content (or CSS rules), and allows sibling elements to \u0026ldquo;float\u0026rdquo; next to it. Thus, the float property has two primary values, left and right (as well as none and inherit). A float: left causes the element to float on the left side of its containing element, and a float: right floats it to the right.\nA common use is to float figures and images within a page, i.e.:\n\u0026lt;blockquote\u0026gt; \u0026lt;img src=\u0026#34;/images/Marc-Andreessen.jpg\u0026#34;/\u0026gt; \u0026lt;p\u0026gt;People tend to think of the web as a way to get information or perhaps as a place to carry out ecommerce. But really, the web is about accessing applications. Think of each website as an application, and every single click, every single interaction with that site, is an opportunity to be on the very latest version of that application.\u0026lt;/p\u0026gt; \u0026lt;span\u0026gt;- Marc Andreessen\u0026lt;/span\u0026gt; \u0026lt;/blockquote\u0026gt; People tend to think of the web as a way to get information or perhaps as a place to carry out ecommerce. But really, the web is about accessing applications. Think of each website as an application, and every single click, every single interaction with that site, is an opportunity to be on the very latest version of that application. - Marc Andreessen But floats can also be used to create multi-column layouts, i.e.: .column { float: left; box-sizing: border-box; width: 33%; height:60px; color: white; } .one {background-color: red} .two {background-color: blue; margin-left: 0.5%; margin-right: 0.5%} .three {background-color: green} \u0026lt;div class=\u0026#34;column one\u0026#34;\u0026gt; One \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column two\u0026#34;\u0026gt; Two \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column three\u0026#34;\u0026gt; Three \u0026lt;/div\u0026gt; One Two Three Finally, when discussing the float property, we need to discuss the clear property as well. The clear property is used to move an element below the margin area of any floating elements - basically resetting the flow of the page. It can selectively clear floating elements in the left, right, or both directions. In our column example, if we wanted to add a footer that stretched across all three columns, we\u0026rsquo;d use something like:\nfooter { clear: both; border: 1px solid black; } \u0026lt;div class=\u0026#34;column one\u0026#34;\u0026gt; One \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column two\u0026#34;\u0026gt; Two \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column three\u0026#34;\u0026gt; Three \u0026lt;/div\u0026gt; \u0026lt;footer\u0026gt;Footer\u0026lt;/footer\u0026gt; One Two Three Footer Flexbox Layouts The Flexible Box Layout (flexbox) is intended to offer a greater degree of control and flexibility (pun intended) to laying out web pages. Its purpose is to provide an efficient way of laying out, aligning, and distributing elements within a container. Moreover, it can carry out this goal even when the sizes of the child elements are unknown or dynamic.\nThe flexbox model therefore consists of two levels of nested elements - an outer container element and inner content item elements (the content item elements themselves can have many descendant elements). The flexbox properties help define how the content item elements are laid out within their parent container.\nAn HTML element is turned into a flexbox container by assigning it the display property of flex. Additional properties then control how the elements contained within our new flexbox container are laid out. These include:\nflex-direction determines how items are laid out, either row, column, row-reverse, or column-reverse.\nwrap-items determines if the row or column wraps into multiple rows or columns. Its values are no-wrap (default), wrap, and wrap-reverse.\njustify-content defines how content items will be aligned along the main axis of the container (horizontal for rows, and vertical for columns). Its possible values are: flex-start, flex-end, center, space-between, and space-around.\nalign-items defines how content items are aligned along the secondary axis of the container (vertically for rows, and horizontally for columns). Its possible values are flex-start (the default), flex-end, center, stretch, and baseline.\nThus, to re-create our three-column layout with flexbox, we would:\n.three-column { display: flex; flex-direction: column; justify-content: space-between; } .three-column \u0026gt; div { color: white; width: 33%; height: 60px; } \u0026lt;div class=\u0026#34;three-column\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;one\u0026#34;\u0026gt; one \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;two\u0026#34;\u0026gt; two \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;three\u0026#34;\u0026gt; three \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; One Two Three The items can also override these default behaviors with item specific CSS attributes, including allowing items to grow with flex-grow or shrink with flex-shrink to fit available space, override the default order of elements using the order attribute, or altering the alignment on a per-item basis with align-self.\nYou can also create very sophisticated layouts by nesting flex containers within flex containers. A superb reference for working with flexbox is CSS Tricks\u0026rsquo; Complete Guide to Flexbox.\nGrid Layouts While flexbox brought a lot of power to the web designer, the Grid model is an even more powerful way to lay out web elements. Unlike flex, which focuses on arranging elements along one dimension (provided you aren\u0026rsquo;t wrapping), the Grid model lays elements out in a two-dimensional grid.\nAn HTML element is turned into a grid container by assigning it the display property of grid or inline-grid. Then you define the size of the grid elements with the properties grid-template-rows and grid-template-columns. These attributes take the measurements of the columns and rows. I.e. we could recreate our three-column layout with grid-template-columns: 33% 33% 33%. But the grid is far more powerful than that. Let\u0026rsquo;s expand our three-column layout to have a separate header and footer:\ndiv#page { display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 150px auto 100px; } Here we use the unit fr for our column width, which proportions out the \u0026ldquo;free space remaining\u0026rdquo; after hard-coded measurements are accounted for. In our case, this translates into three equal-sized columns taking up all the available space.\nFor rows, our first row will be the header, and we\u0026rsquo;ve sized it to 150 pixels. The next row is our content, we\u0026rsquo;ve used the auto value to allow it to size appropriately to contain its content. The last row is the footer, and we\u0026rsquo;ve sized it to 100 pixels.\nOur HTML would look like:\n\u0026lt;div id=\u0026#34;page\u0026#34;\u0026gt; \u0026lt;header\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;one\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;two\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;three\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; And finally, we can assign these HTML elements to part of the grid with the grid-area property, which takes the values for row start, column start, row end, column end separated by slashes (/) to define the area of the grid they span:\nheader { grid-area: 1/1/2/4; border: 1px solid black; } #one { grid-area: 2/1/3/2; height: 50px; background-color: red; } #two { grid-area: 2/2/3/3; height: 200px; background-color: blue; } #three { grid-area: 2/3/3/4; height: 300px; background-color: green } footer { grid-area: 3/1/4/4; border: 1px solid black; } Header One Two Three Footer We\u0026rsquo;ve really only scratch the surface of what is possible with the grid. Items can be aligned and justified, and tweaked in other ways, just as with flexbox. Names can be assigned to grid rows, grid columns, and grid areas, and used to make the resulting CSS more approachable and understandable.\nA great resource for deeper exploration is CSS Trick\u0026rsquo;s Complete Guide to Grid.\nTable Layouts At one point in the 1990\u0026rsquo;s, it was common practice for graphic designers to create a web page using graphic design software, export it as an image, and then slice up the image. These pieces were then used as the background-image property of a table cell, and text was overlaid on this graphics as the contents of the cell.\nThankfully, this practice has largely been abandoned, but you may still encounter it from time to time. There are some very real problems with the approach: if you increase the text size on the page, the cells may expand beyond the size of their background image, and the seams between the images will open up. Also, if a screen reader is used, it will often read content out-of-order and will describe the portions in terms of table rows and columns.\nIn web design best practices, tables should only be used for tabular data. If you desire to use this kind of slice-and-dice approach, use the Grid instead. It provides the same control over the placement of text, and can use a single background-image on the container element or multiple background images for the items.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/4-css/14-responsive-css/",
	"title": "Responsive Web Design",
	"tags": [],
	"description": "",
	"content": "Modern websites are displayed on a wide variety of devices, with screen sizes from 640x480 pixels (VGA resolution) to 3840x2160 pixels (4K resolution). It should be obvious therefore that one-size-fits-all approach to laying out web applications does not work well. Instead, the current best practice is a technique known as Responsive Web Design. When using this strategy your web app should automatically adjusts the layout of the page based on how large the device screen it is rendered on.\nMedia Queries At the heart of the responsive CSS approach is a CSS technique called media queries. These are implemented with a CSS media at-rule (at-rules modify the behavior of CSS, and are proceeded by an at symbol (@), hence the name). The original purpose of the media rule was to define different media types - i.e. screen and print, which would be selectively applied based on the media in play. For example, the rule:\n@media print { img { display: none; } .advertisement { display: none; } } would hide all images and elements with the advertisement class when printing a web page. You can also specify the media type with the media attribute in a \u0026lt;link\u0026gt; element, i.e. \u0026lt;link href=\u0026quot;print.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot; media=\u0026quot;print\u0026quot;\u0026gt; would apply the rules from print.css only when printing the website.\nHowever, the real usefulness of the @media rule is when it is combined with a media query, which determines if its nested rules should be applied based on some aspect of the display.\nThe media query consists of:\nThe @media keyword An optional media type (typically screen, but could also be all, print, and speech) The desired media features surrounded by parentheses. Multiple features can be joined by logical operators and, or logically or-ed using a ,. More advanced queries can use not to invert an expression (if using not you must specify the media type). A block of CSS surrounded by {} An example media query that applies only when the screen is in portrait orientation (taller than it is wide) is:\n@media (orientation: portrait) { /* rules for a portrait orientation go here... */ } The most commonly used media features are max-width, min-width, max-height, min-height, and orientation. The sizes can be specified in any CSS unit of measurement, but typically px is used. The orientation can either be portrait or landscape.\nWe can also combine multiple queries into a single @media rule:\n@media (orientation: landscape) and (max-width: 700px) { /* rules for a landscape-oriented screen 700 pixels or less wide */ } The and in this case works like a logical and. You can also use the not keyword, which inverts the meaning of the query, or commas ,, which operate like a logical or.\nMore details on the use of media queries can be found in the MDN Documentation on the subject.\nBy combining the use of media queries, and CSS layout techniques, you can drastically alter the presentation of a web application for different devices. Most browser development tools will also let you preview the effect of these rules by selecting a specific device size and orientation. See the Chrome Device Mode documentation, Safari Developer Documentation, and Firefox Responsive Design Mode Documentation for details.\nThe Viewport Meta Tag The media query size features relate to the viewport, a rectangle representing the browser\u0026rsquo;s visible area. For a desktop browser, this is usually equivalent to the client area of the browser window (the area of the window excluding the borders and menu bar). For mobile devices, however, the viewport is often much bigger than the actual screen size, and then scaled to fit on the screen:\nThis strategy helps legacy websites reasonably appear on mobile devices. However, with responsive designs, we want the viewport and the device size to match exactly. We can clue mobile browsers into this desire by adding a specific meta tag to the \u0026lt;head\u0026gt; of the HTML:\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; For a responsive design to work, it is critical that this \u0026lt;meta\u0026gt; element be included, and use the exact syntax specified.\nAdvanced CSS Layouts Finally, responsive designs tend to make heavy use of two new CSS layout strategies - The Flexible Box Module (flex) and the CSS Grid Layout. These two layout tools allow for easily changing layouts within media queries - even allowing for the rearranging of elements!\nTwo great visual resources for learning the ins and outs of these layouts are CSS Trick\u0026rsquo;s A Complete Guide to Flexbox and A Complete Guide to Grid. In fact, you may want to bookmark these now.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/",
	"title": "Homepage",
	"tags": [],
	"description": "",
	"content": "Web Page Development CC 120 Course Textbook\nNathan Bean\nKansas State University\n© 2022\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n"
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ksu-cs-textbooks.github.io/cc120/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]