<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homepage on K-State CC 120 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc120/</link>
    <description>Recent content in Homepage on K-State CC 120 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Jul 2022 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cc120/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Course Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/0-forward/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/0-forward/01-introduction/</guid>
      <description>Web Only
This textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
Course Resources Syllabus Textbook Welcome Message Hello students, and welcome to CC 120 - Web Page Development. My name is Nathan Bean, and I will be your instructor for this course.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/1-www/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/1-www/01-introduction/</guid>
      <description>While working for CERN (the European Organization for Nuclear Research), Tim Burners-Lee proposed bringing the ideas of hyper-text documents together with emerging Internet technologies like the Transmission Control Protocol (TCP) and the Domain Name System (DNS) to create the World-Wide Web. He defined the Hyper Text Transfer Protocol (HTTP), the first web server, and the first web browser, in 1990 demonstrating the feasibility of the idea. Since that time, the web has grown to contain around 1.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/3-html/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/3-html/01-introduction/</guid>
      <description>Hyper-Text Markup Language (HTML) alongside Hyper-Text Transfer Protocol (HTTP) formed the core of Sir Tim Berners-Lee&amp;rsquo;s world-wide web. As the name implies, HTTP is a markup language, one that combines the text of what is being said with instructions on how to display it.
The other aspect of HTML is its hyper-text nature. Hyper-text refers to text that links to additional resources - primarily the links in the document, but also embedded multimedia.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/01-introduction/</guid>
      <description>Style sheets are collections of rules for modifying how a SGML document appears. Cascading Style Sheets (CSS) are the specific implementation adopted by the W3C for HTML.
The core concept of CSS is that defines rules altering the appearance of HTML elements that can be selectively applied. These rules are held in a document (the style sheet) and are applied in a well-defined priority order (the cascading part of CSS).</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/01-introduction/</guid>
      <description>As the World Wide Web was gaining popularity in the mid-nineties, browser manufacturers started experimenting with interpreting program scripts embedded within webpages. By far the most successful of these was JavaScript, initially developed by Brandon Eich for Netscape.
Brandon Eich was hired to integrate the Scheme programming language into the Netscape browser. But when Netscape cut a deal with Sun Microsystems to bring Java Applets to their browser, his mission was altered to create a more Java-like language.</description>
    </item>
    
    <item>
      <title>Navigating Canvas &amp; Codio</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/0-forward/02-navigating-canvas-codio/</link>
      <pubDate>Thu, 16 Jan 2020 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/0-forward/02-navigating-canvas-codio/</guid>
      <description>Web Only
This textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
Resources Codio Documentation Video Script This course makes extensive use of several features of Canvas which you may or may not have worked with before. To give you the best experience in this course, this video will briefly describe those features and the best way to access them.</description>
    </item>
    
    <item>
      <title>Basic Syntax</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/02-basic-syntax/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/02-basic-syntax/</guid>
      <description>CONSOLE Because Netscape was adopting Java at the same time they were developing what would become JavaScript, there was a push to make the syntax stay somewhat consistent between the two languages. As a result, JavaScript has much of the look and feel of an imperative language like C, C#, or Java.
However, this similarity can be deceptive, because how JavaScript operates can be quite different than those languages. This can lead to frustration for imperative programmers learning JavaScript.</description>
    </item>
    
    <item>
      <title>CSS Rules</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/02-css-rule-format/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/02-css-rule-format/</guid>
      <description>CSS properties consist of key-value pairs separated by a colon (:). For example:
color: red
indicates that the styled HTML elements should be given a red color.
Multiple properties are separated by semicolons (;), i.e.:
color: red; background-color: green; Rules are CSS properties grouped within curly braces ({}) and proceeded by a CSS selector to identify the HTML element(s) they should be applied to:
p { color: red; background-color: green; } In this example, all paragraph elements (&amp;lt;p&amp;gt;) should have red text on a green background (how festive!</description>
    </item>
    
    <item>
      <title>HTML Element Structure</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/3-html/02-element-structure/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/3-html/02-element-structure/</guid>
      <description>HTML was built from the SGML (Structured Generalized Markup Language) standard, which provides the concept of &amp;ldquo;tags&amp;rdquo; to provide markup and structure within a text document. Each element in HTML is defined by a unique opening and closing tag, which in turn are surrounded by angle brackets (&amp;lt;&amp;gt;).
For example, a top-level heading in HTML would be written:
&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
And render:
Hello World The &amp;lt;h1&amp;gt; is the opening tag and the &amp;lt;/h1&amp;gt; is the closing tag.</description>
    </item>
    
    <item>
      <title>The Vision of Sir Tim Berners Lee</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/1-www/02-the-technologies-of-the-web/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/1-www/02-the-technologies-of-the-web/</guid>
      <description>When Tim-Berners Lee presented his original ideas for the World-Wide Web, it consisted of a protocol for requesting web documents - HTTP, and a markup language those documents could be written in - HTML. These initial technologies continue to be the foundation of the world-wide web, and have been enhanced by technologies to style webpages - CSS - and modify them - JavaScript.
Each of these technologies has continued to evolve under the guidance of the W3C.</description>
    </item>
    
    <item>
      <title>CSS Selectors</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/03-css-selectors/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/03-css-selectors/</guid>
      <description>In the example from the previous section, we saw:
p { color: red; background-color: green; } Here the p is a CSS Selector, which tells us what elements on the page the CSS rules should be applied to.
Simple Selectors The most basic CSS selectors come in several flavors, which we&amp;rsquo;ll take a look at next. Simple selectors are a string composed of alphanumeric characters, dashes (-), and underscores (_). Certain selectors also use additional special characters.</description>
    </item>
    
    <item>
      <title>HTML Document Structure</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/3-html/03-document-structure/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/3-html/03-document-structure/</guid>
      <description>When authoring an HTML page, HTML elements should be organized into an HTML Document. This format is defined in the HTML standard. HTML that does not follow this format are technically invalid, and may not be interpreted and rendered correctly by all browsers. Accordingly, it is important to follow the standard.
The basic structure of a valid HTML5 document is:
&amp;lt;!doctype HTML&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Page Title Goes Here&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Page body and tags go here.</description>
    </item>
    
    <item>
      <title>JavaScript Functions</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/03-functions/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/03-functions/</guid>
      <description>CONSOLE While JavaScript may look like an imperative language on the surface, much of how it behaves is based on functional languages like Scheme. This leads to some of the common sources of confusion for programmers new to the language. Let&amp;rsquo;s explore just what its functional roots mean.
JavaScript implements first-class functions, which means they can be assigned to a variable, passed as function arguments, returned from other functions, and even nested inside other functions.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/1-www/03-summary/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/1-www/03-summary/</guid>
      <description>This textbook will guide you through the three core client-side web technologies (HTML, CSS, &amp;amp; JS), as well as discuss the role HTTP plays in retrieving resources for a web client (like a browser) from the web. It is organized into chapters focused on each of those technologies in turn:
The World-Wide-Web Hyper-Text Transfer Protocol Hyper-Text Markup Language Cascading Style Sheets JavaScript Once you understand client-side web technologies, you may want to turn your attention to the server side.</description>
    </item>
    
    <item>
      <title>Where to Find Help</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/0-forward/03-where-to-find-help/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/0-forward/03-where-to-find-help/</guid>
      <description>Web Only
This textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
Resources K-State IT Help Desk - Email helpdesk@ksu.edu K-State Online Canvas Help Instructure Canvas Guides Codio Documentation Codio Support K-State Libraries K-State CS Support K-State CS Advising K-State Engineering Student Services K-State Office of Student Life K-State Report It Video Script As you work on the materials in this course, you may run into questions or problems and need assistance.</description>
    </item>
    
    <item>
      <title>Applying CSS Rules</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/04-applying-css-rules/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/04-applying-css-rules/</guid>
      <description>There are multiple ways CSS rules can be applied to HTML elements. A document containing CSS rules can be attached to a HTML document with a &amp;lt;link&amp;gt; element, embedded directly into the html page with a &amp;lt;style&amp;gt; element, or applied directly to a HTML element with the style attribute. Let&amp;rsquo;s look at each option.
Linked CSS Documents The &amp;lt;link&amp;gt; HTML element can be used to link the HTML page it appears in to a text file of CSS rules.</description>
    </item>
    
    <item>
      <title>Arrays - Lists by Another Name</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/04-arrays-and-lists/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/04-arrays-and-lists/</guid>
      <description>CONSOLE You might have noticed we used an array in discussing the for .. in loop, but didn&amp;rsquo;t talk about it in our data type discussion. This is because in JavaScript, an array is not a primitive data type. Rather, it&amp;rsquo;s a special kind of object.
This is one of those aspects of JavaScript that breaks strongly with imperative languages. Brandon Eich drew heavily from Scheme, which is a functional language that focuses heavily on list processing&amp;hellip; and the JavaScript array actually has more to do with lists than it does arrays.</description>
    </item>
    
    <item>
      <title>Flow Model</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/3-html/04-flow-model/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/3-html/04-flow-model/</guid>
      <description>Given that the role of HTML is markup, i.e. providing structure and formatting to text, HTML elements can broadly be categorized into two categories depending on how they affect the flow of text - inline and block.
Inline elements referred to elements that maintained the flow of text, i.e. the bring attention to (&amp;lt;b&amp;gt;) element used in a paragraph of text, would bold the text without breaking the flow:
&amp;lt;p&amp;gt;The quick brown &amp;lt;b&amp;gt;fox&amp;lt;/b&amp;gt; lept over the log&amp;lt;/p&amp;gt;</description>
    </item>
    
    <item>
      <title>What You&#39;ll Learn</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/0-forward/04-what-youll-learn/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/0-forward/04-what-youll-learn/</guid>
      <description>Week &amp;amp; Topic The World Wide Web Web Pages and Browsers Basic CSS CSS Layouts Introduction to JavaScript JavaScript and the DOM Querying and Modifying the DOM Web Accessibility Working with Forms Making Requests with JavaScript CSS Animations Web Graphics Web Hosting JavaScript Libraries CSS Libraries </description>
    </item>
    
    <item>
      <title>Course Textbooks</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/0-forward/05-textbooks/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/0-forward/05-textbooks/</guid>
      <description>Web Only
This textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
This course does not have a required print textbook. The resources presented in the modules are also organized into an online textbook that can be accessed here: https://ksu-cs-textbooks.github.io/cc120/. You may find this a useful reference if you prefer a traditional textbook layout.</description>
    </item>
    
    <item>
      <title>CSS Cascade</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/05-css-cascading/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/05-css-cascading/</guid>
      <description>Now that we know how to create an apply CSS rules to our HTML, let&amp;rsquo;s explore how they actually are used. A core idea behind CSS is the cascade algorithm, the cascading in cascading style sheets (CSS). The core idea behind the cascade algorithm is that as the browser encounters and parses CSS rules, they are collectively applied to the elements they match with. If the same rule is set multiple times, say color, the cascading algorithm decides which should be applied.</description>
    </item>
    
    <item>
      <title>Objects and Classes</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/05-objects-and-classes/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/05-objects-and-classes/</guid>
      <description>CONSOLE JavaScript is also an object-oriented language, but the way it implements objects is derived from the ideas of the Self programming language, rather than the C++ origins of Java and C#&amp;rsquo;s object-oriented approaches.
Object Properties Let&amp;rsquo;s start with what an object is in JavaScript. It&amp;rsquo;s basically a collection of properties - key/value pairs, similar to the concept of a Dictionary in other languages. The properties play both the role of fields and methods of the object, as a property can be assigned a primitive value or a function.</description>
    </item>
    
    <item>
      <title>Tables</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/3-html/05-tables/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/3-html/05-tables/</guid>
      <description>Tables were amongst the first addition to HTML (along with images), as they were necessary for the primary role of early HTML, disseminating research.
A table requires a lot of elements to be nested in a specific manner. It is best expressed through an example:
&amp;lt;table&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;Role&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Darth Vader&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Antagonist&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Luke Skywalker&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Coming-of-age protagonist&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Princess Lea&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Heroic resistance fighter&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Obi-Wan Kenobi&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Wise old man&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Han Solo&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Likeable scoundrel&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Chewbacca&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;The muscle&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Threepio&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Comedic foil&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Artoo Deetoo&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Plot driver&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; It renders as:</description>
    </item>
    
    <item>
      <title>Attaching Scripts</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/06-attaching-scripts/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/06-attaching-scripts/</guid>
      <description>Much like there are multiple ways to apply CSS to a web app, there are multiple ways to bring JavaScript into one. We can use a &amp;lt;script&amp;gt; tag with a specified src attribute to load a separate document, put our code into the &amp;lt;script&amp;gt; tag directly, or even add code to attributes of an HTML element. Let&amp;rsquo;s look at each option.
Script Tag with Source We can add a &amp;lt;script&amp;gt; tag with a src attribute that gives a url pointing to a JavaScript file.</description>
    </item>
    
    <item>
      <title>CSS Specificity</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/06-css-specificity/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/06-css-specificity/</guid>
      <description>But what about two rules that conflict that appear in the same level of the cascade order? For example, given the CSS:
p { color: black; } .warning { color: red; } what would the color of &amp;lt;p class=&amp;quot;warning&amp;quot;&amp;gt; be? You might say it would be red because the .warning CSS rules come after the p rules. And that would be true if the two rules had the same specificity. An example of that is:</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/3-html/06-forms/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/3-html/06-forms/</guid>
      <description>Forms were also amongst the first additions to the HTML standard, and provide the ability to submit data to a web server. A web form is composed of &amp;lt;input&amp;gt;, &amp;lt;textarea&amp;gt;, &amp;lt;select&amp;gt; and similar elements nested within a &amp;lt;form&amp;gt; element.
The Form Element The form element primarily is used to organize input elements and specify how they should be submitted. In its simplest form, it is simply a tag that other elements are nested within:</description>
    </item>
    
    <item>
      <title>Plagiarism Policy</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/0-forward/06-plagiarism/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/0-forward/06-plagiarism/</guid>
      <description>Web Only
This textbook was authored for the CC 120 - Web Page Development course at Kansas State University. This front matter is specific to that course. If you are not enrolled in the course, please disregard this section.
Resources K-State Honor &amp;amp; Integrity System Video Script &amp;ldquo;On my honor, as a student, I have neither given nor received unauthorized aid on this academic work.&amp;rdquo; - K-State Honor Pledge</description>
    </item>
    
    <item>
      <title>Common HTML Elements</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/3-html/07-common-html-elements/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/3-html/07-common-html-elements/</guid>
      <description>This page details some of the most commonly used HTML elements. For a full reference, see MDN&amp;rsquo;s HTML Element Reference.
Document-Level Elements These elements describe the basic structure of the HTML document.
&amp;lt;html&amp;gt; The &amp;lt;html&amp;gt; element contains the entire HTML document. It should have exactly two children, the &amp;lt;head&amp;gt; and the &amp;lt;body&amp;gt; elements, appearing in that order.
&amp;lt;head&amp;gt; The &amp;lt;head&amp;gt; element contains any metadata describing the document. The most common children elements are &amp;lt;title&amp;gt;, &amp;lt;meta&amp;gt;, and &amp;lt;link&amp;gt;.</description>
    </item>
    
    <item>
      <title>CSS Units</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/07-css-units/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/07-css-units/</guid>
      <description>When specifying CSS rules, you often need to provide a unit of measurement. Any time you provide a measurement in a CSS rule, you must provide the units that measurement is being expressed in, following the value. For example:
#banner { width: 300px; } sets the width of the element with id banner to 300 pixels.
There are actually a lot of units available in CSS, and we&amp;rsquo;ll summarize the most common in this section.</description>
    </item>
    
    <item>
      <title>The Document Object Model</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/07-the-dom/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/07-the-dom/</guid>
      <description>Now that we&amp;rsquo;ve reviewed the basic syntax and structure of the JavaScript language, and how to load it into a page, we can turn our attention to what it was created for - to interact with web pages in the browser. This leads us to the Document Object Model (DOM).
The DOM is a tree-like structure that is created by the browser when it parses the HTML page. Then, as CSS rules are interpreted and applied, they are attached to the individual nodes of the tree.</description>
    </item>
    
    <item>
      <title>CSS Functions</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/08-css-functions/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/08-css-functions/</guid>
      <description>CSS provides a number of useful functions that calculate values. Functions are written in the form name(arg1, arg2, ...) and are provided as values to CSS properties. For example, this CSS code sets the height of the content area to the available space on screen for content after subtracting a header and footer:
#header {height: 150px} #footer {height: 100px} #content { height: calc(100vh - 150px - 100px); } Here 100vh is the height of the viewport, and the header and footer are defined in terms of pixels.</description>
    </item>
    
    <item>
      <title>Document Object Model</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/3-html/08-the-dom/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/3-html/08-the-dom/</guid>
      <description>The Document Object Model (or DOM) is a data structure representing the content of a web page, created by the browser as it parses the website. The browser then makes this data structure accessible to scripts running on the page. The DOM is essentially a tree composed of objects representing the HTML elements and text on the page.
Consider this HTML:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello DOM!&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;#34;site.css&amp;#34;/&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;banner&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;Hello DOM!</description>
    </item>
    
    <item>
      <title>Strict Mode</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/08-strict-mode/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/08-strict-mode/</guid>
      <description>JavaScript has been around a long time, and a lot of JavaScript code has been written by inexperienced programmers. Browser manufacturers compensated for this by allowing lenient interpretation of JavaScript programs, and by ignoring many errors as they occurred.
While this made poorly-written scripts run, arguably they didn&amp;rsquo;t run well. In ECMA5, strict mode was introduced to solve the problems of lenient interpretation.
Strict mode according to the Mozilla Developer Network:</description>
    </item>
    
    <item>
      <title>CSS Colors</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/09-css-colors/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/09-css-colors/</guid>
      <description>CSS also has many properties that can be set to a color, i.e. color, background-color, border-color, box-shadow, etc. Colors consist of three or four values corresponding to the amount of red, green, and blue light blended to create the color. The optional fourth value is the alpha, and is typically used to specify transparency.
Colors are stored as 24-bit values, with 8 bits for each of the four channels (R,G,B,and A), representing 256 possible values (2^8) for each channel.</description>
    </item>
    
    <item>
      <title>Regular Expressions</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/09-regexp/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/09-regexp/</guid>
      <description>CONSOLE The JavaScript String prototype has some very powerful methods, such as String.prototype.includes() which recognizes when a string contains a substring - i.e.:
&amp;#34;foobarwhen&amp;#34;.includes(&amp;#34;bar&amp;#34;) would evaluate to true. But what if you needed a more general solution? Say, to see if the text matched a phone number pattern like XXX-XXX-XXXX? That&amp;rsquo;s where Regular Expressions come in.
Regular Expressions are a sequence of characters that define a pattern that can be searched for within a string.</description>
    </item>
    
    <item>
      <title>CSS and Text</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/10-css-text/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/10-css-text/</guid>
      <description>As the original purpose of the World-Wide-Web was to disseminate written information, it should be no surprise that CSS would provide many properties for working with text. Some of the most commonly employed properties are:
font-family defines the font to use for the text. Its value is one or more font family or generic font names, i.e. font-family: Tahoma, serif, font-family: cursive or font-family: &amp;quot;Comic Sans&amp;quot;. Font family names are typically capitalized and, if they contain spaces or special characters, double-quoted.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/10-json/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/10-json/</guid>
      <description>CONSOLE JSON is an acronym for JavaScript Object Notation, a serialization format that was developed in conjunction with ECMAScript 3. It is a standard format, as set by ECMA-404.
JSON Format Essentially, it is a format for transmitting JavaScript objects. Consider the JavaScript object literal notation:
var whilma = { name: &amp;#34;Wilma Flintstone&amp;#34;, relationship: &amp;#34;wife&amp;#34; } var pebbles = { name: &amp;#34;Pebbles Flintstone&amp;#34;, age: 3, relationship: &amp;#34;daughter&amp;#34; } var fred = { name: &amp;#34;Fred Flintstone&amp;#34;, job: &amp;#34;Quarry Worker&amp;#34;, payRate: 8, dependents: [whilma, pebbles] } If we were to express the same object in JSON:</description>
    </item>
    
    <item>
      <title>CSS Box Model</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/11-css-box-model/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/11-css-box-model/</guid>
      <description>As the browser lays out HTML elements in a page, it uses the CSS Box Model to determine the size and space between elements. The CSS box is composed of four nested areas (or outer edges): the content edge, padding edge, border edge, and margin edge.
Box Areas Content Area contains the actual content of the element (the text, image, etc). By default the CSS properties width and height set this size, and the min-width, min-height, max-width, max-height constrain it (but see the discussion of box-sizing below).</description>
    </item>
    
    <item>
      <title>CSS Positioning</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/12-css-positioning/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/12-css-positioning/</guid>
      <description>By default HTML elements are positioned in the page using the HTML flow algorithm. You can find a detailed discussion in the MDN Documentation. However, you may want to override this and manually position elements, which you can do with the CSS properties position, left, top, right, and bottom.
The Positioning Context First, we need to understand the positioning context, this is basically the area an element is positioned within. The left, top, right, and bottom properties affect where an element appears within its context.</description>
    </item>
    
    <item>
      <title>CSS Layouts</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/13-css-layouts/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/13-css-layouts/</guid>
      <description>We often speak of the separation of concerns principle in the context of web development as setting up the roles of HTML, CSS, and JavaScript. In this understanding, HTML provides the organization of content, CSS provides for the presentation of the content, and JavaScript provides for user interaction.
In this understanding, CSS is often tasked with the role of laying out elements on the page. More specifically, it overrides the default flow of HTML elements (see our earlier discussion of block vs.</description>
    </item>
    
    <item>
      <title>Responsive Web Design</title>
      <link>https://ksu-cs-textbooks.github.io/cc120/4-css/14-responsive-css/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/4-css/14-responsive-css/</guid>
      <description>Modern websites are displayed on a wide variety of devices, with screen sizes from 640x480 pixels (VGA resolution) to 3840x2160 pixels (4K resolution). It should be obvious therefore that one-size-fits-all approach to laying out web applications does not work well. Instead, the current best practice is a technique known as Responsive Web Design. When using this strategy your web app should automatically adjusts the layout of the page based on how large the device screen it is rendered on.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cc120/2-http/01-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/2-http/01-introduction/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cc120/2-http/02-browser-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/2-http/02-browser-requests/</guid>
      <description>Before we get too deep in the details of what a request is, and how it works, let&amp;rsquo;s explore the primary kind of request you&amp;rsquo;re already used to making - requests originating from a browser. Every time you use a browser to browse the Internet, you are creating a series of HTTP (or HTTPS) requests that travel across the networks between you and a web server, which responds to your requests.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ksu-cs-textbooks.github.io/cc120/5-js/11-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ksu-cs-textbooks.github.io/cc120/5-js/11-ajax/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
