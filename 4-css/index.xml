




  
	
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cascading Style Sheets :: K-State CC 120 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc120/4-css/</link>
    <description>Cascading Style Sheets Bringing style to the web since 1998</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Jun 2024 15:40:07 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cc120/4-css/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/01-introduction/</guid>
      <description>Style sheets are collections of rules for modifying how a SGML document appears. Cascading Style Sheets (CSS) are the specific implementation adopted by the W3C for HTML.&#xA;The core concept of CSS is that defines rules altering the appearance of HTML elements that can be selectively applied. These rules are held in a document (the style sheet) and are applied in a well-defined priority order (the cascading part of CSS).</description>
    </item>
    <item>
      <title>CSS Rules</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/02-css-rule-format/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/02-css-rule-format/</guid>
      <description>CSS properties consist of key-value pairs separated by a colon (:). For example:&#xA;color: red&#xA;indicates that the styled HTML elements should be given a red color.&#xA;Multiple properties are separated by semicolons (;), i.e.:&#xA;color: red; background-color: green;Rules are CSS properties grouped within curly braces ({}) and proceeded by a CSS selector to identify the HTML element(s) they should be applied to:&#xA;p { color: red; background-color: green; }In this example, all paragraph elements (&lt;p&gt;) should have red text on a green background (how festive!</description>
    </item>
    <item>
      <title>CSS Selectors</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/03-css-selectors/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/03-css-selectors/</guid>
      <description>In the example from the previous section, we saw:&#xA;p { color: red; background-color: green; }Here the p is a CSS Selector, which tells us what elements on the page the CSS rules should be applied to.&#xA;Simple Selectors The most basic CSS selectors come in several flavors, which we’ll take a look at next. Simple selectors are a string composed of alphanumeric characters, dashes (-), and underscores (_). Certain selectors also use additional special characters.</description>
    </item>
    <item>
      <title>Applying CSS Rules</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/04-applying-css-rules/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/04-applying-css-rules/</guid>
      <description>There are multiple ways CSS rules can be applied to HTML elements. A document containing CSS rules can be attached to a HTML document with a &lt;link&gt; element, embedded directly into the html page with a &lt;style&gt; element, or applied directly to a HTML element with the style attribute. Let’s look at each option.&#xA;Linked CSS Documents The &lt;link&gt; HTML element can be used to link the HTML page it appears in to a text file of CSS rules.</description>
    </item>
    <item>
      <title>CSS Cascade</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/05-css-cascading/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/05-css-cascading/</guid>
      <description>Now that we know how to create an apply CSS rules to our HTML, let’s explore how they actually are used. A core idea behind CSS is the cascade algorithm, the cascading in cascading style sheets (CSS). The core idea behind the cascade algorithm is that as the browser encounters and parses CSS rules, they are collectively applied to the elements they match with. If the same rule is set multiple times, say color, the cascading algorithm decides which should be applied.</description>
    </item>
    <item>
      <title>CSS Specificity</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/06-css-specificity/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/06-css-specificity/</guid>
      <description>But what about two rules that conflict that appear in the same level of the cascade order? For example, given the CSS:&#xA;p { color: black; } .warning { color: red; }what would the color of &lt;p class=&#34;warning&#34;&gt; be? You might say it would be red because the .warning CSS rules come after the p rules. And that would be true if the two rules had the same specificity. An example of that is:</description>
    </item>
    <item>
      <title>CSS Units</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/07-css-units/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/07-css-units/</guid>
      <description>When specifying CSS rules, you often need to provide a unit of measurement. Any time you provide a measurement in a CSS rule, you must provide the units that measurement is being expressed in, following the value. For example:&#xA;#banner { width: 300px; }sets the width of the element with id banner to 300 pixels.&#xA;There are actually a lot of units available in CSS, and we’ll summarize the most common in this section.</description>
    </item>
    <item>
      <title>CSS Functions</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/08-css-functions/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/08-css-functions/</guid>
      <description>CSS provides a number of useful functions that calculate values. Functions are written in the form name(arg1, arg2, ...) and are provided as values to CSS properties. For example, this CSS code sets the height of the content area to the available space on screen for content after subtracting a header and footer:&#xA;#header {height: 150px} #footer {height: 100px} #content { height: calc(100vh - 150px - 100px); }Here 100vh is the height of the viewport, and the header and footer are defined in terms of pixels.</description>
    </item>
    <item>
      <title>CSS Colors</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/09-css-colors/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/09-css-colors/</guid>
      <description>CSS also has many properties that can be set to a color, i.e. color, background-color, border-color, box-shadow, etc. Colors consist of three or four values corresponding to the amount of red, green, and blue light blended to create the color. The optional fourth value is the alpha, and is typically used to specify transparency.&#xA;Colors are stored as 24-bit values, with 8 bits for each of the four channels (R,G,B,and A), representing 256 possible values (2^8) for each channel.</description>
    </item>
    <item>
      <title>CSS and Text</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/10-css-text/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/10-css-text/</guid>
      <description>As the original purpose of the World-Wide-Web was to disseminate written information, it should be no surprise that CSS would provide many properties for working with text. Some of the most commonly employed properties are:&#xA;font-family defines the font to use for the text. Its value is one or more font family or generic font names, i.e. font-family: Tahoma, serif, font-family: cursive or font-family: &#34;Comic Sans&#34;. Font family names are typically capitalized and, if they contain spaces or special characters, double-quoted.</description>
    </item>
    <item>
      <title>CSS Box Model</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/11-css-box-model/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/11-css-box-model/</guid>
      <description>As the browser lays out HTML elements in a page, it uses the CSS Box Model to determine the size and space between elements. The CSS box is composed of four nested areas (or outer edges): the content edge, padding edge, border edge, and margin edge.&#xA;Box Areas Content Area contains the actual content of the element (the text, image, etc). By default the CSS properties width and height set this size, and the min-width, min-height, max-width, max-height constrain it (but see the discussion of box-sizing below).</description>
    </item>
    <item>
      <title>CSS Positioning</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/12-css-positioning/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/12-css-positioning/</guid>
      <description>By default HTML elements are positioned in the page using the HTML flow algorithm. You can find a detailed discussion in the MDN Documentation. However, you may want to override this and manually position elements, which you can do with the CSS properties position, left, top, right, and bottom.&#xA;The Positioning Context First, we need to understand the positioning context, this is basically the area an element is positioned within. The left, top, right, and bottom properties affect where an element appears within its context.</description>
    </item>
    <item>
      <title>CSS Layouts</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/13-css-layouts/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/13-css-layouts/</guid>
      <description>We often speak of the separation of concerns principle in the context of web development as setting up the roles of HTML, CSS, and JavaScript. In this understanding, HTML provides the organization of content, CSS provides for the presentation of the content, and JavaScript provides for user interaction.&#xA;In this understanding, CSS is often tasked with the role of laying out elements on the page. More specifically, it overrides the default flow of HTML elements (see our earlier discussion of block vs.</description>
    </item>
    <item>
      <title>Responsive Web Design</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/14-responsive-css/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/14-responsive-css/</guid>
      <description>Modern websites are displayed on a wide variety of devices, with screen sizes from 640x480 pixels (VGA resolution) to 3840x2160 pixels (4K resolution). It should be obvious therefore that one-size-fits-all approach to laying out web applications does not work well. Instead, the current best practice is a technique known as Responsive Web Design. When using this strategy your web app should automatically adjusts the layout of the page based on how large the device screen it is rendered on.</description>
    </item>
    <item>
      <title>CSS Transformations</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/15-css-transformations/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/15-css-transformations/</guid>
      <description>With powerful graphics cards becoming commonplace, the W3C standards expanded the CSS rules to take advantage of their abilities. Specifically, the CSS transform property allows us to apply a transformation (scaling, rotating, translating, stretching, skewing, or any combination) to elements on a page. These are performed using a mathematical operation based on the use of matrices. Graphics cards are optimized to perform these matrix operations in parallel, allowing them to quickly transform graphical objects in 3-dimensional space.</description>
    </item>
    <item>
      <title>CSS Transitions</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/16-css-transitions/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/16-css-transitions/</guid>
      <description>While most CSS rules are applied as the page is loaded, some are applied at a future point. One example is pseudo-classes that apply in limited circumstances - like :hover which applies only when the mouse is over an element, or :valid and :invalid which are applied to input elements based on their validation status. Another common instance is when elements are added to the page using JavaScript, as discussed in Chapter 5 - JavaScript.</description>
    </item>
    <item>
      <title>CSS Timing Functions</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/17-timing-functions/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/17-timing-functions/</guid>
      <description>The transition property (and the animations we’ll look at shortly) both make use of timing functions - functions that define how the values of a CSS property change over time as we transition from one state to the next.&#xA;The simplest (and default) transition function is linear, which means the value smoothly transitions from its starting value to its ending value. It is specified as linear.&#xA;While linear is easy to reason about and represent mathematically, transitions often look more realistic if the start or end more slowly, speeding up in the middle.</description>
    </item>
    <item>
      <title>CSS Animation</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/18-css-animation/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/18-css-animation/</guid>
      <description>As the web became more interactive, there was an increased desire to animate elements on webpages. Animations are a powerful tool for increasing visual interest and also conveying information. Consider the Apple sign-in dialog, which on an incorrect username/password combination shakes back and forth briefly, mimicking a human’s head shaking.&#xA;Early animations in the web relied on using JavaScript to change properties of elements on the page. While these techniques are still used, they are increasingly supplanted by new CSS rules that are easier to write and provide more precise control.</description>
    </item>
    <item>
      <title>CSS Libraries</title>
      <link>https://textbooks.cs.ksu.edu/cc120/4-css/19-libraries/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc120/4-css/19-libraries/</guid>
      <description>While you can write custom CSS to accomplish nearly any look you want for your webpages, many developers prefer to use a pre-written CSS library that provides rules covering many common user interface needs. For example, CSS-based menus are very challenging to write well, but a well-designed library makes the task very approachable. CSS libraries also provide a consistent UI look and feel across websites, which helps people browsing your website quickly identify how to move around.</description>
    </item>
  </channel>
</rss>